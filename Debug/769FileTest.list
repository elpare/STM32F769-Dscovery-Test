
769FileTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d9a4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800dba4  0800dba4  0001dba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dbe4  0800dbe4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800dbe4  0800dbe4  0001dbe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dbec  0800dbec  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dbec  0800dbec  0001dbec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dbf0  0800dbf0  0001dbf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800dbf4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008f04  2000000c  0800dc00  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20008f10  0800dc00  00028f10  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00031cc3  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005aba  00000000  00000000  00051cfd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002bc8  00000000  00000000  000577b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002908  00000000  00000000  0005a380  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00038898  00000000  00000000  0005cc88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002698e  00000000  00000000  00095520  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0014f561  00000000  00000000  000bbeae  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0020b40f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bbe4  00000000  00000000  0020b48c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000000c 	.word	0x2000000c
 800021c:	00000000 	.word	0x00000000
 8000220:	0800db8c 	.word	0x0800db8c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000010 	.word	0x20000010
 800023c:	0800db8c 	.word	0x0800db8c

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b972 	b.w	800053c <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9e08      	ldr	r6, [sp, #32]
 8000276:	4604      	mov	r4, r0
 8000278:	4688      	mov	r8, r1
 800027a:	2b00      	cmp	r3, #0
 800027c:	d14b      	bne.n	8000316 <__udivmoddi4+0xa6>
 800027e:	428a      	cmp	r2, r1
 8000280:	4615      	mov	r5, r2
 8000282:	d967      	bls.n	8000354 <__udivmoddi4+0xe4>
 8000284:	fab2 f282 	clz	r2, r2
 8000288:	b14a      	cbz	r2, 800029e <__udivmoddi4+0x2e>
 800028a:	f1c2 0720 	rsb	r7, r2, #32
 800028e:	fa01 f302 	lsl.w	r3, r1, r2
 8000292:	fa20 f707 	lsr.w	r7, r0, r7
 8000296:	4095      	lsls	r5, r2
 8000298:	ea47 0803 	orr.w	r8, r7, r3
 800029c:	4094      	lsls	r4, r2
 800029e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002a2:	0c23      	lsrs	r3, r4, #16
 80002a4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a8:	fa1f fc85 	uxth.w	ip, r5
 80002ac:	fb0e 8817 	mls	r8, lr, r7, r8
 80002b0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002b4:	fb07 f10c 	mul.w	r1, r7, ip
 80002b8:	4299      	cmp	r1, r3
 80002ba:	d909      	bls.n	80002d0 <__udivmoddi4+0x60>
 80002bc:	18eb      	adds	r3, r5, r3
 80002be:	f107 30ff 	add.w	r0, r7, #4294967295
 80002c2:	f080 811b 	bcs.w	80004fc <__udivmoddi4+0x28c>
 80002c6:	4299      	cmp	r1, r3
 80002c8:	f240 8118 	bls.w	80004fc <__udivmoddi4+0x28c>
 80002cc:	3f02      	subs	r7, #2
 80002ce:	442b      	add	r3, r5
 80002d0:	1a5b      	subs	r3, r3, r1
 80002d2:	b2a4      	uxth	r4, r4
 80002d4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002dc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002e4:	45a4      	cmp	ip, r4
 80002e6:	d909      	bls.n	80002fc <__udivmoddi4+0x8c>
 80002e8:	192c      	adds	r4, r5, r4
 80002ea:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ee:	f080 8107 	bcs.w	8000500 <__udivmoddi4+0x290>
 80002f2:	45a4      	cmp	ip, r4
 80002f4:	f240 8104 	bls.w	8000500 <__udivmoddi4+0x290>
 80002f8:	3802      	subs	r0, #2
 80002fa:	442c      	add	r4, r5
 80002fc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000300:	eba4 040c 	sub.w	r4, r4, ip
 8000304:	2700      	movs	r7, #0
 8000306:	b11e      	cbz	r6, 8000310 <__udivmoddi4+0xa0>
 8000308:	40d4      	lsrs	r4, r2
 800030a:	2300      	movs	r3, #0
 800030c:	e9c6 4300 	strd	r4, r3, [r6]
 8000310:	4639      	mov	r1, r7
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0xbe>
 800031a:	2e00      	cmp	r6, #0
 800031c:	f000 80eb 	beq.w	80004f6 <__udivmoddi4+0x286>
 8000320:	2700      	movs	r7, #0
 8000322:	e9c6 0100 	strd	r0, r1, [r6]
 8000326:	4638      	mov	r0, r7
 8000328:	4639      	mov	r1, r7
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f783 	clz	r7, r3
 8000332:	2f00      	cmp	r7, #0
 8000334:	d147      	bne.n	80003c6 <__udivmoddi4+0x156>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0xd0>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80fa 	bhi.w	8000534 <__udivmoddi4+0x2c4>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0303 	sbc.w	r3, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	4698      	mov	r8, r3
 800034a:	2e00      	cmp	r6, #0
 800034c:	d0e0      	beq.n	8000310 <__udivmoddi4+0xa0>
 800034e:	e9c6 4800 	strd	r4, r8, [r6]
 8000352:	e7dd      	b.n	8000310 <__udivmoddi4+0xa0>
 8000354:	b902      	cbnz	r2, 8000358 <__udivmoddi4+0xe8>
 8000356:	deff      	udf	#255	; 0xff
 8000358:	fab2 f282 	clz	r2, r2
 800035c:	2a00      	cmp	r2, #0
 800035e:	f040 808f 	bne.w	8000480 <__udivmoddi4+0x210>
 8000362:	1b49      	subs	r1, r1, r5
 8000364:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000368:	fa1f f885 	uxth.w	r8, r5
 800036c:	2701      	movs	r7, #1
 800036e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fb0e 111c 	mls	r1, lr, ip, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb08 f10c 	mul.w	r1, r8, ip
 8000380:	4299      	cmp	r1, r3
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x124>
 8000384:	18eb      	adds	r3, r5, r3
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x122>
 800038c:	4299      	cmp	r1, r3
 800038e:	f200 80cd 	bhi.w	800052c <__udivmoddi4+0x2bc>
 8000392:	4684      	mov	ip, r0
 8000394:	1a59      	subs	r1, r3, r1
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1410 	mls	r4, lr, r0, r1
 80003a0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x14c>
 80003ac:	192c      	adds	r4, r5, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x14a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80b6 	bhi.w	8000526 <__udivmoddi4+0x2b6>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e79f      	b.n	8000306 <__udivmoddi4+0x96>
 80003c6:	f1c7 0c20 	rsb	ip, r7, #32
 80003ca:	40bb      	lsls	r3, r7
 80003cc:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003d0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003d4:	fa01 f407 	lsl.w	r4, r1, r7
 80003d8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003dc:	fa21 f30c 	lsr.w	r3, r1, ip
 80003e0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003e4:	4325      	orrs	r5, r4
 80003e6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ea:	0c2c      	lsrs	r4, r5, #16
 80003ec:	fb08 3319 	mls	r3, r8, r9, r3
 80003f0:	fa1f fa8e 	uxth.w	sl, lr
 80003f4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f8:	fb09 f40a 	mul.w	r4, r9, sl
 80003fc:	429c      	cmp	r4, r3
 80003fe:	fa02 f207 	lsl.w	r2, r2, r7
 8000402:	fa00 f107 	lsl.w	r1, r0, r7
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b0>
 8000408:	eb1e 0303 	adds.w	r3, lr, r3
 800040c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000410:	f080 8087 	bcs.w	8000522 <__udivmoddi4+0x2b2>
 8000414:	429c      	cmp	r4, r3
 8000416:	f240 8084 	bls.w	8000522 <__udivmoddi4+0x2b2>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4473      	add	r3, lr
 8000420:	1b1b      	subs	r3, r3, r4
 8000422:	b2ad      	uxth	r5, r5
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000430:	fb00 fa0a 	mul.w	sl, r0, sl
 8000434:	45a2      	cmp	sl, r4
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1da>
 8000438:	eb1e 0404 	adds.w	r4, lr, r4
 800043c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000440:	d26b      	bcs.n	800051a <__udivmoddi4+0x2aa>
 8000442:	45a2      	cmp	sl, r4
 8000444:	d969      	bls.n	800051a <__udivmoddi4+0x2aa>
 8000446:	3802      	subs	r0, #2
 8000448:	4474      	add	r4, lr
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	fba0 8902 	umull	r8, r9, r0, r2
 8000452:	eba4 040a 	sub.w	r4, r4, sl
 8000456:	454c      	cmp	r4, r9
 8000458:	46c2      	mov	sl, r8
 800045a:	464b      	mov	r3, r9
 800045c:	d354      	bcc.n	8000508 <__udivmoddi4+0x298>
 800045e:	d051      	beq.n	8000504 <__udivmoddi4+0x294>
 8000460:	2e00      	cmp	r6, #0
 8000462:	d069      	beq.n	8000538 <__udivmoddi4+0x2c8>
 8000464:	ebb1 050a 	subs.w	r5, r1, sl
 8000468:	eb64 0403 	sbc.w	r4, r4, r3
 800046c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000470:	40fd      	lsrs	r5, r7
 8000472:	40fc      	lsrs	r4, r7
 8000474:	ea4c 0505 	orr.w	r5, ip, r5
 8000478:	e9c6 5400 	strd	r5, r4, [r6]
 800047c:	2700      	movs	r7, #0
 800047e:	e747      	b.n	8000310 <__udivmoddi4+0xa0>
 8000480:	f1c2 0320 	rsb	r3, r2, #32
 8000484:	fa20 f703 	lsr.w	r7, r0, r3
 8000488:	4095      	lsls	r5, r2
 800048a:	fa01 f002 	lsl.w	r0, r1, r2
 800048e:	fa21 f303 	lsr.w	r3, r1, r3
 8000492:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000496:	4338      	orrs	r0, r7
 8000498:	0c01      	lsrs	r1, r0, #16
 800049a:	fbb3 f7fe 	udiv	r7, r3, lr
 800049e:	fa1f f885 	uxth.w	r8, r5
 80004a2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004aa:	fb07 f308 	mul.w	r3, r7, r8
 80004ae:	428b      	cmp	r3, r1
 80004b0:	fa04 f402 	lsl.w	r4, r4, r2
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x256>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004bc:	d22f      	bcs.n	800051e <__udivmoddi4+0x2ae>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d92d      	bls.n	800051e <__udivmoddi4+0x2ae>
 80004c2:	3f02      	subs	r7, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1acb      	subs	r3, r1, r3
 80004c8:	b281      	uxth	r1, r0
 80004ca:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ce:	fb0e 3310 	mls	r3, lr, r0, r3
 80004d2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d6:	fb00 f308 	mul.w	r3, r0, r8
 80004da:	428b      	cmp	r3, r1
 80004dc:	d907      	bls.n	80004ee <__udivmoddi4+0x27e>
 80004de:	1869      	adds	r1, r5, r1
 80004e0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004e4:	d217      	bcs.n	8000516 <__udivmoddi4+0x2a6>
 80004e6:	428b      	cmp	r3, r1
 80004e8:	d915      	bls.n	8000516 <__udivmoddi4+0x2a6>
 80004ea:	3802      	subs	r0, #2
 80004ec:	4429      	add	r1, r5
 80004ee:	1ac9      	subs	r1, r1, r3
 80004f0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004f4:	e73b      	b.n	800036e <__udivmoddi4+0xfe>
 80004f6:	4637      	mov	r7, r6
 80004f8:	4630      	mov	r0, r6
 80004fa:	e709      	b.n	8000310 <__udivmoddi4+0xa0>
 80004fc:	4607      	mov	r7, r0
 80004fe:	e6e7      	b.n	80002d0 <__udivmoddi4+0x60>
 8000500:	4618      	mov	r0, r3
 8000502:	e6fb      	b.n	80002fc <__udivmoddi4+0x8c>
 8000504:	4541      	cmp	r1, r8
 8000506:	d2ab      	bcs.n	8000460 <__udivmoddi4+0x1f0>
 8000508:	ebb8 0a02 	subs.w	sl, r8, r2
 800050c:	eb69 020e 	sbc.w	r2, r9, lr
 8000510:	3801      	subs	r0, #1
 8000512:	4613      	mov	r3, r2
 8000514:	e7a4      	b.n	8000460 <__udivmoddi4+0x1f0>
 8000516:	4660      	mov	r0, ip
 8000518:	e7e9      	b.n	80004ee <__udivmoddi4+0x27e>
 800051a:	4618      	mov	r0, r3
 800051c:	e795      	b.n	800044a <__udivmoddi4+0x1da>
 800051e:	4667      	mov	r7, ip
 8000520:	e7d1      	b.n	80004c6 <__udivmoddi4+0x256>
 8000522:	4681      	mov	r9, r0
 8000524:	e77c      	b.n	8000420 <__udivmoddi4+0x1b0>
 8000526:	3802      	subs	r0, #2
 8000528:	442c      	add	r4, r5
 800052a:	e747      	b.n	80003bc <__udivmoddi4+0x14c>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	442b      	add	r3, r5
 8000532:	e72f      	b.n	8000394 <__udivmoddi4+0x124>
 8000534:	4638      	mov	r0, r7
 8000536:	e708      	b.n	800034a <__udivmoddi4+0xda>
 8000538:	4637      	mov	r7, r6
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0xa0>

0800053c <__aeabi_idiv0>:
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000544:	bf00      	nop
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr

0800054e <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 800054e:	b480      	push	{r7}
 8000550:	b083      	sub	sp, #12
 8000552:	af00      	add	r7, sp, #0
 8000554:	6078      	str	r0, [r7, #4]
 8000556:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000558:	bf00      	nop
 800055a:	370c      	adds	r7, #12
 800055c:	46bd      	mov	sp, r7
 800055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000562:	4770      	bx	lr

08000564 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000568:	bf00      	nop
 800056a:	46bd      	mov	sp, r7
 800056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000570:	4770      	bx	lr
	...

08000574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000574:	b5b0      	push	{r4, r5, r7, lr}
 8000576:	b086      	sub	sp, #24
 8000578:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057a:	f002 fd0f 	bl	8002f9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057e:	f000 f853 	bl	8000628 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000582:	f001 f99f 	bl	80018c4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000586:	f000 f921 	bl	80007cc <MX_ADC1_Init>
  MX_ADC3_Init();
 800058a:	f000 f971 	bl	8000870 <MX_ADC3_Init>
  MX_CRC_Init();
 800058e:	f000 f9c1 	bl	8000914 <MX_CRC_Init>
  MX_DMA2D_Init();
 8000592:	f000 f9e1 	bl	8000958 <MX_DMA2D_Init>
  MX_DSIHOST_DSI_Init();
 8000596:	f000 fa17 	bl	80009c8 <MX_DSIHOST_DSI_Init>
  MX_ETH_Init();
 800059a:	f000 fb15 	bl	8000bc8 <MX_ETH_Init>
  MX_FMC_Init();
 800059e:	f001 f941 	bl	8001824 <MX_FMC_Init>
  MX_HDMI_CEC_Init();
 80005a2:	f000 fb47 	bl	8000c34 <MX_HDMI_CEC_Init>
  MX_I2C1_Init();
 80005a6:	f000 fb79 	bl	8000c9c <MX_I2C1_Init>
  MX_I2C4_Init();
 80005aa:	f000 fbb7 	bl	8000d1c <MX_I2C4_Init>
  MX_IWDG_Init();
 80005ae:	f000 fbf5 	bl	8000d9c <MX_IWDG_Init>
  MX_LTDC_Init();
 80005b2:	f000 fc11 	bl	8000dd8 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 80005b6:	f000 fc8d 	bl	8000ed4 <MX_QUADSPI_Init>
  MX_RTC_Init();
 80005ba:	f000 fcb7 	bl	8000f2c <MX_RTC_Init>
  MX_SAI1_Init();
 80005be:	f000 fd55 	bl	800106c <MX_SAI1_Init>
  MX_SAI2_Init();
 80005c2:	f000 fdfb 	bl	80011bc <MX_SAI2_Init>
  MX_SDMMC2_MMC_Init();
 80005c6:	f000 fe25 	bl	8001214 <MX_SDMMC2_MMC_Init>
  MX_SPDIFRX_Init();
 80005ca:	f000 fe53 	bl	8001274 <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 80005ce:	f000 fe83 	bl	80012d8 <MX_SPI2_Init>
  MX_TIM1_Init();
 80005d2:	f000 febd 	bl	8001350 <MX_TIM1_Init>
  MX_TIM3_Init();
 80005d6:	f000 ff0d 	bl	80013f4 <MX_TIM3_Init>
  MX_TIM10_Init();
 80005da:	f000 ff65 	bl	80014a8 <MX_TIM10_Init>
  MX_TIM11_Init();
 80005de:	f000 ffaf 	bl	8001540 <MX_TIM11_Init>
  MX_TIM12_Init();
 80005e2:	f000 fff9 	bl	80015d8 <MX_TIM12_Init>
  MX_UART5_Init();
 80005e6:	f001 f83b 	bl	8001660 <MX_UART5_Init>
  MX_USART1_UART_Init();
 80005ea:	f001 f869 	bl	80016c0 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80005ee:	f001 f897 	bl	8001720 <MX_USART6_UART_Init>
  MX_USB_OTG_HS_PCD_Init();
 80005f2:	f001 f8c5 	bl	8001780 <MX_USB_OTG_HS_PCD_Init>
  MX_WWDG_Init();
 80005f6:	f001 f8f5 	bl	80017e4 <MX_WWDG_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 80005fa:	4b09      	ldr	r3, [pc, #36]	; (8000620 <main+0xac>)
 80005fc:	1d3c      	adds	r4, r7, #4
 80005fe:	461d      	mov	r5, r3
 8000600:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000602:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000604:	682b      	ldr	r3, [r5, #0]
 8000606:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000608:	1d3b      	adds	r3, r7, #4
 800060a:	2100      	movs	r1, #0
 800060c:	4618      	mov	r0, r3
 800060e:	f00c f8e4 	bl	800c7da <osThreadCreate>
 8000612:	4602      	mov	r2, r0
 8000614:	4b03      	ldr	r3, [pc, #12]	; (8000624 <main+0xb0>)
 8000616:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000618:	f00c f8d8 	bl	800c7cc <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800061c:	e7fe      	b.n	800061c <main+0xa8>
 800061e:	bf00      	nop
 8000620:	0800dbb0 	.word	0x0800dbb0
 8000624:	20008200 	.word	0x20008200

08000628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b0b8      	sub	sp, #224	; 0xe0
 800062c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000632:	2234      	movs	r2, #52	; 0x34
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f00d faa0 	bl	800db7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800063c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	60da      	str	r2, [r3, #12]
 800064a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800064c:	f107 0308 	add.w	r3, r7, #8
 8000650:	2290      	movs	r2, #144	; 0x90
 8000652:	2100      	movs	r1, #0
 8000654:	4618      	mov	r0, r3
 8000656:	f00d fa91 	bl	800db7c <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 800065a:	f007 f965 	bl	8007928 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800065e:	4b58      	ldr	r3, [pc, #352]	; (80007c0 <SystemClock_Config+0x198>)
 8000660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000662:	4a57      	ldr	r2, [pc, #348]	; (80007c0 <SystemClock_Config+0x198>)
 8000664:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000668:	6413      	str	r3, [r2, #64]	; 0x40
 800066a:	4b55      	ldr	r3, [pc, #340]	; (80007c0 <SystemClock_Config+0x198>)
 800066c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800066e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000676:	4b53      	ldr	r3, [pc, #332]	; (80007c4 <SystemClock_Config+0x19c>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	4a52      	ldr	r2, [pc, #328]	; (80007c4 <SystemClock_Config+0x19c>)
 800067c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000680:	6013      	str	r3, [r2, #0]
 8000682:	4b50      	ldr	r3, [pc, #320]	; (80007c4 <SystemClock_Config+0x19c>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800068a:	603b      	str	r3, [r7, #0]
 800068c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 800068e:	230b      	movs	r3, #11
 8000690:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000694:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000698:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800069c:	2301      	movs	r3, #1
 800069e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a2:	2310      	movs	r3, #16
 80006a4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80006a8:	2301      	movs	r3, #1
 80006aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ae:	2302      	movs	r3, #2
 80006b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006b4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 25;
 80006bc:	2319      	movs	r3, #25
 80006be:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 432;
 80006c2:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80006c6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ca:	2302      	movs	r3, #2
 80006cc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006d0:	2304      	movs	r3, #4
 80006d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80006da:	4618      	mov	r0, r3
 80006dc:	f007 fa54 	bl	8007b88 <HAL_RCC_OscConfig>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006e6:	f001 fa5b 	bl	8001ba0 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006ea:	f007 f92d 	bl	8007948 <HAL_PWREx_EnableOverDrive>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80006f4:	f001 fa54 	bl	8001ba0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f8:	230f      	movs	r3, #15
 80006fa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006fe:	2302      	movs	r3, #2
 8000700:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000704:	2300      	movs	r3, #0
 8000706:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800070a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800070e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000712:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000716:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800071a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800071e:	2107      	movs	r1, #7
 8000720:	4618      	mov	r0, r3
 8000722:	f007 fca3 	bl	800806c <HAL_RCC_ClockConfig>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <SystemClock_Config+0x108>
  {
    Error_Handler();
 800072c:	f001 fa38 	bl	8001ba0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 8000730:	4b25      	ldr	r3, [pc, #148]	; (80007c8 <SystemClock_Config+0x1a0>)
 8000732:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_UART5
                              |RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_SAI2
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C4
                              |RCC_PERIPHCLK_SDMMC2|RCC_PERIPHCLK_CLK48
                              |RCC_PERIPHCLK_CEC;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000734:	23c0      	movs	r3, #192	; 0xc0
 8000736:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8000738:	2302      	movs	r3, #2
 800073a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800073c:	2302      	movs	r3, #2
 800073e:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8000740:	2302      	movs	r3, #2
 8000742:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000744:	23c0      	movs	r3, #192	; 0xc0
 8000746:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000748:	2302      	movs	r3, #2
 800074a:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 3;
 800074c:	2303      	movs	r3, #3
 800074e:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 8000750:	2301      	movs	r3, #1
 8000752:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 8000754:	2301      	movs	r3, #1
 8000756:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000758:	2301      	movs	r3, #1
 800075a:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800075c:	2300      	movs	r3, #0
 800075e:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000760:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000764:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI;
 8000766:	2300      	movs	r3, #0
 8000768:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 800076a:	2300      	movs	r3, #0
 800076c:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800076e:	2300      	movs	r3, #0
 8000770:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8000772:	2300      	movs	r3, #0
 8000774:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8000776:	2300      	movs	r3, #0
 8000778:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800077a:	2300      	movs	r3, #0
 800077c:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 800077e:	2300      	movs	r3, #0
 8000780:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInitStruct.CecClockSelection = RCC_CECCLKSOURCE_HSI;
 8000782:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000786:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 800078a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800078e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc2ClockSelection = RCC_SDMMC2CLKSOURCE_CLK48;
 8000792:	2300      	movs	r3, #0
 8000794:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000798:	f107 0308 	add.w	r3, r7, #8
 800079c:	4618      	mov	r0, r3
 800079e:	f007 fec9 	bl	8008534 <HAL_RCCEx_PeriphCLKConfig>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <SystemClock_Config+0x184>
  {
    Error_Handler();
 80007a8:	f001 f9fa 	bl	8001ba0 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 80007ac:	2200      	movs	r2, #0
 80007ae:	2100      	movs	r1, #0
 80007b0:	2000      	movs	r0, #0
 80007b2:	f007 fd43 	bl	800823c <HAL_RCC_MCOConfig>
}
 80007b6:	bf00      	nop
 80007b8:	37e0      	adds	r7, #224	; 0xe0
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	40023800 	.word	0x40023800
 80007c4:	40007000 	.word	0x40007000
 80007c8:	057a4c68 	.word	0x057a4c68

080007cc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b084      	sub	sp, #16
 80007d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007d2:	463b      	mov	r3, r7
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
 80007d8:	605a      	str	r2, [r3, #4]
 80007da:	609a      	str	r2, [r3, #8]
 80007dc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 80007de:	4b21      	ldr	r3, [pc, #132]	; (8000864 <MX_ADC1_Init+0x98>)
 80007e0:	4a21      	ldr	r2, [pc, #132]	; (8000868 <MX_ADC1_Init+0x9c>)
 80007e2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007e4:	4b1f      	ldr	r3, [pc, #124]	; (8000864 <MX_ADC1_Init+0x98>)
 80007e6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80007ea:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007ec:	4b1d      	ldr	r3, [pc, #116]	; (8000864 <MX_ADC1_Init+0x98>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007f2:	4b1c      	ldr	r3, [pc, #112]	; (8000864 <MX_ADC1_Init+0x98>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007f8:	4b1a      	ldr	r3, [pc, #104]	; (8000864 <MX_ADC1_Init+0x98>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007fe:	4b19      	ldr	r3, [pc, #100]	; (8000864 <MX_ADC1_Init+0x98>)
 8000800:	2200      	movs	r2, #0
 8000802:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000806:	4b17      	ldr	r3, [pc, #92]	; (8000864 <MX_ADC1_Init+0x98>)
 8000808:	2200      	movs	r2, #0
 800080a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800080c:	4b15      	ldr	r3, [pc, #84]	; (8000864 <MX_ADC1_Init+0x98>)
 800080e:	4a17      	ldr	r2, [pc, #92]	; (800086c <MX_ADC1_Init+0xa0>)
 8000810:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000812:	4b14      	ldr	r3, [pc, #80]	; (8000864 <MX_ADC1_Init+0x98>)
 8000814:	2200      	movs	r2, #0
 8000816:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000818:	4b12      	ldr	r3, [pc, #72]	; (8000864 <MX_ADC1_Init+0x98>)
 800081a:	2201      	movs	r2, #1
 800081c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800081e:	4b11      	ldr	r3, [pc, #68]	; (8000864 <MX_ADC1_Init+0x98>)
 8000820:	2200      	movs	r2, #0
 8000822:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000826:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <MX_ADC1_Init+0x98>)
 8000828:	2201      	movs	r2, #1
 800082a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800082c:	480d      	ldr	r0, [pc, #52]	; (8000864 <MX_ADC1_Init+0x98>)
 800082e:	f002 fc05 	bl	800303c <HAL_ADC_Init>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000838:	f001 f9b2 	bl	8001ba0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800083c:	230c      	movs	r3, #12
 800083e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000840:	2301      	movs	r3, #1
 8000842:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000844:	2300      	movs	r3, #0
 8000846:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000848:	463b      	mov	r3, r7
 800084a:	4619      	mov	r1, r3
 800084c:	4805      	ldr	r0, [pc, #20]	; (8000864 <MX_ADC1_Init+0x98>)
 800084e:	f002 fc39 	bl	80030c4 <HAL_ADC_ConfigChannel>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000858:	f001 f9a2 	bl	8001ba0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800085c:	bf00      	nop
 800085e:	3710      	adds	r7, #16
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	20008a94 	.word	0x20008a94
 8000868:	40012000 	.word	0x40012000
 800086c:	0f000001 	.word	0x0f000001

08000870 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000876:	463b      	mov	r3, r7
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	605a      	str	r2, [r3, #4]
 800087e:	609a      	str	r2, [r3, #8]
 8000880:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc3.Instance = ADC3;
 8000882:	4b21      	ldr	r3, [pc, #132]	; (8000908 <MX_ADC3_Init+0x98>)
 8000884:	4a21      	ldr	r2, [pc, #132]	; (800090c <MX_ADC3_Init+0x9c>)
 8000886:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000888:	4b1f      	ldr	r3, [pc, #124]	; (8000908 <MX_ADC3_Init+0x98>)
 800088a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800088e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000890:	4b1d      	ldr	r3, [pc, #116]	; (8000908 <MX_ADC3_Init+0x98>)
 8000892:	2200      	movs	r2, #0
 8000894:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000896:	4b1c      	ldr	r3, [pc, #112]	; (8000908 <MX_ADC3_Init+0x98>)
 8000898:	2200      	movs	r2, #0
 800089a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800089c:	4b1a      	ldr	r3, [pc, #104]	; (8000908 <MX_ADC3_Init+0x98>)
 800089e:	2200      	movs	r2, #0
 80008a0:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80008a2:	4b19      	ldr	r3, [pc, #100]	; (8000908 <MX_ADC3_Init+0x98>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008aa:	4b17      	ldr	r3, [pc, #92]	; (8000908 <MX_ADC3_Init+0x98>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008b0:	4b15      	ldr	r3, [pc, #84]	; (8000908 <MX_ADC3_Init+0x98>)
 80008b2:	4a17      	ldr	r2, [pc, #92]	; (8000910 <MX_ADC3_Init+0xa0>)
 80008b4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008b6:	4b14      	ldr	r3, [pc, #80]	; (8000908 <MX_ADC3_Init+0x98>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80008bc:	4b12      	ldr	r3, [pc, #72]	; (8000908 <MX_ADC3_Init+0x98>)
 80008be:	2201      	movs	r2, #1
 80008c0:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80008c2:	4b11      	ldr	r3, [pc, #68]	; (8000908 <MX_ADC3_Init+0x98>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008ca:	4b0f      	ldr	r3, [pc, #60]	; (8000908 <MX_ADC3_Init+0x98>)
 80008cc:	2201      	movs	r2, #1
 80008ce:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80008d0:	480d      	ldr	r0, [pc, #52]	; (8000908 <MX_ADC3_Init+0x98>)
 80008d2:	f002 fbb3 	bl	800303c <HAL_ADC_Init>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80008dc:	f001 f960 	bl	8001ba0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80008e0:	2306      	movs	r3, #6
 80008e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008e4:	2301      	movs	r3, #1
 80008e6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80008e8:	2300      	movs	r3, #0
 80008ea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008ec:	463b      	mov	r3, r7
 80008ee:	4619      	mov	r1, r3
 80008f0:	4805      	ldr	r0, [pc, #20]	; (8000908 <MX_ADC3_Init+0x98>)
 80008f2:	f002 fbe7 	bl	80030c4 <HAL_ADC_ConfigChannel>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80008fc:	f001 f950 	bl	8001ba0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000900:	bf00      	nop
 8000902:	3710      	adds	r7, #16
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	20008adc 	.word	0x20008adc
 800090c:	40012200 	.word	0x40012200
 8000910:	0f000001 	.word	0x0f000001

08000914 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000918:	4b0d      	ldr	r3, [pc, #52]	; (8000950 <MX_CRC_Init+0x3c>)
 800091a:	4a0e      	ldr	r2, [pc, #56]	; (8000954 <MX_CRC_Init+0x40>)
 800091c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800091e:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <MX_CRC_Init+0x3c>)
 8000920:	2200      	movs	r2, #0
 8000922:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000924:	4b0a      	ldr	r3, [pc, #40]	; (8000950 <MX_CRC_Init+0x3c>)
 8000926:	2200      	movs	r2, #0
 8000928:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800092a:	4b09      	ldr	r3, [pc, #36]	; (8000950 <MX_CRC_Init+0x3c>)
 800092c:	2200      	movs	r2, #0
 800092e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000930:	4b07      	ldr	r3, [pc, #28]	; (8000950 <MX_CRC_Init+0x3c>)
 8000932:	2200      	movs	r2, #0
 8000934:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000936:	4b06      	ldr	r3, [pc, #24]	; (8000950 <MX_CRC_Init+0x3c>)
 8000938:	2201      	movs	r2, #1
 800093a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800093c:	4804      	ldr	r0, [pc, #16]	; (8000950 <MX_CRC_Init+0x3c>)
 800093e:	f003 f839 	bl	80039b4 <HAL_CRC_Init>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000948:	f001 f92a 	bl	8001ba0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800094c:	bf00      	nop
 800094e:	bd80      	pop	{r7, pc}
 8000950:	20008824 	.word	0x20008824
 8000954:	40023000 	.word	0x40023000

08000958 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 800095c:	4b18      	ldr	r3, [pc, #96]	; (80009c0 <MX_DMA2D_Init+0x68>)
 800095e:	4a19      	ldr	r2, [pc, #100]	; (80009c4 <MX_DMA2D_Init+0x6c>)
 8000960:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000962:	4b17      	ldr	r3, [pc, #92]	; (80009c0 <MX_DMA2D_Init+0x68>)
 8000964:	2200      	movs	r2, #0
 8000966:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000968:	4b15      	ldr	r3, [pc, #84]	; (80009c0 <MX_DMA2D_Init+0x68>)
 800096a:	2200      	movs	r2, #0
 800096c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800096e:	4b14      	ldr	r3, [pc, #80]	; (80009c0 <MX_DMA2D_Init+0x68>)
 8000970:	2200      	movs	r2, #0
 8000972:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000974:	4b12      	ldr	r3, [pc, #72]	; (80009c0 <MX_DMA2D_Init+0x68>)
 8000976:	2200      	movs	r2, #0
 8000978:	639a      	str	r2, [r3, #56]	; 0x38
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800097a:	4b11      	ldr	r3, [pc, #68]	; (80009c0 <MX_DMA2D_Init+0x68>)
 800097c:	2200      	movs	r2, #0
 800097e:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000980:	4b0f      	ldr	r3, [pc, #60]	; (80009c0 <MX_DMA2D_Init+0x68>)
 8000982:	2200      	movs	r2, #0
 8000984:	641a      	str	r2, [r3, #64]	; 0x40
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000986:	4b0e      	ldr	r3, [pc, #56]	; (80009c0 <MX_DMA2D_Init+0x68>)
 8000988:	2200      	movs	r2, #0
 800098a:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 800098c:	4b0c      	ldr	r3, [pc, #48]	; (80009c0 <MX_DMA2D_Init+0x68>)
 800098e:	2200      	movs	r2, #0
 8000990:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8000992:	4b0b      	ldr	r3, [pc, #44]	; (80009c0 <MX_DMA2D_Init+0x68>)
 8000994:	2200      	movs	r2, #0
 8000996:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000998:	4809      	ldr	r0, [pc, #36]	; (80009c0 <MX_DMA2D_Init+0x68>)
 800099a:	f003 f8f5 	bl	8003b88 <HAL_DMA2D_Init>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_DMA2D_Init+0x50>
  {
    Error_Handler();
 80009a4:	f001 f8fc 	bl	8001ba0 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80009a8:	2101      	movs	r1, #1
 80009aa:	4805      	ldr	r0, [pc, #20]	; (80009c0 <MX_DMA2D_Init+0x68>)
 80009ac:	f003 fa56 	bl	8003e5c <HAL_DMA2D_ConfigLayer>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_DMA2D_Init+0x62>
  {
    Error_Handler();
 80009b6:	f001 f8f3 	bl	8001ba0 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	20008cd8 	.word	0x20008cd8
 80009c4:	4002b000 	.word	0x4002b000

080009c8 <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b0aa      	sub	sp, #168	; 0xa8
 80009cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 80009ce:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	605a      	str	r2, [r3, #4]
 80009d8:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 80009da:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80009de:	2224      	movs	r2, #36	; 0x24
 80009e0:	2100      	movs	r1, #0
 80009e2:	4618      	mov	r0, r3
 80009e4:	f00d f8ca 	bl	800db7c <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 80009e8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	605a      	str	r2, [r3, #4]
 80009f2:	609a      	str	r2, [r3, #8]
 80009f4:	60da      	str	r2, [r3, #12]
 80009f6:	611a      	str	r2, [r3, #16]
 80009f8:	615a      	str	r2, [r3, #20]
  DSI_LPCmdTypeDef LPCmd = {0};
 80009fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009fe:	2234      	movs	r2, #52	; 0x34
 8000a00:	2100      	movs	r1, #0
 8000a02:	4618      	mov	r0, r3
 8000a04:	f00d f8ba 	bl	800db7c <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 8000a08:	463b      	mov	r3, r7
 8000a0a:	222c      	movs	r2, #44	; 0x2c
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f00d f8b4 	bl	800db7c <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 8000a14:	4b6a      	ldr	r3, [pc, #424]	; (8000bc0 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000a16:	4a6b      	ldr	r2, [pc, #428]	; (8000bc4 <MX_DSIHOST_DSI_Init+0x1fc>)
 8000a18:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8000a1a:	4b69      	ldr	r3, [pc, #420]	; (8000bc0 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 8000a20:	4b67      	ldr	r3, [pc, #412]	; (8000bc0 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000a22:	2204      	movs	r2, #4
 8000a24:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8000a26:	4b66      	ldr	r3, [pc, #408]	; (8000bc0 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000a28:	2201      	movs	r2, #1
 8000a2a:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 20;
 8000a2c:	2314      	movs	r3, #20
 8000a2e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  PLLInit.PLLIDF = DSI_PLL_IN_DIV1;
 8000a32:	2301      	movs	r3, #1
 8000a34:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8000a3e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a42:	4619      	mov	r1, r3
 8000a44:	485e      	ldr	r0, [pc, #376]	; (8000bc0 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000a46:	f003 faa7 	bl	8003f98 <HAL_DSI_Init>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_DSIHOST_DSI_Init+0x8c>
  {
    Error_Handler();
 8000a50:	f001 f8a6 	bl	8001ba0 <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 8000a54:	2301      	movs	r3, #1
 8000a56:	67bb      	str	r3, [r7, #120]	; 0x78
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	67fb      	str	r3, [r7, #124]	; 0x7c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  HostTimeouts.HighSpeedReadTimeout = 0;
 8000a62:	2300      	movs	r3, #0
 8000a64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  HostTimeouts.LowPowerReadTimeout = 0;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 8000a74:	2300      	movs	r3, #0
 8000a76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  HostTimeouts.LowPowerWriteTimeout = 0;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  HostTimeouts.BTATimeout = 0;
 8000a80:	2300      	movs	r3, #0
 8000a82:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8000a86:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	484c      	ldr	r0, [pc, #304]	; (8000bc0 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000a8e:	f003 ff33 	bl	80048f8 <HAL_DSI_ConfigHostTimeouts>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_DSIHOST_DSI_Init+0xd4>
  {
    Error_Handler();
 8000a98:	f001 f882 	bl	8001ba0 <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 28;
 8000a9c:	231c      	movs	r3, #28
 8000a9e:	663b      	str	r3, [r7, #96]	; 0x60
  PhyTimings.ClockLaneLP2HSTime = 33;
 8000aa0:	2321      	movs	r3, #33	; 0x21
 8000aa2:	667b      	str	r3, [r7, #100]	; 0x64
  PhyTimings.DataLaneHS2LPTime = 15;
 8000aa4:	230f      	movs	r3, #15
 8000aa6:	66bb      	str	r3, [r7, #104]	; 0x68
  PhyTimings.DataLaneLP2HSTime = 25;
 8000aa8:	2319      	movs	r3, #25
 8000aaa:	66fb      	str	r3, [r7, #108]	; 0x6c
  PhyTimings.DataLaneMaxReadTime = 0;
 8000aac:	2300      	movs	r3, #0
 8000aae:	673b      	str	r3, [r7, #112]	; 0x70
  PhyTimings.StopWaitTime = 10;
 8000ab0:	230a      	movs	r3, #10
 8000ab2:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000ab4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4841      	ldr	r0, [pc, #260]	; (8000bc0 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000abc:	f003 feb2 	bl	8004824 <HAL_DSI_ConfigPhyTimer>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <MX_DSIHOST_DSI_Init+0x102>
  {
    Error_Handler();
 8000ac6:	f001 f86b 	bl	8001ba0 <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8000aca:	2104      	movs	r1, #4
 8000acc:	483c      	ldr	r0, [pc, #240]	; (8000bc0 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000ace:	f003 fe81 	bl	80047d4 <HAL_DSI_ConfigFlowControl>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_DSIHOST_DSI_Init+0x114>
  {
    Error_Handler();
 8000ad8:	f001 f862 	bl	8001ba0 <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8000adc:	f242 7110 	movw	r1, #10000	; 0x2710
 8000ae0:	4837      	ldr	r0, [pc, #220]	; (8000bc0 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000ae2:	f003 ffd1 	bl	8004a88 <HAL_DSI_SetLowPowerRXFilter>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_DSIHOST_DSI_Init+0x128>
  {
    Error_Handler();
 8000aec:	f001 f858 	bl	8001ba0 <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8000af0:	2100      	movs	r1, #0
 8000af2:	4833      	ldr	r0, [pc, #204]	; (8000bc0 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000af4:	f003 fb6a 	bl	80041cc <HAL_DSI_ConfigErrorMonitor>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_DSIHOST_DSI_Init+0x13a>
  {
    Error_Handler();
 8000afe:	f001 f84f 	bl	8001ba0 <Error_Handler>
  }
  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_ENABLE;
 8000b02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b06:	62fb      	str	r3, [r7, #44]	; 0x2c
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8000b08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b0c:	633b      	str	r3, [r7, #48]	; 0x30
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_ENABLE;
 8000b0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b12:	637b      	str	r3, [r7, #52]	; 0x34
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000b14:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b18:	63bb      	str	r3, [r7, #56]	; 0x38
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_ENABLE;
 8000b1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000b20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b24:	643b      	str	r3, [r7, #64]	; 0x40
  LPCmd.LPGenLongWrite = DSI_LP_GLW_ENABLE;
 8000b26:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000b2a:	647b      	str	r3, [r7, #68]	; 0x44
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000b2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b30:	64bb      	str	r3, [r7, #72]	; 0x48
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_ENABLE;
 8000b32:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b36:	64fb      	str	r3, [r7, #76]	; 0x4c
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000b38:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000b3c:	653b      	str	r3, [r7, #80]	; 0x50
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_ENABLE;
 8000b3e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000b42:	657b      	str	r3, [r7, #84]	; 0x54
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000b44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000b48:	65bb      	str	r3, [r7, #88]	; 0x58
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_DISABLE;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000b4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b52:	4619      	mov	r1, r3
 8000b54:	481a      	ldr	r0, [pc, #104]	; (8000bc0 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000b56:	f003 fddf 	bl	8004718 <HAL_DSI_ConfigCommand>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_DSIHOST_DSI_Init+0x19c>
  {
    Error_Handler();
 8000b60:	f001 f81e 	bl	8001ba0 <Error_Handler>
  }
  CmdCfg.VirtualChannelID = 0;
 8000b64:	2300      	movs	r3, #0
 8000b66:	603b      	str	r3, [r7, #0]
  CmdCfg.ColorCoding = DSI_RGB888;
 8000b68:	2305      	movs	r3, #5
 8000b6a:	607b      	str	r3, [r7, #4]
  CmdCfg.CommandSize = 400;
 8000b6c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000b70:	60bb      	str	r3, [r7, #8]
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 8000b72:	2310      	movs	r3, #16
 8000b74:	60fb      	str	r3, [r7, #12]
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 8000b76:	2300      	movs	r3, #0
 8000b78:	613b      	str	r3, [r7, #16]
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_LOW;
 8000b7a:	2304      	movs	r3, #4
 8000b7c:	617b      	str	r3, [r7, #20]
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_LOW;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	61bb      	str	r3, [r7, #24]
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8000b82:	2300      	movs	r3, #0
 8000b84:	61fb      	str	r3, [r7, #28]
  CmdCfg.VSyncPol = DSI_VSYNC_FALLING;
 8000b86:	2300      	movs	r3, #0
 8000b88:	623b      	str	r3, [r7, #32]
  CmdCfg.AutomaticRefresh = DSI_AR_ENABLE;
 8000b8a:	2340      	movs	r3, #64	; 0x40
 8000b8c:	627b      	str	r3, [r7, #36]	; 0x24
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000b92:	463b      	mov	r3, r7
 8000b94:	4619      	mov	r1, r3
 8000b96:	480a      	ldr	r0, [pc, #40]	; (8000bc0 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000b98:	f003 fce4 	bl	8004564 <HAL_DSI_ConfigAdaptedCommandMode>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_DSIHOST_DSI_Init+0x1de>
  {
    Error_Handler();
 8000ba2:	f000 fffd 	bl	8001ba0 <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	4805      	ldr	r0, [pc, #20]	; (8000bc0 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000baa:	f003 fcb2 	bl	8004512 <HAL_DSI_SetGenericVCID>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_DSIHOST_DSI_Init+0x1f0>
  {
    Error_Handler();
 8000bb4:	f000 fff4 	bl	8001ba0 <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 8000bb8:	bf00      	nop
 8000bba:	37a8      	adds	r7, #168	; 0xa8
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	20008848 	.word	0x20008848
 8000bc4:	40016c00 	.word	0x40016c00

08000bc8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
   uint8_t MACAddr[6] ;

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000bce:	4b17      	ldr	r3, [pc, #92]	; (8000c2c <MX_ETH_Init+0x64>)
 8000bd0:	4a17      	ldr	r2, [pc, #92]	; (8000c30 <MX_ETH_Init+0x68>)
 8000bd2:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8000bd4:	4b15      	ldr	r3, [pc, #84]	; (8000c2c <MX_ETH_Init+0x64>)
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8000bda:	4b14      	ldr	r3, [pc, #80]	; (8000c2c <MX_ETH_Init+0x64>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8000be0:	2300      	movs	r3, #0
 8000be2:	703b      	strb	r3, [r7, #0]
  MACAddr[1] = 0x80;
 8000be4:	2380      	movs	r3, #128	; 0x80
 8000be6:	707b      	strb	r3, [r7, #1]
  MACAddr[2] = 0xE1;
 8000be8:	23e1      	movs	r3, #225	; 0xe1
 8000bea:	70bb      	strb	r3, [r7, #2]
  MACAddr[3] = 0x00;
 8000bec:	2300      	movs	r3, #0
 8000bee:	70fb      	strb	r3, [r7, #3]
  MACAddr[4] = 0x00;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	713b      	strb	r3, [r7, #4]
  MACAddr[5] = 0x00;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	717b      	strb	r3, [r7, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000bf8:	4a0c      	ldr	r2, [pc, #48]	; (8000c2c <MX_ETH_Init+0x64>)
 8000bfa:	463b      	mov	r3, r7
 8000bfc:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8000bfe:	4b0b      	ldr	r3, [pc, #44]	; (8000c2c <MX_ETH_Init+0x64>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8000c04:	4b09      	ldr	r3, [pc, #36]	; (8000c2c <MX_ETH_Init+0x64>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8000c0a:	4b08      	ldr	r3, [pc, #32]	; (8000c2c <MX_ETH_Init+0x64>)
 8000c0c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000c10:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000c12:	4806      	ldr	r0, [pc, #24]	; (8000c2c <MX_ETH_Init+0x64>)
 8000c14:	f003 ff66 	bl	8004ae4 <HAL_ETH_Init>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_ETH_Init+0x5a>
  {
    Error_Handler();
 8000c1e:	f000 ffbf 	bl	8001ba0 <Error_Handler>
  }
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000c22:	bf00      	nop
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	20008e38 	.word	0x20008e38
 8000c30:	40028000 	.word	0x40028000

08000c34 <MX_HDMI_CEC_Init>:
  * @brief HDMI_CEC Initialization Function
  * @param None
  * @retval None
  */
static void MX_HDMI_CEC_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE END HDMI_CEC_Init 0 */

  /* USER CODE BEGIN HDMI_CEC_Init 1 */

  /* USER CODE END HDMI_CEC_Init 1 */
  hcec.Instance = CEC;
 8000c38:	4b15      	ldr	r3, [pc, #84]	; (8000c90 <MX_HDMI_CEC_Init+0x5c>)
 8000c3a:	4a16      	ldr	r2, [pc, #88]	; (8000c94 <MX_HDMI_CEC_Init+0x60>)
 8000c3c:	601a      	str	r2, [r3, #0]
  hcec.Init.SignalFreeTime = CEC_DEFAULT_SFT;
 8000c3e:	4b14      	ldr	r3, [pc, #80]	; (8000c90 <MX_HDMI_CEC_Init+0x5c>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	605a      	str	r2, [r3, #4]
  hcec.Init.Tolerance = CEC_STANDARD_TOLERANCE;
 8000c44:	4b12      	ldr	r3, [pc, #72]	; (8000c90 <MX_HDMI_CEC_Init+0x5c>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	609a      	str	r2, [r3, #8]
  hcec.Init.BRERxStop = CEC_RX_STOP_ON_BRE;
 8000c4a:	4b11      	ldr	r3, [pc, #68]	; (8000c90 <MX_HDMI_CEC_Init+0x5c>)
 8000c4c:	2210      	movs	r2, #16
 8000c4e:	60da      	str	r2, [r3, #12]
  hcec.Init.BREErrorBitGen = CEC_BRE_ERRORBIT_NO_GENERATION;
 8000c50:	4b0f      	ldr	r3, [pc, #60]	; (8000c90 <MX_HDMI_CEC_Init+0x5c>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	611a      	str	r2, [r3, #16]
  hcec.Init.LBPEErrorBitGen = CEC_LBPE_ERRORBIT_NO_GENERATION;
 8000c56:	4b0e      	ldr	r3, [pc, #56]	; (8000c90 <MX_HDMI_CEC_Init+0x5c>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	615a      	str	r2, [r3, #20]
  hcec.Init.BroadcastMsgNoErrorBitGen = CEC_BROADCASTERROR_ERRORBIT_GENERATION;
 8000c5c:	4b0c      	ldr	r3, [pc, #48]	; (8000c90 <MX_HDMI_CEC_Init+0x5c>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	619a      	str	r2, [r3, #24]
  hcec.Init.SignalFreeTimeOption = CEC_SFT_START_ON_TXSOM;
 8000c62:	4b0b      	ldr	r3, [pc, #44]	; (8000c90 <MX_HDMI_CEC_Init+0x5c>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	61da      	str	r2, [r3, #28]
  hcec.Init.ListenMode = CEC_FULL_LISTENING_MODE;
 8000c68:	4b09      	ldr	r3, [pc, #36]	; (8000c90 <MX_HDMI_CEC_Init+0x5c>)
 8000c6a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000c6e:	621a      	str	r2, [r3, #32]
  hcec.Init.OwnAddress = CEC_OWN_ADDRESS_NONE;
 8000c70:	4b07      	ldr	r3, [pc, #28]	; (8000c90 <MX_HDMI_CEC_Init+0x5c>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	849a      	strh	r2, [r3, #36]	; 0x24
  hcec.Init.RxBuffer = cec_receive_buffer;
 8000c76:	4b06      	ldr	r3, [pc, #24]	; (8000c90 <MX_HDMI_CEC_Init+0x5c>)
 8000c78:	4a07      	ldr	r2, [pc, #28]	; (8000c98 <MX_HDMI_CEC_Init+0x64>)
 8000c7a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_CEC_Init(&hcec) != HAL_OK)
 8000c7c:	4804      	ldr	r0, [pc, #16]	; (8000c90 <MX_HDMI_CEC_Init+0x5c>)
 8000c7e:	f002 fc4f 	bl	8003520 <HAL_CEC_Init>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <MX_HDMI_CEC_Init+0x58>
  {
    Error_Handler();
 8000c88:	f000 ff8a 	bl	8001ba0 <Error_Handler>
  }
  /* USER CODE BEGIN HDMI_CEC_Init 2 */

  /* USER CODE END HDMI_CEC_Init 2 */

}
 8000c8c:	bf00      	nop
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	20008864 	.word	0x20008864
 8000c94:	40006c00 	.word	0x40006c00
 8000c98:	20008e28 	.word	0x20008e28

08000c9c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ca0:	4b1b      	ldr	r3, [pc, #108]	; (8000d10 <MX_I2C1_Init+0x74>)
 8000ca2:	4a1c      	ldr	r2, [pc, #112]	; (8000d14 <MX_I2C1_Init+0x78>)
 8000ca4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8000ca6:	4b1a      	ldr	r3, [pc, #104]	; (8000d10 <MX_I2C1_Init+0x74>)
 8000ca8:	4a1b      	ldr	r2, [pc, #108]	; (8000d18 <MX_I2C1_Init+0x7c>)
 8000caa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000cac:	4b18      	ldr	r3, [pc, #96]	; (8000d10 <MX_I2C1_Init+0x74>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cb2:	4b17      	ldr	r3, [pc, #92]	; (8000d10 <MX_I2C1_Init+0x74>)
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cb8:	4b15      	ldr	r3, [pc, #84]	; (8000d10 <MX_I2C1_Init+0x74>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000cbe:	4b14      	ldr	r3, [pc, #80]	; (8000d10 <MX_I2C1_Init+0x74>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000cc4:	4b12      	ldr	r3, [pc, #72]	; (8000d10 <MX_I2C1_Init+0x74>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cca:	4b11      	ldr	r3, [pc, #68]	; (8000d10 <MX_I2C1_Init+0x74>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cd0:	4b0f      	ldr	r3, [pc, #60]	; (8000d10 <MX_I2C1_Init+0x74>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cd6:	480e      	ldr	r0, [pc, #56]	; (8000d10 <MX_I2C1_Init+0x74>)
 8000cd8:	f004 fd34 	bl	8005744 <HAL_I2C_Init>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000ce2:	f000 ff5d 	bl	8001ba0 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	4809      	ldr	r0, [pc, #36]	; (8000d10 <MX_I2C1_Init+0x74>)
 8000cea:	f004 fdbb 	bl	8005864 <HAL_I2CEx_ConfigAnalogFilter>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000cf4:	f000 ff54 	bl	8001ba0 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	4805      	ldr	r0, [pc, #20]	; (8000d10 <MX_I2C1_Init+0x74>)
 8000cfc:	f004 fdfd 	bl	80058fa <HAL_I2CEx_ConfigDigitalFilter>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d06:	f000 ff4b 	bl	8001ba0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	20008788 	.word	0x20008788
 8000d14:	40005400 	.word	0x40005400
 8000d18:	20404768 	.word	0x20404768

08000d1c <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000d20:	4b1b      	ldr	r3, [pc, #108]	; (8000d90 <MX_I2C4_Init+0x74>)
 8000d22:	4a1c      	ldr	r2, [pc, #112]	; (8000d94 <MX_I2C4_Init+0x78>)
 8000d24:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x20404768;
 8000d26:	4b1a      	ldr	r3, [pc, #104]	; (8000d90 <MX_I2C4_Init+0x74>)
 8000d28:	4a1b      	ldr	r2, [pc, #108]	; (8000d98 <MX_I2C4_Init+0x7c>)
 8000d2a:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000d2c:	4b18      	ldr	r3, [pc, #96]	; (8000d90 <MX_I2C4_Init+0x74>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d32:	4b17      	ldr	r3, [pc, #92]	; (8000d90 <MX_I2C4_Init+0x74>)
 8000d34:	2201      	movs	r2, #1
 8000d36:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d38:	4b15      	ldr	r3, [pc, #84]	; (8000d90 <MX_I2C4_Init+0x74>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000d3e:	4b14      	ldr	r3, [pc, #80]	; (8000d90 <MX_I2C4_Init+0x74>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d44:	4b12      	ldr	r3, [pc, #72]	; (8000d90 <MX_I2C4_Init+0x74>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d4a:	4b11      	ldr	r3, [pc, #68]	; (8000d90 <MX_I2C4_Init+0x74>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d50:	4b0f      	ldr	r3, [pc, #60]	; (8000d90 <MX_I2C4_Init+0x74>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000d56:	480e      	ldr	r0, [pc, #56]	; (8000d90 <MX_I2C4_Init+0x74>)
 8000d58:	f004 fcf4 	bl	8005744 <HAL_I2C_Init>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000d62:	f000 ff1d 	bl	8001ba0 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d66:	2100      	movs	r1, #0
 8000d68:	4809      	ldr	r0, [pc, #36]	; (8000d90 <MX_I2C4_Init+0x74>)
 8000d6a:	f004 fd7b 	bl	8005864 <HAL_I2CEx_ConfigAnalogFilter>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000d74:	f000 ff14 	bl	8001ba0 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000d78:	2100      	movs	r1, #0
 8000d7a:	4805      	ldr	r0, [pc, #20]	; (8000d90 <MX_I2C4_Init+0x74>)
 8000d7c:	f004 fdbd 	bl	80058fa <HAL_I2CEx_ConfigDigitalFilter>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000d86:	f000 ff0b 	bl	8001ba0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	20008204 	.word	0x20008204
 8000d94:	40006000 	.word	0x40006000
 8000d98:	20404768 	.word	0x20404768

08000d9c <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8000da0:	4b0b      	ldr	r3, [pc, #44]	; (8000dd0 <MX_IWDG_Init+0x34>)
 8000da2:	4a0c      	ldr	r2, [pc, #48]	; (8000dd4 <MX_IWDG_Init+0x38>)
 8000da4:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 8000da6:	4b0a      	ldr	r3, [pc, #40]	; (8000dd0 <MX_IWDG_Init+0x34>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8000dac:	4b08      	ldr	r3, [pc, #32]	; (8000dd0 <MX_IWDG_Init+0x34>)
 8000dae:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000db2:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 8000db4:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <MX_IWDG_Init+0x34>)
 8000db6:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000dba:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000dbc:	4804      	ldr	r0, [pc, #16]	; (8000dd0 <MX_IWDG_Init+0x34>)
 8000dbe:	f004 fde8 	bl	8005992 <HAL_IWDG_Init>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8000dc8:	f000 feea 	bl	8001ba0 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000dcc:	bf00      	nop
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	20008814 	.word	0x20008814
 8000dd4:	40003000 	.word	0x40003000

08000dd8 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b08e      	sub	sp, #56	; 0x38
 8000ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000dde:	1d3b      	adds	r3, r7, #4
 8000de0:	2234      	movs	r2, #52	; 0x34
 8000de2:	2100      	movs	r1, #0
 8000de4:	4618      	mov	r0, r3
 8000de6:	f00c fec9 	bl	800db7c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000dea:	4b38      	ldr	r3, [pc, #224]	; (8000ecc <MX_LTDC_Init+0xf4>)
 8000dec:	4a38      	ldr	r2, [pc, #224]	; (8000ed0 <MX_LTDC_Init+0xf8>)
 8000dee:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000df0:	4b36      	ldr	r3, [pc, #216]	; (8000ecc <MX_LTDC_Init+0xf4>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000df6:	4b35      	ldr	r3, [pc, #212]	; (8000ecc <MX_LTDC_Init+0xf4>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000dfc:	4b33      	ldr	r3, [pc, #204]	; (8000ecc <MX_LTDC_Init+0xf4>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000e02:	4b32      	ldr	r3, [pc, #200]	; (8000ecc <MX_LTDC_Init+0xf4>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 0;
 8000e08:	4b30      	ldr	r3, [pc, #192]	; (8000ecc <MX_LTDC_Init+0xf4>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 0;
 8000e0e:	4b2f      	ldr	r3, [pc, #188]	; (8000ecc <MX_LTDC_Init+0xf4>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 1;
 8000e14:	4b2d      	ldr	r3, [pc, #180]	; (8000ecc <MX_LTDC_Init+0xf4>)
 8000e16:	2201      	movs	r2, #1
 8000e18:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 1;
 8000e1a:	4b2c      	ldr	r3, [pc, #176]	; (8000ecc <MX_LTDC_Init+0xf4>)
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 201;
 8000e20:	4b2a      	ldr	r3, [pc, #168]	; (8000ecc <MX_LTDC_Init+0xf4>)
 8000e22:	22c9      	movs	r2, #201	; 0xc9
 8000e24:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 481;
 8000e26:	4b29      	ldr	r3, [pc, #164]	; (8000ecc <MX_LTDC_Init+0xf4>)
 8000e28:	f240 12e1 	movw	r2, #481	; 0x1e1
 8000e2c:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 202;
 8000e2e:	4b27      	ldr	r3, [pc, #156]	; (8000ecc <MX_LTDC_Init+0xf4>)
 8000e30:	22ca      	movs	r2, #202	; 0xca
 8000e32:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 482;
 8000e34:	4b25      	ldr	r3, [pc, #148]	; (8000ecc <MX_LTDC_Init+0xf4>)
 8000e36:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8000e3a:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000e3c:	4b23      	ldr	r3, [pc, #140]	; (8000ecc <MX_LTDC_Init+0xf4>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000e44:	4b21      	ldr	r3, [pc, #132]	; (8000ecc <MX_LTDC_Init+0xf4>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000e4c:	4b1f      	ldr	r3, [pc, #124]	; (8000ecc <MX_LTDC_Init+0xf4>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000e54:	481d      	ldr	r0, [pc, #116]	; (8000ecc <MX_LTDC_Init+0xf4>)
 8000e56:	f004 fde3 	bl	8005a20 <HAL_LTDC_Init>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_LTDC_Init+0x8c>
  {
    Error_Handler();
 8000e60:	f000 fe9e 	bl	8001ba0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000e64:	2300      	movs	r3, #0
 8000e66:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 200;
 8000e68:	23c8      	movs	r3, #200	; 0xc8
 8000e6a:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 8000e70:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000e74:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000e76:	2302      	movs	r3, #2
 8000e78:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000e7a:	23ff      	movs	r3, #255	; 0xff
 8000e7c:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000e82:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000e86:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000e88:	2307      	movs	r3, #7
 8000e8a:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000e8c:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000e90:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 200;
 8000e92:	23c8      	movs	r3, #200	; 0xc8
 8000e94:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 480;
 8000e96:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000e9a:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000eae:	1d3b      	adds	r3, r7, #4
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4805      	ldr	r0, [pc, #20]	; (8000ecc <MX_LTDC_Init+0xf4>)
 8000eb6:	f004 ff45 	bl	8005d44 <HAL_LTDC_ConfigLayer>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_LTDC_Init+0xec>
  {
    Error_Handler();
 8000ec0:	f000 fe6e 	bl	8001ba0 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000ec4:	bf00      	nop
 8000ec6:	3738      	adds	r7, #56	; 0x38
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	200088e8 	.word	0x200088e8
 8000ed0:	40016800 	.word	0x40016800

08000ed4 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000ed8:	4b12      	ldr	r3, [pc, #72]	; (8000f24 <MX_QUADSPI_Init+0x50>)
 8000eda:	4a13      	ldr	r2, [pc, #76]	; (8000f28 <MX_QUADSPI_Init+0x54>)
 8000edc:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000ede:	4b11      	ldr	r3, [pc, #68]	; (8000f24 <MX_QUADSPI_Init+0x50>)
 8000ee0:	22ff      	movs	r2, #255	; 0xff
 8000ee2:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000ee4:	4b0f      	ldr	r3, [pc, #60]	; (8000f24 <MX_QUADSPI_Init+0x50>)
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000eea:	4b0e      	ldr	r3, [pc, #56]	; (8000f24 <MX_QUADSPI_Init+0x50>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000ef0:	4b0c      	ldr	r3, [pc, #48]	; (8000f24 <MX_QUADSPI_Init+0x50>)
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000ef6:	4b0b      	ldr	r3, [pc, #44]	; (8000f24 <MX_QUADSPI_Init+0x50>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000efc:	4b09      	ldr	r3, [pc, #36]	; (8000f24 <MX_QUADSPI_Init+0x50>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000f02:	4b08      	ldr	r3, [pc, #32]	; (8000f24 <MX_QUADSPI_Init+0x50>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000f08:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <MX_QUADSPI_Init+0x50>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000f0e:	4805      	ldr	r0, [pc, #20]	; (8000f24 <MX_QUADSPI_Init+0x50>)
 8000f10:	f006 fd6a 	bl	80079e8 <HAL_QSPI_Init>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8000f1a:	f000 fe41 	bl	8001ba0 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	20008e80 	.word	0x20008e80
 8000f28:	a0001000 	.word	0xa0001000

08000f2c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b092      	sub	sp, #72	; 0x48
 8000f30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000f32:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f36:	2200      	movs	r2, #0
 8000f38:	601a      	str	r2, [r3, #0]
 8000f3a:	605a      	str	r2, [r3, #4]
 8000f3c:	609a      	str	r2, [r3, #8]
 8000f3e:	60da      	str	r2, [r3, #12]
 8000f40:	611a      	str	r2, [r3, #16]
 8000f42:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8000f44:	2300      	movs	r3, #0
 8000f46:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8000f48:	463b      	mov	r3, r7
 8000f4a:	222c      	movs	r2, #44	; 0x2c
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f00c fe14 	bl	800db7c <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8000f54:	4b43      	ldr	r3, [pc, #268]	; (8001064 <MX_RTC_Init+0x138>)
 8000f56:	4a44      	ldr	r2, [pc, #272]	; (8001068 <MX_RTC_Init+0x13c>)
 8000f58:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000f5a:	4b42      	ldr	r3, [pc, #264]	; (8001064 <MX_RTC_Init+0x138>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000f60:	4b40      	ldr	r3, [pc, #256]	; (8001064 <MX_RTC_Init+0x138>)
 8000f62:	227f      	movs	r2, #127	; 0x7f
 8000f64:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000f66:	4b3f      	ldr	r3, [pc, #252]	; (8001064 <MX_RTC_Init+0x138>)
 8000f68:	22ff      	movs	r2, #255	; 0xff
 8000f6a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_ALARMA;
 8000f6c:	4b3d      	ldr	r3, [pc, #244]	; (8001064 <MX_RTC_Init+0x138>)
 8000f6e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000f72:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000f74:	4b3b      	ldr	r3, [pc, #236]	; (8001064 <MX_RTC_Init+0x138>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000f7a:	4b3a      	ldr	r3, [pc, #232]	; (8001064 <MX_RTC_Init+0x138>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000f80:	4838      	ldr	r0, [pc, #224]	; (8001064 <MX_RTC_Init+0x138>)
 8000f82:	f008 f857 	bl	8009034 <HAL_RTC_Init>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_RTC_Init+0x64>
  {
    Error_Handler();
 8000f8c:	f000 fe08 	bl	8001ba0 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 8000f90:	2300      	movs	r3, #0
 8000f92:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 8000f96:	2300      	movs	r3, #0
 8000f98:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000faa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fae:	2201      	movs	r2, #1
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	482c      	ldr	r0, [pc, #176]	; (8001064 <MX_RTC_Init+0x138>)
 8000fb4:	f008 f8ba 	bl	800912c <HAL_RTC_SetTime>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <MX_RTC_Init+0x96>
  {
    Error_Handler();
 8000fbe:	f000 fdef 	bl	8001ba0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000fda:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fde:	2201      	movs	r2, #1
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4820      	ldr	r0, [pc, #128]	; (8001064 <MX_RTC_Init+0x138>)
 8000fe4:	f008 f960 	bl	80092a8 <HAL_RTC_SetDate>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <MX_RTC_Init+0xc6>
  {
    Error_Handler();
 8000fee:	f000 fdd7 	bl	8001ba0 <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001002:	2300      	movs	r3, #0
 8001004:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001006:	2300      	movs	r3, #0
 8001008:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800100a:	2300      	movs	r3, #0
 800100c:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800100e:	2300      	movs	r3, #0
 8001010:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001012:	2300      	movs	r3, #0
 8001014:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001016:	2301      	movs	r3, #1
 8001018:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 800101c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001020:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001022:	463b      	mov	r3, r7
 8001024:	2201      	movs	r2, #1
 8001026:	4619      	mov	r1, r3
 8001028:	480e      	ldr	r0, [pc, #56]	; (8001064 <MX_RTC_Init+0x138>)
 800102a:	f008 f9e5 	bl	80093f8 <HAL_RTC_SetAlarm>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_RTC_Init+0x10c>
  {
    Error_Handler();
 8001034:	f000 fdb4 	bl	8001ba0 <Error_Handler>
  }
  /** Enable the Alarm B 
  */
  sAlarm.AlarmDateWeekDay = 0x1;
 8001038:	2301      	movs	r3, #1
 800103a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_B;
 800103e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001042:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001044:	463b      	mov	r3, r7
 8001046:	2201      	movs	r2, #1
 8001048:	4619      	mov	r1, r3
 800104a:	4806      	ldr	r0, [pc, #24]	; (8001064 <MX_RTC_Init+0x138>)
 800104c:	f008 f9d4 	bl	80093f8 <HAL_RTC_SetAlarm>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_RTC_Init+0x12e>
  {
    Error_Handler();
 8001056:	f000 fda3 	bl	8001ba0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800105a:	bf00      	nop
 800105c:	3748      	adds	r7, #72	; 0x48
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	20008be4 	.word	0x20008be4
 8001068:	40002800 	.word	0x40002800

0800106c <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8001070:	4b4d      	ldr	r3, [pc, #308]	; (80011a8 <MX_SAI1_Init+0x13c>)
 8001072:	4a4e      	ldr	r2, [pc, #312]	; (80011ac <MX_SAI1_Init+0x140>)
 8001074:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8001076:	4b4c      	ldr	r3, [pc, #304]	; (80011a8 <MX_SAI1_Init+0x13c>)
 8001078:	2200      	movs	r2, #0
 800107a:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 800107c:	4b4a      	ldr	r3, [pc, #296]	; (80011a8 <MX_SAI1_Init+0x13c>)
 800107e:	2200      	movs	r2, #0
 8001080:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8001082:	4b49      	ldr	r3, [pc, #292]	; (80011a8 <MX_SAI1_Init+0x13c>)
 8001084:	2240      	movs	r2, #64	; 0x40
 8001086:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001088:	4b47      	ldr	r3, [pc, #284]	; (80011a8 <MX_SAI1_Init+0x13c>)
 800108a:	2200      	movs	r2, #0
 800108c:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800108e:	4b46      	ldr	r3, [pc, #280]	; (80011a8 <MX_SAI1_Init+0x13c>)
 8001090:	2200      	movs	r2, #0
 8001092:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8001094:	4b44      	ldr	r3, [pc, #272]	; (80011a8 <MX_SAI1_Init+0x13c>)
 8001096:	2200      	movs	r2, #0
 8001098:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800109a:	4b43      	ldr	r3, [pc, #268]	; (80011a8 <MX_SAI1_Init+0x13c>)
 800109c:	2200      	movs	r2, #0
 800109e:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80010a0:	4b41      	ldr	r3, [pc, #260]	; (80011a8 <MX_SAI1_Init+0x13c>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80010a6:	4b40      	ldr	r3, [pc, #256]	; (80011a8 <MX_SAI1_Init+0x13c>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 80010ac:	4b3e      	ldr	r3, [pc, #248]	; (80011a8 <MX_SAI1_Init+0x13c>)
 80010ae:	4a40      	ldr	r2, [pc, #256]	; (80011b0 <MX_SAI1_Init+0x144>)
 80010b0:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80010b2:	4b3d      	ldr	r3, [pc, #244]	; (80011a8 <MX_SAI1_Init+0x13c>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 80010b8:	4b3b      	ldr	r3, [pc, #236]	; (80011a8 <MX_SAI1_Init+0x13c>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 80010be:	4b3a      	ldr	r3, [pc, #232]	; (80011a8 <MX_SAI1_Init+0x13c>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80010c4:	4b38      	ldr	r3, [pc, #224]	; (80011a8 <MX_SAI1_Init+0x13c>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.FrameInit.FrameLength = 8;
 80010ca:	4b37      	ldr	r3, [pc, #220]	; (80011a8 <MX_SAI1_Init+0x13c>)
 80010cc:	2208      	movs	r2, #8
 80010ce:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 80010d0:	4b35      	ldr	r3, [pc, #212]	; (80011a8 <MX_SAI1_Init+0x13c>)
 80010d2:	2201      	movs	r2, #1
 80010d4:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80010d6:	4b34      	ldr	r3, [pc, #208]	; (80011a8 <MX_SAI1_Init+0x13c>)
 80010d8:	2200      	movs	r2, #0
 80010da:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80010dc:	4b32      	ldr	r3, [pc, #200]	; (80011a8 <MX_SAI1_Init+0x13c>)
 80010de:	2200      	movs	r2, #0
 80010e0:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80010e2:	4b31      	ldr	r3, [pc, #196]	; (80011a8 <MX_SAI1_Init+0x13c>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 80010e8:	4b2f      	ldr	r3, [pc, #188]	; (80011a8 <MX_SAI1_Init+0x13c>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80010ee:	4b2e      	ldr	r3, [pc, #184]	; (80011a8 <MX_SAI1_Init+0x13c>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 80010f4:	4b2c      	ldr	r3, [pc, #176]	; (80011a8 <MX_SAI1_Init+0x13c>)
 80010f6:	2201      	movs	r2, #1
 80010f8:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 80010fa:	4b2b      	ldr	r3, [pc, #172]	; (80011a8 <MX_SAI1_Init+0x13c>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8001100:	4829      	ldr	r0, [pc, #164]	; (80011a8 <MX_SAI1_Init+0x13c>)
 8001102:	f008 fb03 	bl	800970c <HAL_SAI_Init>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_SAI1_Init+0xa4>
  {
    Error_Handler();
 800110c:	f000 fd48 	bl	8001ba0 <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 8001110:	4b28      	ldr	r3, [pc, #160]	; (80011b4 <MX_SAI1_Init+0x148>)
 8001112:	4a29      	ldr	r2, [pc, #164]	; (80011b8 <MX_SAI1_Init+0x14c>)
 8001114:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 8001116:	4b27      	ldr	r3, [pc, #156]	; (80011b4 <MX_SAI1_Init+0x148>)
 8001118:	2200      	movs	r2, #0
 800111a:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 800111c:	4b25      	ldr	r3, [pc, #148]	; (80011b4 <MX_SAI1_Init+0x148>)
 800111e:	2203      	movs	r2, #3
 8001120:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 8001122:	4b24      	ldr	r3, [pc, #144]	; (80011b4 <MX_SAI1_Init+0x148>)
 8001124:	2240      	movs	r2, #64	; 0x40
 8001126:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001128:	4b22      	ldr	r3, [pc, #136]	; (80011b4 <MX_SAI1_Init+0x148>)
 800112a:	2200      	movs	r2, #0
 800112c:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800112e:	4b21      	ldr	r3, [pc, #132]	; (80011b4 <MX_SAI1_Init+0x148>)
 8001130:	2200      	movs	r2, #0
 8001132:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8001134:	4b1f      	ldr	r3, [pc, #124]	; (80011b4 <MX_SAI1_Init+0x148>)
 8001136:	2201      	movs	r2, #1
 8001138:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800113a:	4b1e      	ldr	r3, [pc, #120]	; (80011b4 <MX_SAI1_Init+0x148>)
 800113c:	2200      	movs	r2, #0
 800113e:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001140:	4b1c      	ldr	r3, [pc, #112]	; (80011b4 <MX_SAI1_Init+0x148>)
 8001142:	2200      	movs	r2, #0
 8001144:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001146:	4b1b      	ldr	r3, [pc, #108]	; (80011b4 <MX_SAI1_Init+0x148>)
 8001148:	2200      	movs	r2, #0
 800114a:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 800114c:	4b19      	ldr	r3, [pc, #100]	; (80011b4 <MX_SAI1_Init+0x148>)
 800114e:	2200      	movs	r2, #0
 8001150:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001152:	4b18      	ldr	r3, [pc, #96]	; (80011b4 <MX_SAI1_Init+0x148>)
 8001154:	2200      	movs	r2, #0
 8001156:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001158:	4b16      	ldr	r3, [pc, #88]	; (80011b4 <MX_SAI1_Init+0x148>)
 800115a:	2200      	movs	r2, #0
 800115c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.FrameInit.FrameLength = 8;
 800115e:	4b15      	ldr	r3, [pc, #84]	; (80011b4 <MX_SAI1_Init+0x148>)
 8001160:	2208      	movs	r2, #8
 8001162:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 8001164:	4b13      	ldr	r3, [pc, #76]	; (80011b4 <MX_SAI1_Init+0x148>)
 8001166:	2201      	movs	r2, #1
 8001168:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800116a:	4b12      	ldr	r3, [pc, #72]	; (80011b4 <MX_SAI1_Init+0x148>)
 800116c:	2200      	movs	r2, #0
 800116e:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001170:	4b10      	ldr	r3, [pc, #64]	; (80011b4 <MX_SAI1_Init+0x148>)
 8001172:	2200      	movs	r2, #0
 8001174:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001176:	4b0f      	ldr	r3, [pc, #60]	; (80011b4 <MX_SAI1_Init+0x148>)
 8001178:	2200      	movs	r2, #0
 800117a:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 800117c:	4b0d      	ldr	r3, [pc, #52]	; (80011b4 <MX_SAI1_Init+0x148>)
 800117e:	2200      	movs	r2, #0
 8001180:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001182:	4b0c      	ldr	r3, [pc, #48]	; (80011b4 <MX_SAI1_Init+0x148>)
 8001184:	2200      	movs	r2, #0
 8001186:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 8001188:	4b0a      	ldr	r3, [pc, #40]	; (80011b4 <MX_SAI1_Init+0x148>)
 800118a:	2201      	movs	r2, #1
 800118c:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 800118e:	4b09      	ldr	r3, [pc, #36]	; (80011b4 <MX_SAI1_Init+0x148>)
 8001190:	2200      	movs	r2, #0
 8001192:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8001194:	4807      	ldr	r0, [pc, #28]	; (80011b4 <MX_SAI1_Init+0x148>)
 8001196:	f008 fab9 	bl	800970c <HAL_SAI_Init>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <MX_SAI1_Init+0x138>
  {
    Error_Handler();
 80011a0:	f000 fcfe 	bl	8001ba0 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 80011a4:	bf00      	nop
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	20008d30 	.word	0x20008d30
 80011ac:	40015804 	.word	0x40015804
 80011b0:	0002ee00 	.word	0x0002ee00
 80011b4:	20008990 	.word	0x20008990
 80011b8:	40015824 	.word	0x40015824

080011bc <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 80011c0:	4b12      	ldr	r3, [pc, #72]	; (800120c <MX_SAI2_Init+0x50>)
 80011c2:	4a13      	ldr	r2, [pc, #76]	; (8001210 <MX_SAI2_Init+0x54>)
 80011c4:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_SPDIF_PROTOCOL;
 80011c6:	4b11      	ldr	r3, [pc, #68]	; (800120c <MX_SAI2_Init+0x50>)
 80011c8:	2204      	movs	r2, #4
 80011ca:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 80011cc:	4b0f      	ldr	r3, [pc, #60]	; (800120c <MX_SAI2_Init+0x50>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 80011d2:	4b0e      	ldr	r3, [pc, #56]	; (800120c <MX_SAI2_Init+0x50>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80011d8:	4b0c      	ldr	r3, [pc, #48]	; (800120c <MX_SAI2_Init+0x50>)
 80011da:	2200      	movs	r2, #0
 80011dc:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80011de:	4b0b      	ldr	r3, [pc, #44]	; (800120c <MX_SAI2_Init+0x50>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 80011e4:	4b09      	ldr	r3, [pc, #36]	; (800120c <MX_SAI2_Init+0x50>)
 80011e6:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80011ea:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 80011ec:	4b07      	ldr	r3, [pc, #28]	; (800120c <MX_SAI2_Init+0x50>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 80011f2:	4b06      	ldr	r3, [pc, #24]	; (800120c <MX_SAI2_Init+0x50>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 80011f8:	4804      	ldr	r0, [pc, #16]	; (800120c <MX_SAI2_Init+0x50>)
 80011fa:	f008 fa87 	bl	800970c <HAL_SAI_Init>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_SAI2_Init+0x4c>
  {
    Error_Handler();
 8001204:	f000 fccc 	bl	8001ba0 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8001208:	bf00      	nop
 800120a:	bd80      	pop	{r7, pc}
 800120c:	20008300 	.word	0x20008300
 8001210:	40015c04 	.word	0x40015c04

08001214 <MX_SDMMC2_MMC_Init>:
  * @brief SDMMC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC2_MMC_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC2_Init 0 */

  /* USER CODE BEGIN SDMMC2_Init 1 */

  /* USER CODE END SDMMC2_Init 1 */
  hmmc2.Instance = SDMMC2;
 8001218:	4b14      	ldr	r3, [pc, #80]	; (800126c <MX_SDMMC2_MMC_Init+0x58>)
 800121a:	4a15      	ldr	r2, [pc, #84]	; (8001270 <MX_SDMMC2_MMC_Init+0x5c>)
 800121c:	601a      	str	r2, [r3, #0]
  hmmc2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800121e:	4b13      	ldr	r3, [pc, #76]	; (800126c <MX_SDMMC2_MMC_Init+0x58>)
 8001220:	2200      	movs	r2, #0
 8001222:	605a      	str	r2, [r3, #4]
  hmmc2.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001224:	4b11      	ldr	r3, [pc, #68]	; (800126c <MX_SDMMC2_MMC_Init+0x58>)
 8001226:	2200      	movs	r2, #0
 8001228:	609a      	str	r2, [r3, #8]
  hmmc2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800122a:	4b10      	ldr	r3, [pc, #64]	; (800126c <MX_SDMMC2_MMC_Init+0x58>)
 800122c:	2200      	movs	r2, #0
 800122e:	60da      	str	r2, [r3, #12]
  hmmc2.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001230:	4b0e      	ldr	r3, [pc, #56]	; (800126c <MX_SDMMC2_MMC_Init+0x58>)
 8001232:	2200      	movs	r2, #0
 8001234:	611a      	str	r2, [r3, #16]
  hmmc2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001236:	4b0d      	ldr	r3, [pc, #52]	; (800126c <MX_SDMMC2_MMC_Init+0x58>)
 8001238:	2200      	movs	r2, #0
 800123a:	615a      	str	r2, [r3, #20]
  hmmc2.Init.ClockDiv = 0;
 800123c:	4b0b      	ldr	r3, [pc, #44]	; (800126c <MX_SDMMC2_MMC_Init+0x58>)
 800123e:	2200      	movs	r2, #0
 8001240:	619a      	str	r2, [r3, #24]
  if (HAL_MMC_Init(&hmmc2) != HAL_OK)
 8001242:	480a      	ldr	r0, [pc, #40]	; (800126c <MX_SDMMC2_MMC_Init+0x58>)
 8001244:	f004 ff56 	bl	80060f4 <HAL_MMC_Init>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_SDMMC2_MMC_Init+0x3e>
  {
    Error_Handler();
 800124e:	f000 fca7 	bl	8001ba0 <Error_Handler>
  }
  if (HAL_MMC_ConfigWideBusOperation(&hmmc2, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8001252:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001256:	4805      	ldr	r0, [pc, #20]	; (800126c <MX_SDMMC2_MMC_Init+0x58>)
 8001258:	f005 f9b0 	bl	80065bc <HAL_MMC_ConfigWideBusOperation>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_SDMMC2_MMC_Init+0x52>
  {
    Error_Handler();
 8001262:	f000 fc9d 	bl	8001ba0 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC2_Init 2 */

  /* USER CODE END SDMMC2_Init 2 */

}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	20008180 	.word	0x20008180
 8001270:	40011c00 	.word	0x40011c00

08001274 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8001278:	4b16      	ldr	r3, [pc, #88]	; (80012d4 <MX_SPDIFRX_Init+0x60>)
 800127a:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800127e:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN1;
 8001280:	4b14      	ldr	r3, [pc, #80]	; (80012d4 <MX_SPDIFRX_Init+0x60>)
 8001282:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001286:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8001288:	4b12      	ldr	r3, [pc, #72]	; (80012d4 <MX_SPDIFRX_Init+0x60>)
 800128a:	2200      	movs	r2, #0
 800128c:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 800128e:	4b11      	ldr	r3, [pc, #68]	; (80012d4 <MX_SPDIFRX_Init+0x60>)
 8001290:	2200      	movs	r2, #0
 8001292:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8001294:	4b0f      	ldr	r3, [pc, #60]	; (80012d4 <MX_SPDIFRX_Init+0x60>)
 8001296:	2200      	movs	r2, #0
 8001298:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 800129a:	4b0e      	ldr	r3, [pc, #56]	; (80012d4 <MX_SPDIFRX_Init+0x60>)
 800129c:	2200      	movs	r2, #0
 800129e:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 80012a0:	4b0c      	ldr	r3, [pc, #48]	; (80012d4 <MX_SPDIFRX_Init+0x60>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 80012a6:	4b0b      	ldr	r3, [pc, #44]	; (80012d4 <MX_SPDIFRX_Init+0x60>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 80012ac:	4b09      	ldr	r3, [pc, #36]	; (80012d4 <MX_SPDIFRX_Init+0x60>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 80012b2:	4b08      	ldr	r3, [pc, #32]	; (80012d4 <MX_SPDIFRX_Init+0x60>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 80012b8:	4b06      	ldr	r3, [pc, #24]	; (80012d4 <MX_SPDIFRX_Init+0x60>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 80012be:	4805      	ldr	r0, [pc, #20]	; (80012d4 <MX_SPDIFRX_Init+0x60>)
 80012c0:	f008 fc00 	bl	8009ac4 <HAL_SPDIFRX_Init>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_SPDIFRX_Init+0x5a>
  {
    Error_Handler();
 80012ca:	f000 fc69 	bl	8001ba0 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 80012ce:	bf00      	nop
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	200082b4 	.word	0x200082b4

080012d8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80012dc:	4b1a      	ldr	r3, [pc, #104]	; (8001348 <MX_SPI2_Init+0x70>)
 80012de:	4a1b      	ldr	r2, [pc, #108]	; (800134c <MX_SPI2_Init+0x74>)
 80012e0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80012e2:	4b19      	ldr	r3, [pc, #100]	; (8001348 <MX_SPI2_Init+0x70>)
 80012e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012e8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80012ea:	4b17      	ldr	r3, [pc, #92]	; (8001348 <MX_SPI2_Init+0x70>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80012f0:	4b15      	ldr	r3, [pc, #84]	; (8001348 <MX_SPI2_Init+0x70>)
 80012f2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80012f6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012f8:	4b13      	ldr	r3, [pc, #76]	; (8001348 <MX_SPI2_Init+0x70>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012fe:	4b12      	ldr	r3, [pc, #72]	; (8001348 <MX_SPI2_Init+0x70>)
 8001300:	2200      	movs	r2, #0
 8001302:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8001304:	4b10      	ldr	r3, [pc, #64]	; (8001348 <MX_SPI2_Init+0x70>)
 8001306:	2200      	movs	r2, #0
 8001308:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800130a:	4b0f      	ldr	r3, [pc, #60]	; (8001348 <MX_SPI2_Init+0x70>)
 800130c:	2200      	movs	r2, #0
 800130e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001310:	4b0d      	ldr	r3, [pc, #52]	; (8001348 <MX_SPI2_Init+0x70>)
 8001312:	2200      	movs	r2, #0
 8001314:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001316:	4b0c      	ldr	r3, [pc, #48]	; (8001348 <MX_SPI2_Init+0x70>)
 8001318:	2200      	movs	r2, #0
 800131a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800131c:	4b0a      	ldr	r3, [pc, #40]	; (8001348 <MX_SPI2_Init+0x70>)
 800131e:	2200      	movs	r2, #0
 8001320:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001322:	4b09      	ldr	r3, [pc, #36]	; (8001348 <MX_SPI2_Init+0x70>)
 8001324:	2207      	movs	r2, #7
 8001326:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001328:	4b07      	ldr	r3, [pc, #28]	; (8001348 <MX_SPI2_Init+0x70>)
 800132a:	2200      	movs	r2, #0
 800132c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800132e:	4b06      	ldr	r3, [pc, #24]	; (8001348 <MX_SPI2_Init+0x70>)
 8001330:	2208      	movs	r2, #8
 8001332:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001334:	4804      	ldr	r0, [pc, #16]	; (8001348 <MX_SPI2_Init+0x70>)
 8001336:	f008 fc21 	bl	8009b7c <HAL_SPI_Init>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_SPI2_Init+0x6c>
  {
    Error_Handler();
 8001340:	f000 fc2e 	bl	8001ba0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001344:	bf00      	nop
 8001346:	bd80      	pop	{r7, pc}
 8001348:	20008250 	.word	0x20008250
 800134c:	40003800 	.word	0x40003800

08001350 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b088      	sub	sp, #32
 8001354:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001356:	f107 0310 	add.w	r3, r7, #16
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	605a      	str	r2, [r3, #4]
 8001360:	609a      	str	r2, [r3, #8]
 8001362:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001364:	1d3b      	adds	r3, r7, #4
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	605a      	str	r2, [r3, #4]
 800136c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800136e:	4b1f      	ldr	r3, [pc, #124]	; (80013ec <MX_TIM1_Init+0x9c>)
 8001370:	4a1f      	ldr	r2, [pc, #124]	; (80013f0 <MX_TIM1_Init+0xa0>)
 8001372:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001374:	4b1d      	ldr	r3, [pc, #116]	; (80013ec <MX_TIM1_Init+0x9c>)
 8001376:	2200      	movs	r2, #0
 8001378:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800137a:	4b1c      	ldr	r3, [pc, #112]	; (80013ec <MX_TIM1_Init+0x9c>)
 800137c:	2200      	movs	r2, #0
 800137e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8001380:	4b1a      	ldr	r3, [pc, #104]	; (80013ec <MX_TIM1_Init+0x9c>)
 8001382:	2200      	movs	r2, #0
 8001384:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001386:	4b19      	ldr	r3, [pc, #100]	; (80013ec <MX_TIM1_Init+0x9c>)
 8001388:	2200      	movs	r2, #0
 800138a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800138c:	4b17      	ldr	r3, [pc, #92]	; (80013ec <MX_TIM1_Init+0x9c>)
 800138e:	2200      	movs	r2, #0
 8001390:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001392:	4b16      	ldr	r3, [pc, #88]	; (80013ec <MX_TIM1_Init+0x9c>)
 8001394:	2200      	movs	r2, #0
 8001396:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001398:	4814      	ldr	r0, [pc, #80]	; (80013ec <MX_TIM1_Init+0x9c>)
 800139a:	f008 fc81 	bl	8009ca0 <HAL_TIM_Base_Init>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80013a4:	f000 fbfc 	bl	8001ba0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013ac:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013ae:	f107 0310 	add.w	r3, r7, #16
 80013b2:	4619      	mov	r1, r3
 80013b4:	480d      	ldr	r0, [pc, #52]	; (80013ec <MX_TIM1_Init+0x9c>)
 80013b6:	f008 ff2b 	bl	800a210 <HAL_TIM_ConfigClockSource>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80013c0:	f000 fbee 	bl	8001ba0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013c4:	2300      	movs	r3, #0
 80013c6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80013c8:	2300      	movs	r3, #0
 80013ca:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013cc:	2300      	movs	r3, #0
 80013ce:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013d0:	1d3b      	adds	r3, r7, #4
 80013d2:	4619      	mov	r1, r3
 80013d4:	4805      	ldr	r0, [pc, #20]	; (80013ec <MX_TIM1_Init+0x9c>)
 80013d6:	f009 fb95 	bl	800ab04 <HAL_TIMEx_MasterConfigSynchronization>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80013e0:	f000 fbde 	bl	8001ba0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80013e4:	bf00      	nop
 80013e6:	3720      	adds	r7, #32
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	20008c04 	.word	0x20008c04
 80013f0:	40010000 	.word	0x40010000

080013f4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b08a      	sub	sp, #40	; 0x28
 80013f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013fa:	f107 031c 	add.w	r3, r7, #28
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	605a      	str	r2, [r3, #4]
 8001404:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001406:	463b      	mov	r3, r7
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	605a      	str	r2, [r3, #4]
 800140e:	609a      	str	r2, [r3, #8]
 8001410:	60da      	str	r2, [r3, #12]
 8001412:	611a      	str	r2, [r3, #16]
 8001414:	615a      	str	r2, [r3, #20]
 8001416:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001418:	4b21      	ldr	r3, [pc, #132]	; (80014a0 <MX_TIM3_Init+0xac>)
 800141a:	4a22      	ldr	r2, [pc, #136]	; (80014a4 <MX_TIM3_Init+0xb0>)
 800141c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800141e:	4b20      	ldr	r3, [pc, #128]	; (80014a0 <MX_TIM3_Init+0xac>)
 8001420:	2200      	movs	r2, #0
 8001422:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001424:	4b1e      	ldr	r3, [pc, #120]	; (80014a0 <MX_TIM3_Init+0xac>)
 8001426:	2200      	movs	r2, #0
 8001428:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 800142a:	4b1d      	ldr	r3, [pc, #116]	; (80014a0 <MX_TIM3_Init+0xac>)
 800142c:	2200      	movs	r2, #0
 800142e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001430:	4b1b      	ldr	r3, [pc, #108]	; (80014a0 <MX_TIM3_Init+0xac>)
 8001432:	2200      	movs	r2, #0
 8001434:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001436:	4b1a      	ldr	r3, [pc, #104]	; (80014a0 <MX_TIM3_Init+0xac>)
 8001438:	2200      	movs	r2, #0
 800143a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800143c:	4818      	ldr	r0, [pc, #96]	; (80014a0 <MX_TIM3_Init+0xac>)
 800143e:	f008 fc85 	bl	8009d4c <HAL_TIM_PWM_Init>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001448:	f000 fbaa 	bl	8001ba0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800144c:	2300      	movs	r3, #0
 800144e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001450:	2300      	movs	r3, #0
 8001452:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001454:	f107 031c 	add.w	r3, r7, #28
 8001458:	4619      	mov	r1, r3
 800145a:	4811      	ldr	r0, [pc, #68]	; (80014a0 <MX_TIM3_Init+0xac>)
 800145c:	f009 fb52 	bl	800ab04 <HAL_TIMEx_MasterConfigSynchronization>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001466:	f000 fb9b 	bl	8001ba0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800146a:	2360      	movs	r3, #96	; 0x60
 800146c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800146e:	2300      	movs	r3, #0
 8001470:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001472:	2300      	movs	r3, #0
 8001474:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001476:	2300      	movs	r3, #0
 8001478:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800147a:	463b      	mov	r3, r7
 800147c:	2208      	movs	r2, #8
 800147e:	4619      	mov	r1, r3
 8001480:	4807      	ldr	r0, [pc, #28]	; (80014a0 <MX_TIM3_Init+0xac>)
 8001482:	f008 fdad 	bl	8009fe0 <HAL_TIM_PWM_ConfigChannel>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 800148c:	f000 fb88 	bl	8001ba0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001490:	4803      	ldr	r0, [pc, #12]	; (80014a0 <MX_TIM3_Init+0xac>)
 8001492:	f001 f8e9 	bl	8002668 <HAL_TIM_MspPostInit>

}
 8001496:	bf00      	nop
 8001498:	3728      	adds	r7, #40	; 0x28
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	200088a8 	.word	0x200088a8
 80014a4:	40000400 	.word	0x40000400

080014a8 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b088      	sub	sp, #32
 80014ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80014ae:	1d3b      	adds	r3, r7, #4
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	605a      	str	r2, [r3, #4]
 80014b6:	609a      	str	r2, [r3, #8]
 80014b8:	60da      	str	r2, [r3, #12]
 80014ba:	611a      	str	r2, [r3, #16]
 80014bc:	615a      	str	r2, [r3, #20]
 80014be:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80014c0:	4b1d      	ldr	r3, [pc, #116]	; (8001538 <MX_TIM10_Init+0x90>)
 80014c2:	4a1e      	ldr	r2, [pc, #120]	; (800153c <MX_TIM10_Init+0x94>)
 80014c4:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 80014c6:	4b1c      	ldr	r3, [pc, #112]	; (8001538 <MX_TIM10_Init+0x90>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014cc:	4b1a      	ldr	r3, [pc, #104]	; (8001538 <MX_TIM10_Init+0x90>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 0;
 80014d2:	4b19      	ldr	r3, [pc, #100]	; (8001538 <MX_TIM10_Init+0x90>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014d8:	4b17      	ldr	r3, [pc, #92]	; (8001538 <MX_TIM10_Init+0x90>)
 80014da:	2200      	movs	r2, #0
 80014dc:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014de:	4b16      	ldr	r3, [pc, #88]	; (8001538 <MX_TIM10_Init+0x90>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80014e4:	4814      	ldr	r0, [pc, #80]	; (8001538 <MX_TIM10_Init+0x90>)
 80014e6:	f008 fbdb 	bl	8009ca0 <HAL_TIM_Base_Init>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <MX_TIM10_Init+0x4c>
  {
    Error_Handler();
 80014f0:	f000 fb56 	bl	8001ba0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80014f4:	4810      	ldr	r0, [pc, #64]	; (8001538 <MX_TIM10_Init+0x90>)
 80014f6:	f008 fc29 	bl	8009d4c <HAL_TIM_PWM_Init>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <MX_TIM10_Init+0x5c>
  {
    Error_Handler();
 8001500:	f000 fb4e 	bl	8001ba0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001504:	2360      	movs	r3, #96	; 0x60
 8001506:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001508:	2300      	movs	r3, #0
 800150a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800150c:	2300      	movs	r3, #0
 800150e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001510:	2300      	movs	r3, #0
 8001512:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001514:	1d3b      	adds	r3, r7, #4
 8001516:	2200      	movs	r2, #0
 8001518:	4619      	mov	r1, r3
 800151a:	4807      	ldr	r0, [pc, #28]	; (8001538 <MX_TIM10_Init+0x90>)
 800151c:	f008 fd60 	bl	8009fe0 <HAL_TIM_PWM_ConfigChannel>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_TIM10_Init+0x82>
  {
    Error_Handler();
 8001526:	f000 fb3b 	bl	8001ba0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 800152a:	4803      	ldr	r0, [pc, #12]	; (8001538 <MX_TIM10_Init+0x90>)
 800152c:	f001 f89c 	bl	8002668 <HAL_TIM_MspPostInit>

}
 8001530:	bf00      	nop
 8001532:	3720      	adds	r7, #32
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	200087d4 	.word	0x200087d4
 800153c:	40014400 	.word	0x40014400

08001540 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b088      	sub	sp, #32
 8001544:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001546:	1d3b      	adds	r3, r7, #4
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	60da      	str	r2, [r3, #12]
 8001552:	611a      	str	r2, [r3, #16]
 8001554:	615a      	str	r2, [r3, #20]
 8001556:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001558:	4b1d      	ldr	r3, [pc, #116]	; (80015d0 <MX_TIM11_Init+0x90>)
 800155a:	4a1e      	ldr	r2, [pc, #120]	; (80015d4 <MX_TIM11_Init+0x94>)
 800155c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 800155e:	4b1c      	ldr	r3, [pc, #112]	; (80015d0 <MX_TIM11_Init+0x90>)
 8001560:	2200      	movs	r2, #0
 8001562:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001564:	4b1a      	ldr	r3, [pc, #104]	; (80015d0 <MX_TIM11_Init+0x90>)
 8001566:	2200      	movs	r2, #0
 8001568:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 0;
 800156a:	4b19      	ldr	r3, [pc, #100]	; (80015d0 <MX_TIM11_Init+0x90>)
 800156c:	2200      	movs	r2, #0
 800156e:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001570:	4b17      	ldr	r3, [pc, #92]	; (80015d0 <MX_TIM11_Init+0x90>)
 8001572:	2200      	movs	r2, #0
 8001574:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001576:	4b16      	ldr	r3, [pc, #88]	; (80015d0 <MX_TIM11_Init+0x90>)
 8001578:	2200      	movs	r2, #0
 800157a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800157c:	4814      	ldr	r0, [pc, #80]	; (80015d0 <MX_TIM11_Init+0x90>)
 800157e:	f008 fb8f 	bl	8009ca0 <HAL_TIM_Base_Init>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <MX_TIM11_Init+0x4c>
  {
    Error_Handler();
 8001588:	f000 fb0a 	bl	8001ba0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 800158c:	4810      	ldr	r0, [pc, #64]	; (80015d0 <MX_TIM11_Init+0x90>)
 800158e:	f008 fbdd 	bl	8009d4c <HAL_TIM_PWM_Init>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <MX_TIM11_Init+0x5c>
  {
    Error_Handler();
 8001598:	f000 fb02 	bl	8001ba0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800159c:	2360      	movs	r3, #96	; 0x60
 800159e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80015a0:	2300      	movs	r3, #0
 80015a2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015a4:	2300      	movs	r3, #0
 80015a6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015a8:	2300      	movs	r3, #0
 80015aa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015ac:	1d3b      	adds	r3, r7, #4
 80015ae:	2200      	movs	r2, #0
 80015b0:	4619      	mov	r1, r3
 80015b2:	4807      	ldr	r0, [pc, #28]	; (80015d0 <MX_TIM11_Init+0x90>)
 80015b4:	f008 fd14 	bl	8009fe0 <HAL_TIM_PWM_ConfigChannel>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_TIM11_Init+0x82>
  {
    Error_Handler();
 80015be:	f000 faef 	bl	8001ba0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 80015c2:	4803      	ldr	r0, [pc, #12]	; (80015d0 <MX_TIM11_Init+0x90>)
 80015c4:	f001 f850 	bl	8002668 <HAL_TIM_MspPostInit>

}
 80015c8:	bf00      	nop
 80015ca:	3720      	adds	r7, #32
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	20008ba4 	.word	0x20008ba4
 80015d4:	40014800 	.word	0x40014800

080015d8 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b088      	sub	sp, #32
 80015dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80015de:	1d3b      	adds	r3, r7, #4
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	605a      	str	r2, [r3, #4]
 80015e6:	609a      	str	r2, [r3, #8]
 80015e8:	60da      	str	r2, [r3, #12]
 80015ea:	611a      	str	r2, [r3, #16]
 80015ec:	615a      	str	r2, [r3, #20]
 80015ee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80015f0:	4b19      	ldr	r3, [pc, #100]	; (8001658 <MX_TIM12_Init+0x80>)
 80015f2:	4a1a      	ldr	r2, [pc, #104]	; (800165c <MX_TIM12_Init+0x84>)
 80015f4:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 80015f6:	4b18      	ldr	r3, [pc, #96]	; (8001658 <MX_TIM12_Init+0x80>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015fc:	4b16      	ldr	r3, [pc, #88]	; (8001658 <MX_TIM12_Init+0x80>)
 80015fe:	2200      	movs	r2, #0
 8001600:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 0;
 8001602:	4b15      	ldr	r3, [pc, #84]	; (8001658 <MX_TIM12_Init+0x80>)
 8001604:	2200      	movs	r2, #0
 8001606:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001608:	4b13      	ldr	r3, [pc, #76]	; (8001658 <MX_TIM12_Init+0x80>)
 800160a:	2200      	movs	r2, #0
 800160c:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800160e:	4b12      	ldr	r3, [pc, #72]	; (8001658 <MX_TIM12_Init+0x80>)
 8001610:	2200      	movs	r2, #0
 8001612:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001614:	4810      	ldr	r0, [pc, #64]	; (8001658 <MX_TIM12_Init+0x80>)
 8001616:	f008 fb99 	bl	8009d4c <HAL_TIM_PWM_Init>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <MX_TIM12_Init+0x4c>
  {
    Error_Handler();
 8001620:	f000 fabe 	bl	8001ba0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001624:	2360      	movs	r3, #96	; 0x60
 8001626:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001628:	2300      	movs	r3, #0
 800162a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800162c:	2300      	movs	r3, #0
 800162e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001630:	2300      	movs	r3, #0
 8001632:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001634:	1d3b      	adds	r3, r7, #4
 8001636:	2200      	movs	r2, #0
 8001638:	4619      	mov	r1, r3
 800163a:	4807      	ldr	r0, [pc, #28]	; (8001658 <MX_TIM12_Init+0x80>)
 800163c:	f008 fcd0 	bl	8009fe0 <HAL_TIM_PWM_ConfigChannel>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_TIM12_Init+0x72>
  {
    Error_Handler();
 8001646:	f000 faab 	bl	8001ba0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 800164a:	4803      	ldr	r0, [pc, #12]	; (8001658 <MX_TIM12_Init+0x80>)
 800164c:	f001 f80c 	bl	8002668 <HAL_TIM_MspPostInit>

}
 8001650:	bf00      	nop
 8001652:	3720      	adds	r7, #32
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	20008db4 	.word	0x20008db4
 800165c:	40001800 	.word	0x40001800

08001660 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001664:	4b14      	ldr	r3, [pc, #80]	; (80016b8 <MX_UART5_Init+0x58>)
 8001666:	4a15      	ldr	r2, [pc, #84]	; (80016bc <MX_UART5_Init+0x5c>)
 8001668:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800166a:	4b13      	ldr	r3, [pc, #76]	; (80016b8 <MX_UART5_Init+0x58>)
 800166c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001670:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001672:	4b11      	ldr	r3, [pc, #68]	; (80016b8 <MX_UART5_Init+0x58>)
 8001674:	2200      	movs	r2, #0
 8001676:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001678:	4b0f      	ldr	r3, [pc, #60]	; (80016b8 <MX_UART5_Init+0x58>)
 800167a:	2200      	movs	r2, #0
 800167c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800167e:	4b0e      	ldr	r3, [pc, #56]	; (80016b8 <MX_UART5_Init+0x58>)
 8001680:	2200      	movs	r2, #0
 8001682:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001684:	4b0c      	ldr	r3, [pc, #48]	; (80016b8 <MX_UART5_Init+0x58>)
 8001686:	220c      	movs	r2, #12
 8001688:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800168a:	4b0b      	ldr	r3, [pc, #44]	; (80016b8 <MX_UART5_Init+0x58>)
 800168c:	2200      	movs	r2, #0
 800168e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001690:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <MX_UART5_Init+0x58>)
 8001692:	2200      	movs	r2, #0
 8001694:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001696:	4b08      	ldr	r3, [pc, #32]	; (80016b8 <MX_UART5_Init+0x58>)
 8001698:	2200      	movs	r2, #0
 800169a:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800169c:	4b06      	ldr	r3, [pc, #24]	; (80016b8 <MX_UART5_Init+0x58>)
 800169e:	2200      	movs	r2, #0
 80016a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80016a2:	4805      	ldr	r0, [pc, #20]	; (80016b8 <MX_UART5_Init+0x58>)
 80016a4:	f009 faa8 	bl	800abf8 <HAL_UART_Init>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 80016ae:	f000 fa77 	bl	8001ba0 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80016b2:	bf00      	nop
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	20008a14 	.word	0x20008a14
 80016bc:	40005000 	.word	0x40005000

080016c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80016c4:	4b14      	ldr	r3, [pc, #80]	; (8001718 <MX_USART1_UART_Init+0x58>)
 80016c6:	4a15      	ldr	r2, [pc, #84]	; (800171c <MX_USART1_UART_Init+0x5c>)
 80016c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80016ca:	4b13      	ldr	r3, [pc, #76]	; (8001718 <MX_USART1_UART_Init+0x58>)
 80016cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016d2:	4b11      	ldr	r3, [pc, #68]	; (8001718 <MX_USART1_UART_Init+0x58>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016d8:	4b0f      	ldr	r3, [pc, #60]	; (8001718 <MX_USART1_UART_Init+0x58>)
 80016da:	2200      	movs	r2, #0
 80016dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016de:	4b0e      	ldr	r3, [pc, #56]	; (8001718 <MX_USART1_UART_Init+0x58>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016e4:	4b0c      	ldr	r3, [pc, #48]	; (8001718 <MX_USART1_UART_Init+0x58>)
 80016e6:	220c      	movs	r2, #12
 80016e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ea:	4b0b      	ldr	r3, [pc, #44]	; (8001718 <MX_USART1_UART_Init+0x58>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016f0:	4b09      	ldr	r3, [pc, #36]	; (8001718 <MX_USART1_UART_Init+0x58>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016f6:	4b08      	ldr	r3, [pc, #32]	; (8001718 <MX_USART1_UART_Init+0x58>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016fc:	4b06      	ldr	r3, [pc, #24]	; (8001718 <MX_USART1_UART_Init+0x58>)
 80016fe:	2200      	movs	r2, #0
 8001700:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001702:	4805      	ldr	r0, [pc, #20]	; (8001718 <MX_USART1_UART_Init+0x58>)
 8001704:	f009 fa78 	bl	800abf8 <HAL_UART_Init>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800170e:	f000 fa47 	bl	8001ba0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001712:	bf00      	nop
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	20008b24 	.word	0x20008b24
 800171c:	40011000 	.word	0x40011000

08001720 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001724:	4b14      	ldr	r3, [pc, #80]	; (8001778 <MX_USART6_UART_Init+0x58>)
 8001726:	4a15      	ldr	r2, [pc, #84]	; (800177c <MX_USART6_UART_Init+0x5c>)
 8001728:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800172a:	4b13      	ldr	r3, [pc, #76]	; (8001778 <MX_USART6_UART_Init+0x58>)
 800172c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001730:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001732:	4b11      	ldr	r3, [pc, #68]	; (8001778 <MX_USART6_UART_Init+0x58>)
 8001734:	2200      	movs	r2, #0
 8001736:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001738:	4b0f      	ldr	r3, [pc, #60]	; (8001778 <MX_USART6_UART_Init+0x58>)
 800173a:	2200      	movs	r2, #0
 800173c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800173e:	4b0e      	ldr	r3, [pc, #56]	; (8001778 <MX_USART6_UART_Init+0x58>)
 8001740:	2200      	movs	r2, #0
 8001742:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001744:	4b0c      	ldr	r3, [pc, #48]	; (8001778 <MX_USART6_UART_Init+0x58>)
 8001746:	220c      	movs	r2, #12
 8001748:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800174a:	4b0b      	ldr	r3, [pc, #44]	; (8001778 <MX_USART6_UART_Init+0x58>)
 800174c:	2200      	movs	r2, #0
 800174e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001750:	4b09      	ldr	r3, [pc, #36]	; (8001778 <MX_USART6_UART_Init+0x58>)
 8001752:	2200      	movs	r2, #0
 8001754:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001756:	4b08      	ldr	r3, [pc, #32]	; (8001778 <MX_USART6_UART_Init+0x58>)
 8001758:	2200      	movs	r2, #0
 800175a:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800175c:	4b06      	ldr	r3, [pc, #24]	; (8001778 <MX_USART6_UART_Init+0x58>)
 800175e:	2200      	movs	r2, #0
 8001760:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001762:	4805      	ldr	r0, [pc, #20]	; (8001778 <MX_USART6_UART_Init+0x58>)
 8001764:	f009 fa48 	bl	800abf8 <HAL_UART_Init>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 800176e:	f000 fa17 	bl	8001ba0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001772:	bf00      	nop
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	20008c58 	.word	0x20008c58
 800177c:	40011400 	.word	0x40011400

08001780 <MX_USB_OTG_HS_PCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_PCD_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8001784:	4b15      	ldr	r3, [pc, #84]	; (80017dc <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001786:	4a16      	ldr	r2, [pc, #88]	; (80017e0 <MX_USB_OTG_HS_PCD_Init+0x60>)
 8001788:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 800178a:	4b14      	ldr	r3, [pc, #80]	; (80017dc <MX_USB_OTG_HS_PCD_Init+0x5c>)
 800178c:	2209      	movs	r2, #9
 800178e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 8001790:	4b12      	ldr	r3, [pc, #72]	; (80017dc <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001792:	2200      	movs	r2, #0
 8001794:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8001796:	4b11      	ldr	r3, [pc, #68]	; (80017dc <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001798:	2200      	movs	r2, #0
 800179a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 800179c:	4b0f      	ldr	r3, [pc, #60]	; (80017dc <MX_USB_OTG_HS_PCD_Init+0x5c>)
 800179e:	2201      	movs	r2, #1
 80017a0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 80017a2:	4b0e      	ldr	r3, [pc, #56]	; (80017dc <MX_USB_OTG_HS_PCD_Init+0x5c>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 80017a8:	4b0c      	ldr	r3, [pc, #48]	; (80017dc <MX_USB_OTG_HS_PCD_Init+0x5c>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 80017ae:	4b0b      	ldr	r3, [pc, #44]	; (80017dc <MX_USB_OTG_HS_PCD_Init+0x5c>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 80017b4:	4b09      	ldr	r3, [pc, #36]	; (80017dc <MX_USB_OTG_HS_PCD_Init+0x5c>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 80017ba:	4b08      	ldr	r3, [pc, #32]	; (80017dc <MX_USB_OTG_HS_PCD_Init+0x5c>)
 80017bc:	2200      	movs	r2, #0
 80017be:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 80017c0:	4b06      	ldr	r3, [pc, #24]	; (80017dc <MX_USB_OTG_HS_PCD_Init+0x5c>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 80017c6:	4805      	ldr	r0, [pc, #20]	; (80017dc <MX_USB_OTG_HS_PCD_Init+0x5c>)
 80017c8:	f005 f926 	bl	8006a18 <HAL_PCD_Init>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <MX_USB_OTG_HS_PCD_Init+0x56>
  {
    Error_Handler();
 80017d2:	f000 f9e5 	bl	8001ba0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	20008384 	.word	0x20008384
 80017e0:	40040000 	.word	0x40040000

080017e4 <MX_WWDG_Init>:
  * @brief WWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_WWDG_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE END WWDG_Init 0 */

  /* USER CODE BEGIN WWDG_Init 1 */

  /* USER CODE END WWDG_Init 1 */
  hwwdg.Instance = WWDG;
 80017e8:	4b0c      	ldr	r3, [pc, #48]	; (800181c <MX_WWDG_Init+0x38>)
 80017ea:	4a0d      	ldr	r2, [pc, #52]	; (8001820 <MX_WWDG_Init+0x3c>)
 80017ec:	601a      	str	r2, [r3, #0]
  hwwdg.Init.Prescaler = WWDG_PRESCALER_1;
 80017ee:	4b0b      	ldr	r3, [pc, #44]	; (800181c <MX_WWDG_Init+0x38>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	605a      	str	r2, [r3, #4]
  hwwdg.Init.Window = 64;
 80017f4:	4b09      	ldr	r3, [pc, #36]	; (800181c <MX_WWDG_Init+0x38>)
 80017f6:	2240      	movs	r2, #64	; 0x40
 80017f8:	609a      	str	r2, [r3, #8]
  hwwdg.Init.Counter = 128;
 80017fa:	4b08      	ldr	r3, [pc, #32]	; (800181c <MX_WWDG_Init+0x38>)
 80017fc:	2280      	movs	r2, #128	; 0x80
 80017fe:	60da      	str	r2, [r3, #12]
  hwwdg.Init.EWIMode = WWDG_EWI_DISABLE;
 8001800:	4b06      	ldr	r3, [pc, #24]	; (800181c <MX_WWDG_Init+0x38>)
 8001802:	2200      	movs	r2, #0
 8001804:	611a      	str	r2, [r3, #16]
  if (HAL_WWDG_Init(&hwwdg) != HAL_OK)
 8001806:	4805      	ldr	r0, [pc, #20]	; (800181c <MX_WWDG_Init+0x38>)
 8001808:	f009 fe01 	bl	800b40e <HAL_WWDG_Init>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <MX_WWDG_Init+0x32>
  {
    Error_Handler();
 8001812:	f000 f9c5 	bl	8001ba0 <Error_Handler>
  }
  /* USER CODE BEGIN WWDG_Init 2 */

  /* USER CODE END WWDG_Init 2 */

}
 8001816:	bf00      	nop
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	20008c44 	.word	0x20008c44
 8001820:	40002c00 	.word	0x40002c00

08001824 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b088      	sub	sp, #32
 8001828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800182a:	1d3b      	adds	r3, r7, #4
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
 8001830:	605a      	str	r2, [r3, #4]
 8001832:	609a      	str	r2, [r3, #8]
 8001834:	60da      	str	r2, [r3, #12]
 8001836:	611a      	str	r2, [r3, #16]
 8001838:	615a      	str	r2, [r3, #20]
 800183a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800183c:	4b1f      	ldr	r3, [pc, #124]	; (80018bc <MX_FMC_Init+0x98>)
 800183e:	4a20      	ldr	r2, [pc, #128]	; (80018c0 <MX_FMC_Init+0x9c>)
 8001840:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001842:	4b1e      	ldr	r3, [pc, #120]	; (80018bc <MX_FMC_Init+0x98>)
 8001844:	2200      	movs	r2, #0
 8001846:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001848:	4b1c      	ldr	r3, [pc, #112]	; (80018bc <MX_FMC_Init+0x98>)
 800184a:	2200      	movs	r2, #0
 800184c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800184e:	4b1b      	ldr	r3, [pc, #108]	; (80018bc <MX_FMC_Init+0x98>)
 8001850:	2204      	movs	r2, #4
 8001852:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8001854:	4b19      	ldr	r3, [pc, #100]	; (80018bc <MX_FMC_Init+0x98>)
 8001856:	2220      	movs	r2, #32
 8001858:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800185a:	4b18      	ldr	r3, [pc, #96]	; (80018bc <MX_FMC_Init+0x98>)
 800185c:	2240      	movs	r2, #64	; 0x40
 800185e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001860:	4b16      	ldr	r3, [pc, #88]	; (80018bc <MX_FMC_Init+0x98>)
 8001862:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001866:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001868:	4b14      	ldr	r3, [pc, #80]	; (80018bc <MX_FMC_Init+0x98>)
 800186a:	2200      	movs	r2, #0
 800186c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800186e:	4b13      	ldr	r3, [pc, #76]	; (80018bc <MX_FMC_Init+0x98>)
 8001870:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001874:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8001876:	4b11      	ldr	r3, [pc, #68]	; (80018bc <MX_FMC_Init+0x98>)
 8001878:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800187c:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800187e:	4b0f      	ldr	r3, [pc, #60]	; (80018bc <MX_FMC_Init+0x98>)
 8001880:	2200      	movs	r2, #0
 8001882:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001884:	2302      	movs	r3, #2
 8001886:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001888:	2307      	movs	r3, #7
 800188a:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 800188c:	2304      	movs	r3, #4
 800188e:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8001890:	2307      	movs	r3, #7
 8001892:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8001894:	2303      	movs	r3, #3
 8001896:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001898:	2302      	movs	r3, #2
 800189a:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 800189c:	2302      	movs	r3, #2
 800189e:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80018a0:	1d3b      	adds	r3, r7, #4
 80018a2:	4619      	mov	r1, r3
 80018a4:	4805      	ldr	r0, [pc, #20]	; (80018bc <MX_FMC_Init+0x98>)
 80018a6:	f008 f8d9 	bl	8009a5c <HAL_SDRAM_Init>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80018b0:	f000 f976 	bl	8001ba0 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80018b4:	bf00      	nop
 80018b6:	3720      	adds	r7, #32
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	20008df4 	.word	0x20008df4
 80018c0:	a0000140 	.word	0xa0000140

080018c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b090      	sub	sp, #64	; 0x40
 80018c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018ce:	2200      	movs	r2, #0
 80018d0:	601a      	str	r2, [r3, #0]
 80018d2:	605a      	str	r2, [r3, #4]
 80018d4:	609a      	str	r2, [r3, #8]
 80018d6:	60da      	str	r2, [r3, #12]
 80018d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80018da:	4b99      	ldr	r3, [pc, #612]	; (8001b40 <MX_GPIO_Init+0x27c>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	4a98      	ldr	r2, [pc, #608]	; (8001b40 <MX_GPIO_Init+0x27c>)
 80018e0:	f043 0310 	orr.w	r3, r3, #16
 80018e4:	6313      	str	r3, [r2, #48]	; 0x30
 80018e6:	4b96      	ldr	r3, [pc, #600]	; (8001b40 <MX_GPIO_Init+0x27c>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	f003 0310 	and.w	r3, r3, #16
 80018ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80018f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80018f2:	4b93      	ldr	r3, [pc, #588]	; (8001b40 <MX_GPIO_Init+0x27c>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	4a92      	ldr	r2, [pc, #584]	; (8001b40 <MX_GPIO_Init+0x27c>)
 80018f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018fc:	6313      	str	r3, [r2, #48]	; 0x30
 80018fe:	4b90      	ldr	r3, [pc, #576]	; (8001b40 <MX_GPIO_Init+0x27c>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001906:	627b      	str	r3, [r7, #36]	; 0x24
 8001908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800190a:	4b8d      	ldr	r3, [pc, #564]	; (8001b40 <MX_GPIO_Init+0x27c>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	4a8c      	ldr	r2, [pc, #560]	; (8001b40 <MX_GPIO_Init+0x27c>)
 8001910:	f043 0302 	orr.w	r3, r3, #2
 8001914:	6313      	str	r3, [r2, #48]	; 0x30
 8001916:	4b8a      	ldr	r3, [pc, #552]	; (8001b40 <MX_GPIO_Init+0x27c>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	623b      	str	r3, [r7, #32]
 8001920:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001922:	4b87      	ldr	r3, [pc, #540]	; (8001b40 <MX_GPIO_Init+0x27c>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001926:	4a86      	ldr	r2, [pc, #536]	; (8001b40 <MX_GPIO_Init+0x27c>)
 8001928:	f043 0308 	orr.w	r3, r3, #8
 800192c:	6313      	str	r3, [r2, #48]	; 0x30
 800192e:	4b84      	ldr	r3, [pc, #528]	; (8001b40 <MX_GPIO_Init+0x27c>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	f003 0308 	and.w	r3, r3, #8
 8001936:	61fb      	str	r3, [r7, #28]
 8001938:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800193a:	4b81      	ldr	r3, [pc, #516]	; (8001b40 <MX_GPIO_Init+0x27c>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	4a80      	ldr	r2, [pc, #512]	; (8001b40 <MX_GPIO_Init+0x27c>)
 8001940:	f043 0304 	orr.w	r3, r3, #4
 8001944:	6313      	str	r3, [r2, #48]	; 0x30
 8001946:	4b7e      	ldr	r3, [pc, #504]	; (8001b40 <MX_GPIO_Init+0x27c>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194a:	f003 0304 	and.w	r3, r3, #4
 800194e:	61bb      	str	r3, [r7, #24]
 8001950:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001952:	4b7b      	ldr	r3, [pc, #492]	; (8001b40 <MX_GPIO_Init+0x27c>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001956:	4a7a      	ldr	r2, [pc, #488]	; (8001b40 <MX_GPIO_Init+0x27c>)
 8001958:	f043 0301 	orr.w	r3, r3, #1
 800195c:	6313      	str	r3, [r2, #48]	; 0x30
 800195e:	4b78      	ldr	r3, [pc, #480]	; (8001b40 <MX_GPIO_Init+0x27c>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	617b      	str	r3, [r7, #20]
 8001968:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800196a:	4b75      	ldr	r3, [pc, #468]	; (8001b40 <MX_GPIO_Init+0x27c>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196e:	4a74      	ldr	r2, [pc, #464]	; (8001b40 <MX_GPIO_Init+0x27c>)
 8001970:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001974:	6313      	str	r3, [r2, #48]	; 0x30
 8001976:	4b72      	ldr	r3, [pc, #456]	; (8001b40 <MX_GPIO_Init+0x27c>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800197e:	613b      	str	r3, [r7, #16]
 8001980:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001982:	4b6f      	ldr	r3, [pc, #444]	; (8001b40 <MX_GPIO_Init+0x27c>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001986:	4a6e      	ldr	r2, [pc, #440]	; (8001b40 <MX_GPIO_Init+0x27c>)
 8001988:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800198c:	6313      	str	r3, [r2, #48]	; 0x30
 800198e:	4b6c      	ldr	r3, [pc, #432]	; (8001b40 <MX_GPIO_Init+0x27c>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001996:	60fb      	str	r3, [r7, #12]
 8001998:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800199a:	4b69      	ldr	r3, [pc, #420]	; (8001b40 <MX_GPIO_Init+0x27c>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199e:	4a68      	ldr	r2, [pc, #416]	; (8001b40 <MX_GPIO_Init+0x27c>)
 80019a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019a4:	6313      	str	r3, [r2, #48]	; 0x30
 80019a6:	4b66      	ldr	r3, [pc, #408]	; (8001b40 <MX_GPIO_Init+0x27c>)
 80019a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019ae:	60bb      	str	r3, [r7, #8]
 80019b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80019b2:	4b63      	ldr	r3, [pc, #396]	; (8001b40 <MX_GPIO_Init+0x27c>)
 80019b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b6:	4a62      	ldr	r2, [pc, #392]	; (8001b40 <MX_GPIO_Init+0x27c>)
 80019b8:	f043 0320 	orr.w	r3, r3, #32
 80019bc:	6313      	str	r3, [r2, #48]	; 0x30
 80019be:	4b60      	ldr	r3, [pc, #384]	; (8001b40 <MX_GPIO_Init+0x27c>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c2:	f003 0320 	and.w	r3, r3, #32
 80019c6:	607b      	str	r3, [r7, #4]
 80019c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019ca:	4b5d      	ldr	r3, [pc, #372]	; (8001b40 <MX_GPIO_Init+0x27c>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ce:	4a5c      	ldr	r2, [pc, #368]	; (8001b40 <MX_GPIO_Init+0x27c>)
 80019d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019d4:	6313      	str	r3, [r2, #48]	; 0x30
 80019d6:	4b5a      	ldr	r3, [pc, #360]	; (8001b40 <MX_GPIO_Init+0x27c>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019de:	603b      	str	r3, [r7, #0]
 80019e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DSI_RESET_GPIO_Port, DSI_RESET_Pin, GPIO_PIN_RESET);
 80019e2:	2200      	movs	r2, #0
 80019e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019e8:	4856      	ldr	r0, [pc, #344]	; (8001b44 <MX_GPIO_Init+0x280>)
 80019ea:	f003 fe91 	bl	8005710 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD_USER1_Pin Audio_INT_Pin WIFI_RST_Pin ARD_D8_Pin 
                           LD_USER2_Pin ARD_D7_Pin ARD_D4_Pin ARD_D2_Pin */
  GPIO_InitStruct.Pin = LD_USER1_Pin|Audio_INT_Pin|WIFI_RST_Pin|ARD_D8_Pin 
 80019ee:	f247 033b 	movw	r3, #28731	; 0x703b
 80019f2:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LD_USER2_Pin|ARD_D7_Pin|ARD_D4_Pin|ARD_D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019f4:	2300      	movs	r3, #0
 80019f6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f8:	2300      	movs	r3, #0
 80019fa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80019fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a00:	4619      	mov	r1, r3
 8001a02:	4850      	ldr	r0, [pc, #320]	; (8001b44 <MX_GPIO_Init+0x280>)
 8001a04:	f003 fcda 	bl	80053bc <HAL_GPIO_Init>

  /*Configure GPIO pin : DFSDM_DATIN5_Pin */
  GPIO_InitStruct.Pin = DFSDM_DATIN5_Pin;
 8001a08:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0e:	2302      	movs	r3, #2
 8001a10:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a12:	2300      	movs	r3, #0
 8001a14:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a16:	2300      	movs	r3, #0
 8001a18:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DFSDM_DATIN5_GPIO_Port, &GPIO_InitStruct);
 8001a1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a22:	4619      	mov	r1, r3
 8001a24:	4848      	ldr	r0, [pc, #288]	; (8001b48 <MX_GPIO_Init+0x284>)
 8001a26:	f003 fcc9 	bl	80053bc <HAL_GPIO_Init>

  /*Configure GPIO pins : NC4_Pin NC5_Pin uSD_Detect_Pin LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = NC4_Pin|NC5_Pin|uSD_Detect_Pin|LCD_BL_CTRL_Pin;
 8001a2a:	f44f 4351 	mov.w	r3, #53504	; 0xd100
 8001a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a30:	2300      	movs	r3, #0
 8001a32:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a34:	2300      	movs	r3, #0
 8001a36:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001a38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4843      	ldr	r0, [pc, #268]	; (8001b4c <MX_GPIO_Init+0x288>)
 8001a40:	f003 fcbc 	bl	80053bc <HAL_GPIO_Init>

  /*Configure GPIO pins : NC3_Pin NC2_Pin NC1_Pin NC8_Pin 
                           NC7_Pin */
  GPIO_InitStruct.Pin = NC3_Pin|NC2_Pin|NC1_Pin|NC8_Pin 
 8001a44:	23f8      	movs	r3, #248	; 0xf8
 8001a46:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |NC7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001a50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a54:	4619      	mov	r1, r3
 8001a56:	483e      	ldr	r0, [pc, #248]	; (8001b50 <MX_GPIO_Init+0x28c>)
 8001a58:	f003 fcb0 	bl	80053bc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_RXER_Pin OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin|OTG_FS_OverCurrent_Pin;
 8001a5c:	2330      	movs	r3, #48	; 0x30
 8001a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a60:	2300      	movs	r3, #0
 8001a62:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a64:	2300      	movs	r3, #0
 8001a66:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	4839      	ldr	r0, [pc, #228]	; (8001b54 <MX_GPIO_Init+0x290>)
 8001a70:	f003 fca4 	bl	80053bc <HAL_GPIO_Init>

  /*Configure GPIO pin : DFSDM_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM_CKOUT_Pin;
 8001a74:	2308      	movs	r3, #8
 8001a76:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a78:	2302      	movs	r3, #2
 8001a7a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a80:	2300      	movs	r3, #0
 8001a82:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8001a84:	2303      	movs	r3, #3
 8001a86:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DFSDM_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8001a88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	4831      	ldr	r0, [pc, #196]	; (8001b54 <MX_GPIO_Init+0x290>)
 8001a90:	f003 fc94 	bl	80053bc <HAL_GPIO_Init>

  /*Configure GPIO pin : DSI_RESET_Pin */
  GPIO_InitStruct.Pin = DSI_RESET_Pin;
 8001a94:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DSI_RESET_GPIO_Port, &GPIO_InitStruct);
 8001aa6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001aaa:	4619      	mov	r1, r3
 8001aac:	4825      	ldr	r0, [pc, #148]	; (8001b44 <MX_GPIO_Init+0x280>)
 8001aae:	f003 fc85 	bl	80053bc <HAL_GPIO_Init>

  /*Configure GPIO pin : CEC_CLK_Pin */
  GPIO_InitStruct.Pin = CEC_CLK_Pin;
 8001ab2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab8:	2302      	movs	r3, #2
 8001aba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abc:	2300      	movs	r3, #0
 8001abe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(CEC_CLK_GPIO_Port, &GPIO_InitStruct);
 8001ac8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001acc:	4619      	mov	r1, r3
 8001ace:	4822      	ldr	r0, [pc, #136]	; (8001b58 <MX_GPIO_Init+0x294>)
 8001ad0:	f003 fc74 	bl	80053bc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001ad4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001ada:	4b20      	ldr	r3, [pc, #128]	; (8001b5c <MX_GPIO_Init+0x298>)
 8001adc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001ae2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	4818      	ldr	r0, [pc, #96]	; (8001b4c <MX_GPIO_Init+0x288>)
 8001aea:	f003 fc67 	bl	80053bc <HAL_GPIO_Init>

  /*Configure GPIO pins : EXT_SDA_Pin EXT_SCL_Pin */
  GPIO_InitStruct.Pin = EXT_SDA_Pin|EXT_SCL_Pin;
 8001aee:	2348      	movs	r3, #72	; 0x48
 8001af0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001af2:	2300      	movs	r3, #0
 8001af4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af6:	2300      	movs	r3, #0
 8001af8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001afa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001afe:	4619      	mov	r1, r3
 8001b00:	4817      	ldr	r0, [pc, #92]	; (8001b60 <MX_GPIO_Init+0x29c>)
 8001b02:	f003 fc5b 	bl	80053bc <HAL_GPIO_Init>

  /*Configure GPIO pin : B_USER_Pin */
  GPIO_InitStruct.Pin = B_USER_Pin;
 8001b06:	2301      	movs	r3, #1
 8001b08:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b0a:	4b16      	ldr	r3, [pc, #88]	; (8001b64 <MX_GPIO_Init+0x2a0>)
 8001b0c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(B_USER_GPIO_Port, &GPIO_InitStruct);
 8001b12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b16:	4619      	mov	r1, r3
 8001b18:	480f      	ldr	r0, [pc, #60]	; (8001b58 <MX_GPIO_Init+0x294>)
 8001b1a:	f003 fc4f 	bl	80053bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001b1e:	2380      	movs	r3, #128	; 0x80
 8001b20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b22:	2300      	movs	r3, #0
 8001b24:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b26:	2300      	movs	r3, #0
 8001b28:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001b2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b2e:	4619      	mov	r1, r3
 8001b30:	480d      	ldr	r0, [pc, #52]	; (8001b68 <MX_GPIO_Init+0x2a4>)
 8001b32:	f003 fc43 	bl	80053bc <HAL_GPIO_Init>

}
 8001b36:	bf00      	nop
 8001b38:	3740      	adds	r7, #64	; 0x40
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	40023800 	.word	0x40023800
 8001b44:	40022400 	.word	0x40022400
 8001b48:	40020800 	.word	0x40020800
 8001b4c:	40022000 	.word	0x40022000
 8001b50:	40022800 	.word	0x40022800
 8001b54:	40020c00 	.word	0x40020c00
 8001b58:	40020000 	.word	0x40020000
 8001b5c:	10120000 	.word	0x10120000
 8001b60:	40021800 	.word	0x40021800
 8001b64:	10110000 	.word	0x10110000
 8001b68:	40021c00 	.word	0x40021c00

08001b6c <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001b74:	2001      	movs	r0, #1
 8001b76:	f00a fe57 	bl	800c828 <osDelay>
 8001b7a:	e7fb      	b.n	8001b74 <StartDefaultTask+0x8>

08001b7c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a04      	ldr	r2, [pc, #16]	; (8001b9c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d101      	bne.n	8001b92 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001b8e:	f001 fa13 	bl	8002fb8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001b92:	bf00      	nop
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	40001000 	.word	0x40001000

08001ba0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001ba4:	bf00      	nop
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
	...

08001bb0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001bb6:	4b11      	ldr	r3, [pc, #68]	; (8001bfc <HAL_MspInit+0x4c>)
 8001bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bba:	4a10      	ldr	r2, [pc, #64]	; (8001bfc <HAL_MspInit+0x4c>)
 8001bbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bc0:	6413      	str	r3, [r2, #64]	; 0x40
 8001bc2:	4b0e      	ldr	r3, [pc, #56]	; (8001bfc <HAL_MspInit+0x4c>)
 8001bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bca:	607b      	str	r3, [r7, #4]
 8001bcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bce:	4b0b      	ldr	r3, [pc, #44]	; (8001bfc <HAL_MspInit+0x4c>)
 8001bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd2:	4a0a      	ldr	r2, [pc, #40]	; (8001bfc <HAL_MspInit+0x4c>)
 8001bd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bd8:	6453      	str	r3, [r2, #68]	; 0x44
 8001bda:	4b08      	ldr	r3, [pc, #32]	; (8001bfc <HAL_MspInit+0x4c>)
 8001bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001be2:	603b      	str	r3, [r7, #0]
 8001be4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001be6:	2200      	movs	r2, #0
 8001be8:	210f      	movs	r1, #15
 8001bea:	f06f 0001 	mvn.w	r0, #1
 8001bee:	f001 feb7 	bl	8003960 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bf2:	bf00      	nop
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	40023800 	.word	0x40023800

08001c00 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b08c      	sub	sp, #48	; 0x30
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c08:	f107 031c 	add.w	r3, r7, #28
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	601a      	str	r2, [r3, #0]
 8001c10:	605a      	str	r2, [r3, #4]
 8001c12:	609a      	str	r2, [r3, #8]
 8001c14:	60da      	str	r2, [r3, #12]
 8001c16:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a36      	ldr	r2, [pc, #216]	; (8001cf8 <HAL_ADC_MspInit+0xf8>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d13c      	bne.n	8001c9c <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c22:	4b36      	ldr	r3, [pc, #216]	; (8001cfc <HAL_ADC_MspInit+0xfc>)
 8001c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c26:	4a35      	ldr	r2, [pc, #212]	; (8001cfc <HAL_ADC_MspInit+0xfc>)
 8001c28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c2c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c2e:	4b33      	ldr	r3, [pc, #204]	; (8001cfc <HAL_ADC_MspInit+0xfc>)
 8001c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c36:	61bb      	str	r3, [r7, #24]
 8001c38:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c3a:	4b30      	ldr	r3, [pc, #192]	; (8001cfc <HAL_ADC_MspInit+0xfc>)
 8001c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3e:	4a2f      	ldr	r2, [pc, #188]	; (8001cfc <HAL_ADC_MspInit+0xfc>)
 8001c40:	f043 0304 	orr.w	r3, r3, #4
 8001c44:	6313      	str	r3, [r2, #48]	; 0x30
 8001c46:	4b2d      	ldr	r3, [pc, #180]	; (8001cfc <HAL_ADC_MspInit+0xfc>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4a:	f003 0304 	and.w	r3, r3, #4
 8001c4e:	617b      	str	r3, [r7, #20]
 8001c50:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c52:	4b2a      	ldr	r3, [pc, #168]	; (8001cfc <HAL_ADC_MspInit+0xfc>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c56:	4a29      	ldr	r2, [pc, #164]	; (8001cfc <HAL_ADC_MspInit+0xfc>)
 8001c58:	f043 0301 	orr.w	r3, r3, #1
 8001c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c5e:	4b27      	ldr	r3, [pc, #156]	; (8001cfc <HAL_ADC_MspInit+0xfc>)
 8001c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	613b      	str	r3, [r7, #16]
 8001c68:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration    
    PC2     ------> ADC1_IN12
    PA4     ------> ADC1_IN4
    PA6     ------> ADC1_IN6 
    */
    GPIO_InitStruct.Pin = ARD_A2_Pin;
 8001c6a:	2304      	movs	r3, #4
 8001c6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c72:	2300      	movs	r3, #0
 8001c74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_A2_GPIO_Port, &GPIO_InitStruct);
 8001c76:	f107 031c 	add.w	r3, r7, #28
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4820      	ldr	r0, [pc, #128]	; (8001d00 <HAL_ADC_MspInit+0x100>)
 8001c7e:	f003 fb9d 	bl	80053bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A1_Pin|ARD_A0_Pin;
 8001c82:	2350      	movs	r3, #80	; 0x50
 8001c84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c86:	2303      	movs	r3, #3
 8001c88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c8e:	f107 031c 	add.w	r3, r7, #28
 8001c92:	4619      	mov	r1, r3
 8001c94:	481b      	ldr	r0, [pc, #108]	; (8001d04 <HAL_ADC_MspInit+0x104>)
 8001c96:	f003 fb91 	bl	80053bc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001c9a:	e029      	b.n	8001cf0 <HAL_ADC_MspInit+0xf0>
  else if(hadc->Instance==ADC3)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a19      	ldr	r2, [pc, #100]	; (8001d08 <HAL_ADC_MspInit+0x108>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d124      	bne.n	8001cf0 <HAL_ADC_MspInit+0xf0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001ca6:	4b15      	ldr	r3, [pc, #84]	; (8001cfc <HAL_ADC_MspInit+0xfc>)
 8001ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001caa:	4a14      	ldr	r2, [pc, #80]	; (8001cfc <HAL_ADC_MspInit+0xfc>)
 8001cac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cb0:	6453      	str	r3, [r2, #68]	; 0x44
 8001cb2:	4b12      	ldr	r3, [pc, #72]	; (8001cfc <HAL_ADC_MspInit+0xfc>)
 8001cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cba:	60fb      	str	r3, [r7, #12]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001cbe:	4b0f      	ldr	r3, [pc, #60]	; (8001cfc <HAL_ADC_MspInit+0xfc>)
 8001cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc2:	4a0e      	ldr	r2, [pc, #56]	; (8001cfc <HAL_ADC_MspInit+0xfc>)
 8001cc4:	f043 0320 	orr.w	r3, r3, #32
 8001cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cca:	4b0c      	ldr	r3, [pc, #48]	; (8001cfc <HAL_ADC_MspInit+0xfc>)
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cce:	f003 0320 	and.w	r3, r3, #32
 8001cd2:	60bb      	str	r3, [r7, #8]
 8001cd4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_A1_Pin|ARDUINO_A2_Pin|ARDUINO_A3_Pin;
 8001cd6:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001cda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ce4:	f107 031c 	add.w	r3, r7, #28
 8001ce8:	4619      	mov	r1, r3
 8001cea:	4808      	ldr	r0, [pc, #32]	; (8001d0c <HAL_ADC_MspInit+0x10c>)
 8001cec:	f003 fb66 	bl	80053bc <HAL_GPIO_Init>
}
 8001cf0:	bf00      	nop
 8001cf2:	3730      	adds	r7, #48	; 0x30
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	40012000 	.word	0x40012000
 8001cfc:	40023800 	.word	0x40023800
 8001d00:	40020800 	.word	0x40020800
 8001d04:	40020000 	.word	0x40020000
 8001d08:	40012200 	.word	0x40012200
 8001d0c:	40021400 	.word	0x40021400

08001d10 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b085      	sub	sp, #20
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a0a      	ldr	r2, [pc, #40]	; (8001d48 <HAL_CRC_MspInit+0x38>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d10b      	bne.n	8001d3a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001d22:	4b0a      	ldr	r3, [pc, #40]	; (8001d4c <HAL_CRC_MspInit+0x3c>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d26:	4a09      	ldr	r2, [pc, #36]	; (8001d4c <HAL_CRC_MspInit+0x3c>)
 8001d28:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d2e:	4b07      	ldr	r3, [pc, #28]	; (8001d4c <HAL_CRC_MspInit+0x3c>)
 8001d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d36:	60fb      	str	r3, [r7, #12]
 8001d38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001d3a:	bf00      	nop
 8001d3c:	3714      	adds	r7, #20
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	40023000 	.word	0x40023000
 8001d4c:	40023800 	.word	0x40023800

08001d50 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a0d      	ldr	r2, [pc, #52]	; (8001d94 <HAL_DMA2D_MspInit+0x44>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d113      	bne.n	8001d8a <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001d62:	4b0d      	ldr	r3, [pc, #52]	; (8001d98 <HAL_DMA2D_MspInit+0x48>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d66:	4a0c      	ldr	r2, [pc, #48]	; (8001d98 <HAL_DMA2D_MspInit+0x48>)
 8001d68:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d6e:	4b0a      	ldr	r3, [pc, #40]	; (8001d98 <HAL_DMA2D_MspInit+0x48>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d76:	60fb      	str	r3, [r7, #12]
 8001d78:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	2105      	movs	r1, #5
 8001d7e:	205a      	movs	r0, #90	; 0x5a
 8001d80:	f001 fdee 	bl	8003960 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001d84:	205a      	movs	r0, #90	; 0x5a
 8001d86:	f001 fe07 	bl	8003998 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001d8a:	bf00      	nop
 8001d8c:	3710      	adds	r7, #16
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	4002b000 	.word	0x4002b000
 8001d98:	40023800 	.word	0x40023800

08001d9c <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b08a      	sub	sp, #40	; 0x28
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da4:	f107 0314 	add.w	r3, r7, #20
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	605a      	str	r2, [r3, #4]
 8001dae:	609a      	str	r2, [r3, #8]
 8001db0:	60da      	str	r2, [r3, #12]
 8001db2:	611a      	str	r2, [r3, #16]
  if(hdsi->Instance==DSI)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a1b      	ldr	r2, [pc, #108]	; (8001e28 <HAL_DSI_MspInit+0x8c>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d12f      	bne.n	8001e1e <HAL_DSI_MspInit+0x82>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8001dbe:	4b1b      	ldr	r3, [pc, #108]	; (8001e2c <HAL_DSI_MspInit+0x90>)
 8001dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc2:	4a1a      	ldr	r2, [pc, #104]	; (8001e2c <HAL_DSI_MspInit+0x90>)
 8001dc4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001dc8:	6453      	str	r3, [r2, #68]	; 0x44
 8001dca:	4b18      	ldr	r3, [pc, #96]	; (8001e2c <HAL_DSI_MspInit+0x90>)
 8001dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001dd2:	613b      	str	r3, [r7, #16]
 8001dd4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001dd6:	4b15      	ldr	r3, [pc, #84]	; (8001e2c <HAL_DSI_MspInit+0x90>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dda:	4a14      	ldr	r2, [pc, #80]	; (8001e2c <HAL_DSI_MspInit+0x90>)
 8001ddc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001de0:	6313      	str	r3, [r2, #48]	; 0x30
 8001de2:	4b12      	ldr	r3, [pc, #72]	; (8001e2c <HAL_DSI_MspInit+0x90>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dea:	60fb      	str	r3, [r7, #12]
 8001dec:	68fb      	ldr	r3, [r7, #12]
    /**DSIHOST GPIO Configuration    
    PJ2     ------> DSIHOST_TE 
    */
    GPIO_InitStruct.Pin = DSIHOST_TE_Pin;
 8001dee:	2304      	movs	r3, #4
 8001df0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df2:	2302      	movs	r3, #2
 8001df4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df6:	2300      	movs	r3, #0
 8001df8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 8001dfe:	230d      	movs	r3, #13
 8001e00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DSIHOST_TE_GPIO_Port, &GPIO_InitStruct);
 8001e02:	f107 0314 	add.w	r3, r7, #20
 8001e06:	4619      	mov	r1, r3
 8001e08:	4809      	ldr	r0, [pc, #36]	; (8001e30 <HAL_DSI_MspInit+0x94>)
 8001e0a:	f003 fad7 	bl	80053bc <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 5, 0);
 8001e0e:	2200      	movs	r2, #0
 8001e10:	2105      	movs	r1, #5
 8001e12:	2062      	movs	r0, #98	; 0x62
 8001e14:	f001 fda4 	bl	8003960 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 8001e18:	2062      	movs	r0, #98	; 0x62
 8001e1a:	f001 fdbd 	bl	8003998 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 8001e1e:	bf00      	nop
 8001e20:	3728      	adds	r7, #40	; 0x28
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	40016c00 	.word	0x40016c00
 8001e2c:	40023800 	.word	0x40023800
 8001e30:	40022400 	.word	0x40022400

08001e34 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b08e      	sub	sp, #56	; 0x38
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]
 8001e44:	605a      	str	r2, [r3, #4]
 8001e46:	609a      	str	r2, [r3, #8]
 8001e48:	60da      	str	r2, [r3, #12]
 8001e4a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a3f      	ldr	r2, [pc, #252]	; (8001f50 <HAL_ETH_MspInit+0x11c>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d178      	bne.n	8001f48 <HAL_ETH_MspInit+0x114>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001e56:	4b3f      	ldr	r3, [pc, #252]	; (8001f54 <HAL_ETH_MspInit+0x120>)
 8001e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5a:	4a3e      	ldr	r2, [pc, #248]	; (8001f54 <HAL_ETH_MspInit+0x120>)
 8001e5c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e60:	6313      	str	r3, [r2, #48]	; 0x30
 8001e62:	4b3c      	ldr	r3, [pc, #240]	; (8001f54 <HAL_ETH_MspInit+0x120>)
 8001e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e6a:	623b      	str	r3, [r7, #32]
 8001e6c:	6a3b      	ldr	r3, [r7, #32]
 8001e6e:	4b39      	ldr	r3, [pc, #228]	; (8001f54 <HAL_ETH_MspInit+0x120>)
 8001e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e72:	4a38      	ldr	r2, [pc, #224]	; (8001f54 <HAL_ETH_MspInit+0x120>)
 8001e74:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001e78:	6313      	str	r3, [r2, #48]	; 0x30
 8001e7a:	4b36      	ldr	r3, [pc, #216]	; (8001f54 <HAL_ETH_MspInit+0x120>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e82:	61fb      	str	r3, [r7, #28]
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	4b33      	ldr	r3, [pc, #204]	; (8001f54 <HAL_ETH_MspInit+0x120>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8a:	4a32      	ldr	r2, [pc, #200]	; (8001f54 <HAL_ETH_MspInit+0x120>)
 8001e8c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001e90:	6313      	str	r3, [r2, #48]	; 0x30
 8001e92:	4b30      	ldr	r3, [pc, #192]	; (8001f54 <HAL_ETH_MspInit+0x120>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e96:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001e9a:	61bb      	str	r3, [r7, #24]
 8001e9c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e9e:	4b2d      	ldr	r3, [pc, #180]	; (8001f54 <HAL_ETH_MspInit+0x120>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea2:	4a2c      	ldr	r2, [pc, #176]	; (8001f54 <HAL_ETH_MspInit+0x120>)
 8001ea4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eaa:	4b2a      	ldr	r3, [pc, #168]	; (8001f54 <HAL_ETH_MspInit+0x120>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eb2:	617b      	str	r3, [r7, #20]
 8001eb4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eb6:	4b27      	ldr	r3, [pc, #156]	; (8001f54 <HAL_ETH_MspInit+0x120>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eba:	4a26      	ldr	r2, [pc, #152]	; (8001f54 <HAL_ETH_MspInit+0x120>)
 8001ebc:	f043 0304 	orr.w	r3, r3, #4
 8001ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ec2:	4b24      	ldr	r3, [pc, #144]	; (8001f54 <HAL_ETH_MspInit+0x120>)
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec6:	f003 0304 	and.w	r3, r3, #4
 8001eca:	613b      	str	r3, [r7, #16]
 8001ecc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ece:	4b21      	ldr	r3, [pc, #132]	; (8001f54 <HAL_ETH_MspInit+0x120>)
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed2:	4a20      	ldr	r2, [pc, #128]	; (8001f54 <HAL_ETH_MspInit+0x120>)
 8001ed4:	f043 0301 	orr.w	r3, r3, #1
 8001ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eda:	4b1e      	ldr	r3, [pc, #120]	; (8001f54 <HAL_ETH_MspInit+0x120>)
 8001edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ede:	f003 0301 	and.w	r3, r3, #1
 8001ee2:	60fb      	str	r3, [r7, #12]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV 
    */
    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8001ee6:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8001eea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eec:	2302      	movs	r3, #2
 8001eee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ef8:	230b      	movs	r3, #11
 8001efa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001efc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f00:	4619      	mov	r1, r3
 8001f02:	4815      	ldr	r0, [pc, #84]	; (8001f58 <HAL_ETH_MspInit+0x124>)
 8001f04:	f003 fa5a 	bl	80053bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001f08:	2332      	movs	r3, #50	; 0x32
 8001f0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f10:	2300      	movs	r3, #0
 8001f12:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f14:	2303      	movs	r3, #3
 8001f16:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001f18:	230b      	movs	r3, #11
 8001f1a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f20:	4619      	mov	r1, r3
 8001f22:	480e      	ldr	r0, [pc, #56]	; (8001f5c <HAL_ETH_MspInit+0x128>)
 8001f24:	f003 fa4a 	bl	80053bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001f28:	2386      	movs	r3, #134	; 0x86
 8001f2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f2c:	2302      	movs	r3, #2
 8001f2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f30:	2300      	movs	r3, #0
 8001f32:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f34:	2303      	movs	r3, #3
 8001f36:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001f38:	230b      	movs	r3, #11
 8001f3a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f40:	4619      	mov	r1, r3
 8001f42:	4807      	ldr	r0, [pc, #28]	; (8001f60 <HAL_ETH_MspInit+0x12c>)
 8001f44:	f003 fa3a 	bl	80053bc <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001f48:	bf00      	nop
 8001f4a:	3738      	adds	r7, #56	; 0x38
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	40028000 	.word	0x40028000
 8001f54:	40023800 	.word	0x40023800
 8001f58:	40021800 	.word	0x40021800
 8001f5c:	40020800 	.word	0x40020800
 8001f60:	40020000 	.word	0x40020000

08001f64 <HAL_CEC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcec: CEC handle pointer
* @retval None
*/
void HAL_CEC_MspInit(CEC_HandleTypeDef* hcec)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b08a      	sub	sp, #40	; 0x28
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f6c:	f107 0314 	add.w	r3, r7, #20
 8001f70:	2200      	movs	r2, #0
 8001f72:	601a      	str	r2, [r3, #0]
 8001f74:	605a      	str	r2, [r3, #4]
 8001f76:	609a      	str	r2, [r3, #8]
 8001f78:	60da      	str	r2, [r3, #12]
 8001f7a:	611a      	str	r2, [r3, #16]
  if(hcec->Instance==CEC)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a1b      	ldr	r2, [pc, #108]	; (8001ff0 <HAL_CEC_MspInit+0x8c>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d130      	bne.n	8001fe8 <HAL_CEC_MspInit+0x84>
  {
  /* USER CODE BEGIN CEC_MspInit 0 */

  /* USER CODE END CEC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CEC_CLK_ENABLE();
 8001f86:	4b1b      	ldr	r3, [pc, #108]	; (8001ff4 <HAL_CEC_MspInit+0x90>)
 8001f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8a:	4a1a      	ldr	r2, [pc, #104]	; (8001ff4 <HAL_CEC_MspInit+0x90>)
 8001f8c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001f90:	6413      	str	r3, [r2, #64]	; 0x40
 8001f92:	4b18      	ldr	r3, [pc, #96]	; (8001ff4 <HAL_CEC_MspInit+0x90>)
 8001f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f96:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f9a:	613b      	str	r3, [r7, #16]
 8001f9c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f9e:	4b15      	ldr	r3, [pc, #84]	; (8001ff4 <HAL_CEC_MspInit+0x90>)
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa2:	4a14      	ldr	r2, [pc, #80]	; (8001ff4 <HAL_CEC_MspInit+0x90>)
 8001fa4:	f043 0301 	orr.w	r3, r3, #1
 8001fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8001faa:	4b12      	ldr	r3, [pc, #72]	; (8001ff4 <HAL_CEC_MspInit+0x90>)
 8001fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fae:	f003 0301 	and.w	r3, r3, #1
 8001fb2:	60fb      	str	r3, [r7, #12]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
    /**HDMI_CEC GPIO Configuration    
    PA15     ------> CEC 
    */
    GPIO_InitStruct.Pin = CEC_Pin;
 8001fb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001fba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fbc:	2312      	movs	r3, #18
 8001fbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_CEC;
 8001fc8:	2304      	movs	r3, #4
 8001fca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(CEC_GPIO_Port, &GPIO_InitStruct);
 8001fcc:	f107 0314 	add.w	r3, r7, #20
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	4809      	ldr	r0, [pc, #36]	; (8001ff8 <HAL_CEC_MspInit+0x94>)
 8001fd4:	f003 f9f2 	bl	80053bc <HAL_GPIO_Init>

    /* CEC interrupt Init */
    HAL_NVIC_SetPriority(CEC_IRQn, 5, 0);
 8001fd8:	2200      	movs	r2, #0
 8001fda:	2105      	movs	r1, #5
 8001fdc:	205e      	movs	r0, #94	; 0x5e
 8001fde:	f001 fcbf 	bl	8003960 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_IRQn);
 8001fe2:	205e      	movs	r0, #94	; 0x5e
 8001fe4:	f001 fcd8 	bl	8003998 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CEC_MspInit 1 */

  /* USER CODE END CEC_MspInit 1 */
  }

}
 8001fe8:	bf00      	nop
 8001fea:	3728      	adds	r7, #40	; 0x28
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	40006c00 	.word	0x40006c00
 8001ff4:	40023800 	.word	0x40023800
 8001ff8:	40020000 	.word	0x40020000

08001ffc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b08c      	sub	sp, #48	; 0x30
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002004:	f107 031c 	add.w	r3, r7, #28
 8002008:	2200      	movs	r2, #0
 800200a:	601a      	str	r2, [r3, #0]
 800200c:	605a      	str	r2, [r3, #4]
 800200e:	609a      	str	r2, [r3, #8]
 8002010:	60da      	str	r2, [r3, #12]
 8002012:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a3d      	ldr	r2, [pc, #244]	; (8002110 <HAL_I2C_MspInit+0x114>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d129      	bne.n	8002072 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800201e:	4b3d      	ldr	r3, [pc, #244]	; (8002114 <HAL_I2C_MspInit+0x118>)
 8002020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002022:	4a3c      	ldr	r2, [pc, #240]	; (8002114 <HAL_I2C_MspInit+0x118>)
 8002024:	f043 0302 	orr.w	r3, r3, #2
 8002028:	6313      	str	r3, [r2, #48]	; 0x30
 800202a:	4b3a      	ldr	r3, [pc, #232]	; (8002114 <HAL_I2C_MspInit+0x118>)
 800202c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202e:	f003 0302 	and.w	r3, r3, #2
 8002032:	61bb      	str	r3, [r7, #24]
 8002034:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8002036:	f44f 7340 	mov.w	r3, #768	; 0x300
 800203a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800203c:	2312      	movs	r3, #18
 800203e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002040:	2301      	movs	r3, #1
 8002042:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002044:	2300      	movs	r3, #0
 8002046:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002048:	2304      	movs	r3, #4
 800204a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800204c:	f107 031c 	add.w	r3, r7, #28
 8002050:	4619      	mov	r1, r3
 8002052:	4831      	ldr	r0, [pc, #196]	; (8002118 <HAL_I2C_MspInit+0x11c>)
 8002054:	f003 f9b2 	bl	80053bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002058:	4b2e      	ldr	r3, [pc, #184]	; (8002114 <HAL_I2C_MspInit+0x118>)
 800205a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205c:	4a2d      	ldr	r2, [pc, #180]	; (8002114 <HAL_I2C_MspInit+0x118>)
 800205e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002062:	6413      	str	r3, [r2, #64]	; 0x40
 8002064:	4b2b      	ldr	r3, [pc, #172]	; (8002114 <HAL_I2C_MspInit+0x118>)
 8002066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002068:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800206c:	617b      	str	r3, [r7, #20]
 800206e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8002070:	e049      	b.n	8002106 <HAL_I2C_MspInit+0x10a>
  else if(hi2c->Instance==I2C4)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a29      	ldr	r2, [pc, #164]	; (800211c <HAL_I2C_MspInit+0x120>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d144      	bne.n	8002106 <HAL_I2C_MspInit+0x10a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800207c:	4b25      	ldr	r3, [pc, #148]	; (8002114 <HAL_I2C_MspInit+0x118>)
 800207e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002080:	4a24      	ldr	r2, [pc, #144]	; (8002114 <HAL_I2C_MspInit+0x118>)
 8002082:	f043 0302 	orr.w	r3, r3, #2
 8002086:	6313      	str	r3, [r2, #48]	; 0x30
 8002088:	4b22      	ldr	r3, [pc, #136]	; (8002114 <HAL_I2C_MspInit+0x118>)
 800208a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208c:	f003 0302 	and.w	r3, r3, #2
 8002090:	613b      	str	r3, [r7, #16]
 8002092:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002094:	4b1f      	ldr	r3, [pc, #124]	; (8002114 <HAL_I2C_MspInit+0x118>)
 8002096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002098:	4a1e      	ldr	r2, [pc, #120]	; (8002114 <HAL_I2C_MspInit+0x118>)
 800209a:	f043 0308 	orr.w	r3, r3, #8
 800209e:	6313      	str	r3, [r2, #48]	; 0x30
 80020a0:	4b1c      	ldr	r3, [pc, #112]	; (8002114 <HAL_I2C_MspInit+0x118>)
 80020a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a4:	f003 0308 	and.w	r3, r3, #8
 80020a8:	60fb      	str	r3, [r7, #12]
 80020aa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = AUDIO_SDA_Pin;
 80020ac:	2380      	movs	r3, #128	; 0x80
 80020ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020b0:	2312      	movs	r3, #18
 80020b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020b4:	2301      	movs	r3, #1
 80020b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020b8:	2303      	movs	r3, #3
 80020ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_I2C4;
 80020bc:	230b      	movs	r3, #11
 80020be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(AUDIO_SDA_GPIO_Port, &GPIO_InitStruct);
 80020c0:	f107 031c 	add.w	r3, r7, #28
 80020c4:	4619      	mov	r1, r3
 80020c6:	4814      	ldr	r0, [pc, #80]	; (8002118 <HAL_I2C_MspInit+0x11c>)
 80020c8:	f003 f978 	bl	80053bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = AUDIO_SCL_Pin;
 80020cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020d2:	2312      	movs	r3, #18
 80020d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020d6:	2301      	movs	r3, #1
 80020d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020da:	2303      	movs	r3, #3
 80020dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80020de:	2304      	movs	r3, #4
 80020e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(AUDIO_SCL_GPIO_Port, &GPIO_InitStruct);
 80020e2:	f107 031c 	add.w	r3, r7, #28
 80020e6:	4619      	mov	r1, r3
 80020e8:	480d      	ldr	r0, [pc, #52]	; (8002120 <HAL_I2C_MspInit+0x124>)
 80020ea:	f003 f967 	bl	80053bc <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 80020ee:	4b09      	ldr	r3, [pc, #36]	; (8002114 <HAL_I2C_MspInit+0x118>)
 80020f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f2:	4a08      	ldr	r2, [pc, #32]	; (8002114 <HAL_I2C_MspInit+0x118>)
 80020f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020f8:	6413      	str	r3, [r2, #64]	; 0x40
 80020fa:	4b06      	ldr	r3, [pc, #24]	; (8002114 <HAL_I2C_MspInit+0x118>)
 80020fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002102:	60bb      	str	r3, [r7, #8]
 8002104:	68bb      	ldr	r3, [r7, #8]
}
 8002106:	bf00      	nop
 8002108:	3730      	adds	r7, #48	; 0x30
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	40005400 	.word	0x40005400
 8002114:	40023800 	.word	0x40023800
 8002118:	40020400 	.word	0x40020400
 800211c:	40006000 	.word	0x40006000
 8002120:	40020c00 	.word	0x40020c00

08002124 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  if(hltdc->Instance==LTDC)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a0d      	ldr	r2, [pc, #52]	; (8002168 <HAL_LTDC_MspInit+0x44>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d113      	bne.n	800215e <HAL_LTDC_MspInit+0x3a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002136:	4b0d      	ldr	r3, [pc, #52]	; (800216c <HAL_LTDC_MspInit+0x48>)
 8002138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213a:	4a0c      	ldr	r2, [pc, #48]	; (800216c <HAL_LTDC_MspInit+0x48>)
 800213c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002140:	6453      	str	r3, [r2, #68]	; 0x44
 8002142:	4b0a      	ldr	r3, [pc, #40]	; (800216c <HAL_LTDC_MspInit+0x48>)
 8002144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002146:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800214a:	60fb      	str	r3, [r7, #12]
 800214c:	68fb      	ldr	r3, [r7, #12]
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800214e:	2200      	movs	r2, #0
 8002150:	2105      	movs	r1, #5
 8002152:	2058      	movs	r0, #88	; 0x58
 8002154:	f001 fc04 	bl	8003960 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002158:	2058      	movs	r0, #88	; 0x58
 800215a:	f001 fc1d 	bl	8003998 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800215e:	bf00      	nop
 8002160:	3710      	adds	r7, #16
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	40016800 	.word	0x40016800
 800216c:	40023800 	.word	0x40023800

08002170 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b08c      	sub	sp, #48	; 0x30
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002178:	f107 031c 	add.w	r3, r7, #28
 800217c:	2200      	movs	r2, #0
 800217e:	601a      	str	r2, [r3, #0]
 8002180:	605a      	str	r2, [r3, #4]
 8002182:	609a      	str	r2, [r3, #8]
 8002184:	60da      	str	r2, [r3, #12]
 8002186:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a4a      	ldr	r2, [pc, #296]	; (80022b8 <HAL_QSPI_MspInit+0x148>)
 800218e:	4293      	cmp	r3, r2
 8002190:	f040 808e 	bne.w	80022b0 <HAL_QSPI_MspInit+0x140>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002194:	4b49      	ldr	r3, [pc, #292]	; (80022bc <HAL_QSPI_MspInit+0x14c>)
 8002196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002198:	4a48      	ldr	r2, [pc, #288]	; (80022bc <HAL_QSPI_MspInit+0x14c>)
 800219a:	f043 0302 	orr.w	r3, r3, #2
 800219e:	6393      	str	r3, [r2, #56]	; 0x38
 80021a0:	4b46      	ldr	r3, [pc, #280]	; (80022bc <HAL_QSPI_MspInit+0x14c>)
 80021a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021a4:	f003 0302 	and.w	r3, r3, #2
 80021a8:	61bb      	str	r3, [r7, #24]
 80021aa:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80021ac:	4b43      	ldr	r3, [pc, #268]	; (80022bc <HAL_QSPI_MspInit+0x14c>)
 80021ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b0:	4a42      	ldr	r2, [pc, #264]	; (80022bc <HAL_QSPI_MspInit+0x14c>)
 80021b2:	f043 0310 	orr.w	r3, r3, #16
 80021b6:	6313      	str	r3, [r2, #48]	; 0x30
 80021b8:	4b40      	ldr	r3, [pc, #256]	; (80022bc <HAL_QSPI_MspInit+0x14c>)
 80021ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021bc:	f003 0310 	and.w	r3, r3, #16
 80021c0:	617b      	str	r3, [r7, #20]
 80021c2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021c4:	4b3d      	ldr	r3, [pc, #244]	; (80022bc <HAL_QSPI_MspInit+0x14c>)
 80021c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c8:	4a3c      	ldr	r2, [pc, #240]	; (80022bc <HAL_QSPI_MspInit+0x14c>)
 80021ca:	f043 0302 	orr.w	r3, r3, #2
 80021ce:	6313      	str	r3, [r2, #48]	; 0x30
 80021d0:	4b3a      	ldr	r3, [pc, #232]	; (80022bc <HAL_QSPI_MspInit+0x14c>)
 80021d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d4:	f003 0302 	and.w	r3, r3, #2
 80021d8:	613b      	str	r3, [r7, #16]
 80021da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021dc:	4b37      	ldr	r3, [pc, #220]	; (80022bc <HAL_QSPI_MspInit+0x14c>)
 80021de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e0:	4a36      	ldr	r2, [pc, #216]	; (80022bc <HAL_QSPI_MspInit+0x14c>)
 80021e2:	f043 0304 	orr.w	r3, r3, #4
 80021e6:	6313      	str	r3, [r2, #48]	; 0x30
 80021e8:	4b34      	ldr	r3, [pc, #208]	; (80022bc <HAL_QSPI_MspInit+0x14c>)
 80021ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ec:	f003 0304 	and.w	r3, r3, #4
 80021f0:	60fb      	str	r3, [r7, #12]
 80021f2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021f4:	4b31      	ldr	r3, [pc, #196]	; (80022bc <HAL_QSPI_MspInit+0x14c>)
 80021f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f8:	4a30      	ldr	r2, [pc, #192]	; (80022bc <HAL_QSPI_MspInit+0x14c>)
 80021fa:	f043 0308 	orr.w	r3, r3, #8
 80021fe:	6313      	str	r3, [r2, #48]	; 0x30
 8002200:	4b2e      	ldr	r3, [pc, #184]	; (80022bc <HAL_QSPI_MspInit+0x14c>)
 8002202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002204:	f003 0308 	and.w	r3, r3, #8
 8002208:	60bb      	str	r3, [r7, #8]
 800220a:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> QUADSPI_BK1_IO1
    PC9     ------> QUADSPI_BK1_IO0
    PB2     ------> QUADSPI_CLK
    PD13     ------> QUADSPI_BK1_IO3 
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 800220c:	2304      	movs	r3, #4
 800220e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002210:	2302      	movs	r3, #2
 8002212:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002214:	2300      	movs	r3, #0
 8002216:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002218:	2303      	movs	r3, #3
 800221a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800221c:	2309      	movs	r3, #9
 800221e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8002220:	f107 031c 	add.w	r3, r7, #28
 8002224:	4619      	mov	r1, r3
 8002226:	4826      	ldr	r0, [pc, #152]	; (80022c0 <HAL_QSPI_MspInit+0x150>)
 8002228:	f003 f8c8 	bl	80053bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 800222c:	2340      	movs	r3, #64	; 0x40
 800222e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002230:	2302      	movs	r3, #2
 8002232:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002234:	2300      	movs	r3, #0
 8002236:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002238:	2303      	movs	r3, #3
 800223a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800223c:	230a      	movs	r3, #10
 800223e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8002240:	f107 031c 	add.w	r3, r7, #28
 8002244:	4619      	mov	r1, r3
 8002246:	481f      	ldr	r0, [pc, #124]	; (80022c4 <HAL_QSPI_MspInit+0x154>)
 8002248:	f003 f8b8 	bl	80053bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D0_Pin;
 800224c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002250:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002252:	2302      	movs	r3, #2
 8002254:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002256:	2300      	movs	r3, #0
 8002258:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800225a:	2303      	movs	r3, #3
 800225c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800225e:	2309      	movs	r3, #9
 8002260:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002262:	f107 031c 	add.w	r3, r7, #28
 8002266:	4619      	mov	r1, r3
 8002268:	4817      	ldr	r0, [pc, #92]	; (80022c8 <HAL_QSPI_MspInit+0x158>)
 800226a:	f003 f8a7 	bl	80053bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800226e:	2304      	movs	r3, #4
 8002270:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002272:	2302      	movs	r3, #2
 8002274:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002276:	2300      	movs	r3, #0
 8002278:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800227a:	2303      	movs	r3, #3
 800227c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800227e:	2309      	movs	r3, #9
 8002280:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002282:	f107 031c 	add.w	r3, r7, #28
 8002286:	4619      	mov	r1, r3
 8002288:	480e      	ldr	r0, [pc, #56]	; (80022c4 <HAL_QSPI_MspInit+0x154>)
 800228a:	f003 f897 	bl	80053bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D3_Pin;
 800228e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002292:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002294:	2302      	movs	r3, #2
 8002296:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002298:	2300      	movs	r3, #0
 800229a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800229c:	2303      	movs	r3, #3
 800229e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80022a0:	2309      	movs	r3, #9
 80022a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D3_GPIO_Port, &GPIO_InitStruct);
 80022a4:	f107 031c 	add.w	r3, r7, #28
 80022a8:	4619      	mov	r1, r3
 80022aa:	4808      	ldr	r0, [pc, #32]	; (80022cc <HAL_QSPI_MspInit+0x15c>)
 80022ac:	f003 f886 	bl	80053bc <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80022b0:	bf00      	nop
 80022b2:	3730      	adds	r7, #48	; 0x30
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	a0001000 	.word	0xa0001000
 80022bc:	40023800 	.word	0x40023800
 80022c0:	40021000 	.word	0x40021000
 80022c4:	40020400 	.word	0x40020400
 80022c8:	40020800 	.word	0x40020800
 80022cc:	40020c00 	.word	0x40020c00

080022d0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a07      	ldr	r2, [pc, #28]	; (80022fc <HAL_RTC_MspInit+0x2c>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d105      	bne.n	80022ee <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80022e2:	4b07      	ldr	r3, [pc, #28]	; (8002300 <HAL_RTC_MspInit+0x30>)
 80022e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022e6:	4a06      	ldr	r2, [pc, #24]	; (8002300 <HAL_RTC_MspInit+0x30>)
 80022e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022ec:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80022ee:	bf00      	nop
 80022f0:	370c      	adds	r7, #12
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	40002800 	.word	0x40002800
 8002300:	40023800 	.word	0x40023800

08002304 <HAL_MMC_MspInit>:
* This function configures the hardware resources used in this example
* @param hmmc: MMC handle pointer
* @retval None
*/
void HAL_MMC_MspInit(MMC_HandleTypeDef* hmmc)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b08c      	sub	sp, #48	; 0x30
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800230c:	f107 031c 	add.w	r3, r7, #28
 8002310:	2200      	movs	r2, #0
 8002312:	601a      	str	r2, [r3, #0]
 8002314:	605a      	str	r2, [r3, #4]
 8002316:	609a      	str	r2, [r3, #8]
 8002318:	60da      	str	r2, [r3, #12]
 800231a:	611a      	str	r2, [r3, #16]
  if(hmmc->Instance==SDMMC2)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a33      	ldr	r2, [pc, #204]	; (80023f0 <HAL_MMC_MspInit+0xec>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d160      	bne.n	80023e8 <HAL_MMC_MspInit+0xe4>
  {
  /* USER CODE BEGIN SDMMC2_MspInit 0 */

  /* USER CODE END SDMMC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 8002326:	4b33      	ldr	r3, [pc, #204]	; (80023f4 <HAL_MMC_MspInit+0xf0>)
 8002328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232a:	4a32      	ldr	r2, [pc, #200]	; (80023f4 <HAL_MMC_MspInit+0xf0>)
 800232c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002330:	6453      	str	r3, [r2, #68]	; 0x44
 8002332:	4b30      	ldr	r3, [pc, #192]	; (80023f4 <HAL_MMC_MspInit+0xf0>)
 8002334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002336:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800233a:	61bb      	str	r3, [r7, #24]
 800233c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800233e:	4b2d      	ldr	r3, [pc, #180]	; (80023f4 <HAL_MMC_MspInit+0xf0>)
 8002340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002342:	4a2c      	ldr	r2, [pc, #176]	; (80023f4 <HAL_MMC_MspInit+0xf0>)
 8002344:	f043 0302 	orr.w	r3, r3, #2
 8002348:	6313      	str	r3, [r2, #48]	; 0x30
 800234a:	4b2a      	ldr	r3, [pc, #168]	; (80023f4 <HAL_MMC_MspInit+0xf0>)
 800234c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	617b      	str	r3, [r7, #20]
 8002354:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002356:	4b27      	ldr	r3, [pc, #156]	; (80023f4 <HAL_MMC_MspInit+0xf0>)
 8002358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235a:	4a26      	ldr	r2, [pc, #152]	; (80023f4 <HAL_MMC_MspInit+0xf0>)
 800235c:	f043 0308 	orr.w	r3, r3, #8
 8002360:	6313      	str	r3, [r2, #48]	; 0x30
 8002362:	4b24      	ldr	r3, [pc, #144]	; (80023f4 <HAL_MMC_MspInit+0xf0>)
 8002364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002366:	f003 0308 	and.w	r3, r3, #8
 800236a:	613b      	str	r3, [r7, #16]
 800236c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800236e:	4b21      	ldr	r3, [pc, #132]	; (80023f4 <HAL_MMC_MspInit+0xf0>)
 8002370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002372:	4a20      	ldr	r2, [pc, #128]	; (80023f4 <HAL_MMC_MspInit+0xf0>)
 8002374:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002378:	6313      	str	r3, [r2, #48]	; 0x30
 800237a:	4b1e      	ldr	r3, [pc, #120]	; (80023f4 <HAL_MMC_MspInit+0xf0>)
 800237c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002382:	60fb      	str	r3, [r7, #12]
 8002384:	68fb      	ldr	r3, [r7, #12]
    PD7     ------> SDMMC2_CMD
    PD6     ------> SDMMC2_CK
    PG10     ------> SDMMC2_D1
    PG9     ------> SDMMC2_D0 
    */
    GPIO_InitStruct.Pin = uSD_D3_Pin|uSD_D2_Pin;
 8002386:	2318      	movs	r3, #24
 8002388:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800238a:	2302      	movs	r3, #2
 800238c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238e:	2300      	movs	r3, #0
 8002390:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002392:	2303      	movs	r3, #3
 8002394:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 8002396:	230a      	movs	r3, #10
 8002398:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800239a:	f107 031c 	add.w	r3, r7, #28
 800239e:	4619      	mov	r1, r3
 80023a0:	4815      	ldr	r0, [pc, #84]	; (80023f8 <HAL_MMC_MspInit+0xf4>)
 80023a2:	f003 f80b 	bl	80053bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_CMD_Pin|uSD_CLK_Pin;
 80023a6:	23c0      	movs	r3, #192	; 0xc0
 80023a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023aa:	2302      	movs	r3, #2
 80023ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ae:	2300      	movs	r3, #0
 80023b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023b2:	2303      	movs	r3, #3
 80023b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 80023b6:	230b      	movs	r3, #11
 80023b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023ba:	f107 031c 	add.w	r3, r7, #28
 80023be:	4619      	mov	r1, r3
 80023c0:	480e      	ldr	r0, [pc, #56]	; (80023fc <HAL_MMC_MspInit+0xf8>)
 80023c2:	f002 fffb 	bl	80053bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_D1_Pin|uSD_D0_Pin;
 80023c6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80023ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023cc:	2302      	movs	r3, #2
 80023ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d0:	2300      	movs	r3, #0
 80023d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023d4:	2303      	movs	r3, #3
 80023d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 80023d8:	230b      	movs	r3, #11
 80023da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80023dc:	f107 031c 	add.w	r3, r7, #28
 80023e0:	4619      	mov	r1, r3
 80023e2:	4807      	ldr	r0, [pc, #28]	; (8002400 <HAL_MMC_MspInit+0xfc>)
 80023e4:	f002 ffea 	bl	80053bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC2_MspInit 1 */

  /* USER CODE END SDMMC2_MspInit 1 */
  }

}
 80023e8:	bf00      	nop
 80023ea:	3730      	adds	r7, #48	; 0x30
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	40011c00 	.word	0x40011c00
 80023f4:	40023800 	.word	0x40023800
 80023f8:	40020400 	.word	0x40020400
 80023fc:	40020c00 	.word	0x40020c00
 8002400:	40021800 	.word	0x40021800

08002404 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b08a      	sub	sp, #40	; 0x28
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800240c:	f107 0314 	add.w	r3, r7, #20
 8002410:	2200      	movs	r2, #0
 8002412:	601a      	str	r2, [r3, #0]
 8002414:	605a      	str	r2, [r3, #4]
 8002416:	609a      	str	r2, [r3, #8]
 8002418:	60da      	str	r2, [r3, #12]
 800241a:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8002424:	d128      	bne.n	8002478 <HAL_SPDIFRX_MspInit+0x74>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8002426:	4b16      	ldr	r3, [pc, #88]	; (8002480 <HAL_SPDIFRX_MspInit+0x7c>)
 8002428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242a:	4a15      	ldr	r2, [pc, #84]	; (8002480 <HAL_SPDIFRX_MspInit+0x7c>)
 800242c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002430:	6413      	str	r3, [r2, #64]	; 0x40
 8002432:	4b13      	ldr	r3, [pc, #76]	; (8002480 <HAL_SPDIFRX_MspInit+0x7c>)
 8002434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002436:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800243a:	613b      	str	r3, [r7, #16]
 800243c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800243e:	4b10      	ldr	r3, [pc, #64]	; (8002480 <HAL_SPDIFRX_MspInit+0x7c>)
 8002440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002442:	4a0f      	ldr	r2, [pc, #60]	; (8002480 <HAL_SPDIFRX_MspInit+0x7c>)
 8002444:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002448:	6313      	str	r3, [r2, #48]	; 0x30
 800244a:	4b0d      	ldr	r3, [pc, #52]	; (8002480 <HAL_SPDIFRX_MspInit+0x7c>)
 800244c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002452:	60fb      	str	r3, [r7, #12]
 8002454:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration    
    PG12     ------> SPDIFRX_IN1 
    */
    GPIO_InitStruct.Pin = SPDIF_RX_Pin;
 8002456:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800245a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800245c:	2302      	movs	r3, #2
 800245e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002460:	2300      	movs	r3, #0
 8002462:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002464:	2300      	movs	r3, #0
 8002466:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPDIFRX;
 8002468:	2307      	movs	r3, #7
 800246a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX_GPIO_Port, &GPIO_InitStruct);
 800246c:	f107 0314 	add.w	r3, r7, #20
 8002470:	4619      	mov	r1, r3
 8002472:	4804      	ldr	r0, [pc, #16]	; (8002484 <HAL_SPDIFRX_MspInit+0x80>)
 8002474:	f002 ffa2 	bl	80053bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 8002478:	bf00      	nop
 800247a:	3728      	adds	r7, #40	; 0x28
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	40023800 	.word	0x40023800
 8002484:	40021800 	.word	0x40021800

08002488 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b08a      	sub	sp, #40	; 0x28
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002490:	f107 0314 	add.w	r3, r7, #20
 8002494:	2200      	movs	r2, #0
 8002496:	601a      	str	r2, [r3, #0]
 8002498:	605a      	str	r2, [r3, #4]
 800249a:	609a      	str	r2, [r3, #8]
 800249c:	60da      	str	r2, [r3, #12]
 800249e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a2e      	ldr	r2, [pc, #184]	; (8002560 <HAL_SPI_MspInit+0xd8>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d156      	bne.n	8002558 <HAL_SPI_MspInit+0xd0>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80024aa:	4b2e      	ldr	r3, [pc, #184]	; (8002564 <HAL_SPI_MspInit+0xdc>)
 80024ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ae:	4a2d      	ldr	r2, [pc, #180]	; (8002564 <HAL_SPI_MspInit+0xdc>)
 80024b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024b4:	6413      	str	r3, [r2, #64]	; 0x40
 80024b6:	4b2b      	ldr	r3, [pc, #172]	; (8002564 <HAL_SPI_MspInit+0xdc>)
 80024b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024be:	613b      	str	r3, [r7, #16]
 80024c0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024c2:	4b28      	ldr	r3, [pc, #160]	; (8002564 <HAL_SPI_MspInit+0xdc>)
 80024c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c6:	4a27      	ldr	r2, [pc, #156]	; (8002564 <HAL_SPI_MspInit+0xdc>)
 80024c8:	f043 0301 	orr.w	r3, r3, #1
 80024cc:	6313      	str	r3, [r2, #48]	; 0x30
 80024ce:	4b25      	ldr	r3, [pc, #148]	; (8002564 <HAL_SPI_MspInit+0xdc>)
 80024d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	60fb      	str	r3, [r7, #12]
 80024d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024da:	4b22      	ldr	r3, [pc, #136]	; (8002564 <HAL_SPI_MspInit+0xdc>)
 80024dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024de:	4a21      	ldr	r2, [pc, #132]	; (8002564 <HAL_SPI_MspInit+0xdc>)
 80024e0:	f043 0302 	orr.w	r3, r3, #2
 80024e4:	6313      	str	r3, [r2, #48]	; 0x30
 80024e6:	4b1f      	ldr	r3, [pc, #124]	; (8002564 <HAL_SPI_MspInit+0xdc>)
 80024e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ea:	f003 0302 	and.w	r3, r3, #2
 80024ee:	60bb      	str	r3, [r7, #8]
 80024f0:	68bb      	ldr	r3, [r7, #8]
    PA12     ------> SPI2_SCK
    PA11     ------> SPI2_NSS
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = ARD_D13_SCK_Pin;
 80024f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f8:	2302      	movs	r3, #2
 80024fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fc:	2300      	movs	r3, #0
 80024fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002500:	2300      	movs	r3, #0
 8002502:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002504:	2305      	movs	r3, #5
 8002506:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_D13_SCK_GPIO_Port, &GPIO_InitStruct);
 8002508:	f107 0314 	add.w	r3, r7, #20
 800250c:	4619      	mov	r1, r3
 800250e:	4816      	ldr	r0, [pc, #88]	; (8002568 <HAL_SPI_MspInit+0xe0>)
 8002510:	f002 ff54 	bl	80053bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI2_NSS_Pin;
 8002514:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002518:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800251a:	2302      	movs	r3, #2
 800251c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251e:	2300      	movs	r3, #0
 8002520:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002522:	2303      	movs	r3, #3
 8002524:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002526:	2305      	movs	r3, #5
 8002528:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPI2_NSS_GPIO_Port, &GPIO_InitStruct);
 800252a:	f107 0314 	add.w	r3, r7, #20
 800252e:	4619      	mov	r1, r3
 8002530:	480d      	ldr	r0, [pc, #52]	; (8002568 <HAL_SPI_MspInit+0xe0>)
 8002532:	f002 ff43 	bl	80053bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8002536:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800253a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800253c:	2302      	movs	r3, #2
 800253e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002540:	2300      	movs	r3, #0
 8002542:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002544:	2300      	movs	r3, #0
 8002546:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002548:	2305      	movs	r3, #5
 800254a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800254c:	f107 0314 	add.w	r3, r7, #20
 8002550:	4619      	mov	r1, r3
 8002552:	4806      	ldr	r0, [pc, #24]	; (800256c <HAL_SPI_MspInit+0xe4>)
 8002554:	f002 ff32 	bl	80053bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002558:	bf00      	nop
 800255a:	3728      	adds	r7, #40	; 0x28
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	40003800 	.word	0x40003800
 8002564:	40023800 	.word	0x40023800
 8002568:	40020000 	.word	0x40020000
 800256c:	40020400 	.word	0x40020400

08002570 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002570:	b480      	push	{r7}
 8002572:	b087      	sub	sp, #28
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a1c      	ldr	r2, [pc, #112]	; (80025f0 <HAL_TIM_Base_MspInit+0x80>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d10c      	bne.n	800259c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002582:	4b1c      	ldr	r3, [pc, #112]	; (80025f4 <HAL_TIM_Base_MspInit+0x84>)
 8002584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002586:	4a1b      	ldr	r2, [pc, #108]	; (80025f4 <HAL_TIM_Base_MspInit+0x84>)
 8002588:	f043 0301 	orr.w	r3, r3, #1
 800258c:	6453      	str	r3, [r2, #68]	; 0x44
 800258e:	4b19      	ldr	r3, [pc, #100]	; (80025f4 <HAL_TIM_Base_MspInit+0x84>)
 8002590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	617b      	str	r3, [r7, #20]
 8002598:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 800259a:	e022      	b.n	80025e2 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM10)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a15      	ldr	r2, [pc, #84]	; (80025f8 <HAL_TIM_Base_MspInit+0x88>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d10c      	bne.n	80025c0 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80025a6:	4b13      	ldr	r3, [pc, #76]	; (80025f4 <HAL_TIM_Base_MspInit+0x84>)
 80025a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025aa:	4a12      	ldr	r2, [pc, #72]	; (80025f4 <HAL_TIM_Base_MspInit+0x84>)
 80025ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025b0:	6453      	str	r3, [r2, #68]	; 0x44
 80025b2:	4b10      	ldr	r3, [pc, #64]	; (80025f4 <HAL_TIM_Base_MspInit+0x84>)
 80025b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ba:	613b      	str	r3, [r7, #16]
 80025bc:	693b      	ldr	r3, [r7, #16]
}
 80025be:	e010      	b.n	80025e2 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM11)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a0d      	ldr	r2, [pc, #52]	; (80025fc <HAL_TIM_Base_MspInit+0x8c>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d10b      	bne.n	80025e2 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80025ca:	4b0a      	ldr	r3, [pc, #40]	; (80025f4 <HAL_TIM_Base_MspInit+0x84>)
 80025cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ce:	4a09      	ldr	r2, [pc, #36]	; (80025f4 <HAL_TIM_Base_MspInit+0x84>)
 80025d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025d4:	6453      	str	r3, [r2, #68]	; 0x44
 80025d6:	4b07      	ldr	r3, [pc, #28]	; (80025f4 <HAL_TIM_Base_MspInit+0x84>)
 80025d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025de:	60fb      	str	r3, [r7, #12]
 80025e0:	68fb      	ldr	r3, [r7, #12]
}
 80025e2:	bf00      	nop
 80025e4:	371c      	adds	r7, #28
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	40010000 	.word	0x40010000
 80025f4:	40023800 	.word	0x40023800
 80025f8:	40014400 	.word	0x40014400
 80025fc:	40014800 	.word	0x40014800

08002600 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002600:	b480      	push	{r7}
 8002602:	b085      	sub	sp, #20
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a13      	ldr	r2, [pc, #76]	; (800265c <HAL_TIM_PWM_MspInit+0x5c>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d10c      	bne.n	800262c <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002612:	4b13      	ldr	r3, [pc, #76]	; (8002660 <HAL_TIM_PWM_MspInit+0x60>)
 8002614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002616:	4a12      	ldr	r2, [pc, #72]	; (8002660 <HAL_TIM_PWM_MspInit+0x60>)
 8002618:	f043 0302 	orr.w	r3, r3, #2
 800261c:	6413      	str	r3, [r2, #64]	; 0x40
 800261e:	4b10      	ldr	r3, [pc, #64]	; (8002660 <HAL_TIM_PWM_MspInit+0x60>)
 8002620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002622:	f003 0302 	and.w	r3, r3, #2
 8002626:	60fb      	str	r3, [r7, #12]
 8002628:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 800262a:	e010      	b.n	800264e <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM12)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a0c      	ldr	r2, [pc, #48]	; (8002664 <HAL_TIM_PWM_MspInit+0x64>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d10b      	bne.n	800264e <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002636:	4b0a      	ldr	r3, [pc, #40]	; (8002660 <HAL_TIM_PWM_MspInit+0x60>)
 8002638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263a:	4a09      	ldr	r2, [pc, #36]	; (8002660 <HAL_TIM_PWM_MspInit+0x60>)
 800263c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002640:	6413      	str	r3, [r2, #64]	; 0x40
 8002642:	4b07      	ldr	r3, [pc, #28]	; (8002660 <HAL_TIM_PWM_MspInit+0x60>)
 8002644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800264a:	60bb      	str	r3, [r7, #8]
 800264c:	68bb      	ldr	r3, [r7, #8]
}
 800264e:	bf00      	nop
 8002650:	3714      	adds	r7, #20
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	40000400 	.word	0x40000400
 8002660:	40023800 	.word	0x40023800
 8002664:	40001800 	.word	0x40001800

08002668 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b08c      	sub	sp, #48	; 0x30
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002670:	f107 031c 	add.w	r3, r7, #28
 8002674:	2200      	movs	r2, #0
 8002676:	601a      	str	r2, [r3, #0]
 8002678:	605a      	str	r2, [r3, #4]
 800267a:	609a      	str	r2, [r3, #8]
 800267c:	60da      	str	r2, [r3, #12]
 800267e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a44      	ldr	r2, [pc, #272]	; (8002798 <HAL_TIM_MspPostInit+0x130>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d11d      	bne.n	80026c6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800268a:	4b44      	ldr	r3, [pc, #272]	; (800279c <HAL_TIM_MspPostInit+0x134>)
 800268c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268e:	4a43      	ldr	r2, [pc, #268]	; (800279c <HAL_TIM_MspPostInit+0x134>)
 8002690:	f043 0304 	orr.w	r3, r3, #4
 8002694:	6313      	str	r3, [r2, #48]	; 0x30
 8002696:	4b41      	ldr	r3, [pc, #260]	; (800279c <HAL_TIM_MspPostInit+0x134>)
 8002698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269a:	f003 0304 	and.w	r3, r3, #4
 800269e:	61bb      	str	r3, [r7, #24]
 80026a0:	69bb      	ldr	r3, [r7, #24]
    /**TIM3 GPIO Configuration    
    PC8     ------> TIM3_CH3 
    */
    GPIO_InitStruct.Pin = ARD_D5_PWM_Pin;
 80026a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a8:	2302      	movs	r3, #2
 80026aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ac:	2300      	movs	r3, #0
 80026ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026b0:	2300      	movs	r3, #0
 80026b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80026b4:	2302      	movs	r3, #2
 80026b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARD_D5_PWM_GPIO_Port, &GPIO_InitStruct);
 80026b8:	f107 031c 	add.w	r3, r7, #28
 80026bc:	4619      	mov	r1, r3
 80026be:	4838      	ldr	r0, [pc, #224]	; (80027a0 <HAL_TIM_MspPostInit+0x138>)
 80026c0:	f002 fe7c 	bl	80053bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80026c4:	e064      	b.n	8002790 <HAL_TIM_MspPostInit+0x128>
  else if(htim->Instance==TIM10)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a36      	ldr	r2, [pc, #216]	; (80027a4 <HAL_TIM_MspPostInit+0x13c>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d11c      	bne.n	800270a <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80026d0:	4b32      	ldr	r3, [pc, #200]	; (800279c <HAL_TIM_MspPostInit+0x134>)
 80026d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d4:	4a31      	ldr	r2, [pc, #196]	; (800279c <HAL_TIM_MspPostInit+0x134>)
 80026d6:	f043 0320 	orr.w	r3, r3, #32
 80026da:	6313      	str	r3, [r2, #48]	; 0x30
 80026dc:	4b2f      	ldr	r3, [pc, #188]	; (800279c <HAL_TIM_MspPostInit+0x134>)
 80026de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e0:	f003 0320 	and.w	r3, r3, #32
 80026e4:	617b      	str	r3, [r7, #20]
 80026e6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARD_D3_PWM_Pin;
 80026e8:	2340      	movs	r3, #64	; 0x40
 80026ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ec:	2302      	movs	r3, #2
 80026ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f0:	2300      	movs	r3, #0
 80026f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026f4:	2300      	movs	r3, #0
 80026f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 80026f8:	2303      	movs	r3, #3
 80026fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARD_D3_PWM_GPIO_Port, &GPIO_InitStruct);
 80026fc:	f107 031c 	add.w	r3, r7, #28
 8002700:	4619      	mov	r1, r3
 8002702:	4829      	ldr	r0, [pc, #164]	; (80027a8 <HAL_TIM_MspPostInit+0x140>)
 8002704:	f002 fe5a 	bl	80053bc <HAL_GPIO_Init>
}
 8002708:	e042      	b.n	8002790 <HAL_TIM_MspPostInit+0x128>
  else if(htim->Instance==TIM11)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a27      	ldr	r2, [pc, #156]	; (80027ac <HAL_TIM_MspPostInit+0x144>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d11c      	bne.n	800274e <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002714:	4b21      	ldr	r3, [pc, #132]	; (800279c <HAL_TIM_MspPostInit+0x134>)
 8002716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002718:	4a20      	ldr	r2, [pc, #128]	; (800279c <HAL_TIM_MspPostInit+0x134>)
 800271a:	f043 0320 	orr.w	r3, r3, #32
 800271e:	6313      	str	r3, [r2, #48]	; 0x30
 8002720:	4b1e      	ldr	r3, [pc, #120]	; (800279c <HAL_TIM_MspPostInit+0x134>)
 8002722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002724:	f003 0320 	and.w	r3, r3, #32
 8002728:	613b      	str	r3, [r7, #16]
 800272a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARD_D6_PWM_Pin;
 800272c:	2380      	movs	r3, #128	; 0x80
 800272e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002730:	2302      	movs	r3, #2
 8002732:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002734:	2300      	movs	r3, #0
 8002736:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002738:	2300      	movs	r3, #0
 800273a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 800273c:	2303      	movs	r3, #3
 800273e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARD_D6_PWM_GPIO_Port, &GPIO_InitStruct);
 8002740:	f107 031c 	add.w	r3, r7, #28
 8002744:	4619      	mov	r1, r3
 8002746:	4818      	ldr	r0, [pc, #96]	; (80027a8 <HAL_TIM_MspPostInit+0x140>)
 8002748:	f002 fe38 	bl	80053bc <HAL_GPIO_Init>
}
 800274c:	e020      	b.n	8002790 <HAL_TIM_MspPostInit+0x128>
  else if(htim->Instance==TIM12)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a17      	ldr	r2, [pc, #92]	; (80027b0 <HAL_TIM_MspPostInit+0x148>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d11b      	bne.n	8002790 <HAL_TIM_MspPostInit+0x128>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002758:	4b10      	ldr	r3, [pc, #64]	; (800279c <HAL_TIM_MspPostInit+0x134>)
 800275a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275c:	4a0f      	ldr	r2, [pc, #60]	; (800279c <HAL_TIM_MspPostInit+0x134>)
 800275e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002762:	6313      	str	r3, [r2, #48]	; 0x30
 8002764:	4b0d      	ldr	r3, [pc, #52]	; (800279c <HAL_TIM_MspPostInit+0x134>)
 8002766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002768:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800276c:	60fb      	str	r3, [r7, #12]
 800276e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8002770:	2340      	movs	r3, #64	; 0x40
 8002772:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002774:	2302      	movs	r3, #2
 8002776:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002778:	2300      	movs	r3, #0
 800277a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800277c:	2300      	movs	r3, #0
 800277e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002780:	2309      	movs	r3, #9
 8002782:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8002784:	f107 031c 	add.w	r3, r7, #28
 8002788:	4619      	mov	r1, r3
 800278a:	480a      	ldr	r0, [pc, #40]	; (80027b4 <HAL_TIM_MspPostInit+0x14c>)
 800278c:	f002 fe16 	bl	80053bc <HAL_GPIO_Init>
}
 8002790:	bf00      	nop
 8002792:	3730      	adds	r7, #48	; 0x30
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	40000400 	.word	0x40000400
 800279c:	40023800 	.word	0x40023800
 80027a0:	40020800 	.word	0x40020800
 80027a4:	40014400 	.word	0x40014400
 80027a8:	40021400 	.word	0x40021400
 80027ac:	40014800 	.word	0x40014800
 80027b0:	40001800 	.word	0x40001800
 80027b4:	40021c00 	.word	0x40021c00

080027b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b08e      	sub	sp, #56	; 0x38
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027c4:	2200      	movs	r2, #0
 80027c6:	601a      	str	r2, [r3, #0]
 80027c8:	605a      	str	r2, [r3, #4]
 80027ca:	609a      	str	r2, [r3, #8]
 80027cc:	60da      	str	r2, [r3, #12]
 80027ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a5c      	ldr	r2, [pc, #368]	; (8002948 <HAL_UART_MspInit+0x190>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d145      	bne.n	8002866 <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80027da:	4b5c      	ldr	r3, [pc, #368]	; (800294c <HAL_UART_MspInit+0x194>)
 80027dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027de:	4a5b      	ldr	r2, [pc, #364]	; (800294c <HAL_UART_MspInit+0x194>)
 80027e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027e4:	6413      	str	r3, [r2, #64]	; 0x40
 80027e6:	4b59      	ldr	r3, [pc, #356]	; (800294c <HAL_UART_MspInit+0x194>)
 80027e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027ee:	623b      	str	r3, [r7, #32]
 80027f0:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027f2:	4b56      	ldr	r3, [pc, #344]	; (800294c <HAL_UART_MspInit+0x194>)
 80027f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f6:	4a55      	ldr	r2, [pc, #340]	; (800294c <HAL_UART_MspInit+0x194>)
 80027f8:	f043 0304 	orr.w	r3, r3, #4
 80027fc:	6313      	str	r3, [r2, #48]	; 0x30
 80027fe:	4b53      	ldr	r3, [pc, #332]	; (800294c <HAL_UART_MspInit+0x194>)
 8002800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002802:	f003 0304 	and.w	r3, r3, #4
 8002806:	61fb      	str	r3, [r7, #28]
 8002808:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800280a:	4b50      	ldr	r3, [pc, #320]	; (800294c <HAL_UART_MspInit+0x194>)
 800280c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280e:	4a4f      	ldr	r2, [pc, #316]	; (800294c <HAL_UART_MspInit+0x194>)
 8002810:	f043 0308 	orr.w	r3, r3, #8
 8002814:	6313      	str	r3, [r2, #48]	; 0x30
 8002816:	4b4d      	ldr	r3, [pc, #308]	; (800294c <HAL_UART_MspInit+0x194>)
 8002818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281a:	f003 0308 	and.w	r3, r3, #8
 800281e:	61bb      	str	r3, [r7, #24]
 8002820:	69bb      	ldr	r3, [r7, #24]
    /**UART5 GPIO Configuration    
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX 
    */
    GPIO_InitStruct.Pin = WIFI_RX_Pin;
 8002822:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002826:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002828:	2302      	movs	r3, #2
 800282a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800282c:	2300      	movs	r3, #0
 800282e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002830:	2303      	movs	r3, #3
 8002832:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002834:	2308      	movs	r3, #8
 8002836:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(WIFI_RX_GPIO_Port, &GPIO_InitStruct);
 8002838:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800283c:	4619      	mov	r1, r3
 800283e:	4844      	ldr	r0, [pc, #272]	; (8002950 <HAL_UART_MspInit+0x198>)
 8002840:	f002 fdbc 	bl	80053bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = WIFI_TX_Pin;
 8002844:	2304      	movs	r3, #4
 8002846:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002848:	2302      	movs	r3, #2
 800284a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800284c:	2300      	movs	r3, #0
 800284e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002850:	2303      	movs	r3, #3
 8002852:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002854:	2308      	movs	r3, #8
 8002856:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(WIFI_TX_GPIO_Port, &GPIO_InitStruct);
 8002858:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800285c:	4619      	mov	r1, r3
 800285e:	483d      	ldr	r0, [pc, #244]	; (8002954 <HAL_UART_MspInit+0x19c>)
 8002860:	f002 fdac 	bl	80053bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002864:	e06c      	b.n	8002940 <HAL_UART_MspInit+0x188>
  else if(huart->Instance==USART1)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a3b      	ldr	r2, [pc, #236]	; (8002958 <HAL_UART_MspInit+0x1a0>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d13a      	bne.n	80028e6 <HAL_UART_MspInit+0x12e>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002870:	4b36      	ldr	r3, [pc, #216]	; (800294c <HAL_UART_MspInit+0x194>)
 8002872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002874:	4a35      	ldr	r2, [pc, #212]	; (800294c <HAL_UART_MspInit+0x194>)
 8002876:	f043 0310 	orr.w	r3, r3, #16
 800287a:	6453      	str	r3, [r2, #68]	; 0x44
 800287c:	4b33      	ldr	r3, [pc, #204]	; (800294c <HAL_UART_MspInit+0x194>)
 800287e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002880:	f003 0310 	and.w	r3, r3, #16
 8002884:	617b      	str	r3, [r7, #20]
 8002886:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002888:	4b30      	ldr	r3, [pc, #192]	; (800294c <HAL_UART_MspInit+0x194>)
 800288a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288c:	4a2f      	ldr	r2, [pc, #188]	; (800294c <HAL_UART_MspInit+0x194>)
 800288e:	f043 0301 	orr.w	r3, r3, #1
 8002892:	6313      	str	r3, [r2, #48]	; 0x30
 8002894:	4b2d      	ldr	r3, [pc, #180]	; (800294c <HAL_UART_MspInit+0x194>)
 8002896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002898:	f003 0301 	and.w	r3, r3, #1
 800289c:	613b      	str	r3, [r7, #16]
 800289e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80028a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028a6:	2302      	movs	r3, #2
 80028a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028aa:	2300      	movs	r3, #0
 80028ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028ae:	2303      	movs	r3, #3
 80028b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80028b2:	2307      	movs	r3, #7
 80028b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80028b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028ba:	4619      	mov	r1, r3
 80028bc:	4827      	ldr	r0, [pc, #156]	; (800295c <HAL_UART_MspInit+0x1a4>)
 80028be:	f002 fd7d 	bl	80053bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80028c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028c8:	2302      	movs	r3, #2
 80028ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028cc:	2300      	movs	r3, #0
 80028ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028d0:	2300      	movs	r3, #0
 80028d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80028d4:	2307      	movs	r3, #7
 80028d6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80028d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028dc:	4619      	mov	r1, r3
 80028de:	481f      	ldr	r0, [pc, #124]	; (800295c <HAL_UART_MspInit+0x1a4>)
 80028e0:	f002 fd6c 	bl	80053bc <HAL_GPIO_Init>
}
 80028e4:	e02c      	b.n	8002940 <HAL_UART_MspInit+0x188>
  else if(huart->Instance==USART6)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a1d      	ldr	r2, [pc, #116]	; (8002960 <HAL_UART_MspInit+0x1a8>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d127      	bne.n	8002940 <HAL_UART_MspInit+0x188>
    __HAL_RCC_USART6_CLK_ENABLE();
 80028f0:	4b16      	ldr	r3, [pc, #88]	; (800294c <HAL_UART_MspInit+0x194>)
 80028f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f4:	4a15      	ldr	r2, [pc, #84]	; (800294c <HAL_UART_MspInit+0x194>)
 80028f6:	f043 0320 	orr.w	r3, r3, #32
 80028fa:	6453      	str	r3, [r2, #68]	; 0x44
 80028fc:	4b13      	ldr	r3, [pc, #76]	; (800294c <HAL_UART_MspInit+0x194>)
 80028fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002900:	f003 0320 	and.w	r3, r3, #32
 8002904:	60fb      	str	r3, [r7, #12]
 8002906:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002908:	4b10      	ldr	r3, [pc, #64]	; (800294c <HAL_UART_MspInit+0x194>)
 800290a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290c:	4a0f      	ldr	r2, [pc, #60]	; (800294c <HAL_UART_MspInit+0x194>)
 800290e:	f043 0304 	orr.w	r3, r3, #4
 8002912:	6313      	str	r3, [r2, #48]	; 0x30
 8002914:	4b0d      	ldr	r3, [pc, #52]	; (800294c <HAL_UART_MspInit+0x194>)
 8002916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002918:	f003 0304 	and.w	r3, r3, #4
 800291c:	60bb      	str	r3, [r7, #8]
 800291e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARD_D0_RX_Pin|ARDUINO_TX_D1_Pin;
 8002920:	23c0      	movs	r3, #192	; 0xc0
 8002922:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002924:	2302      	movs	r3, #2
 8002926:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002928:	2300      	movs	r3, #0
 800292a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800292c:	2303      	movs	r3, #3
 800292e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002930:	2308      	movs	r3, #8
 8002932:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002934:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002938:	4619      	mov	r1, r3
 800293a:	4805      	ldr	r0, [pc, #20]	; (8002950 <HAL_UART_MspInit+0x198>)
 800293c:	f002 fd3e 	bl	80053bc <HAL_GPIO_Init>
}
 8002940:	bf00      	nop
 8002942:	3738      	adds	r7, #56	; 0x38
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	40005000 	.word	0x40005000
 800294c:	40023800 	.word	0x40023800
 8002950:	40020800 	.word	0x40020800
 8002954:	40020c00 	.word	0x40020c00
 8002958:	40011000 	.word	0x40011000
 800295c:	40020000 	.word	0x40020000
 8002960:	40011400 	.word	0x40011400

08002964 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b08e      	sub	sp, #56	; 0x38
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800296c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002970:	2200      	movs	r2, #0
 8002972:	601a      	str	r2, [r3, #0]
 8002974:	605a      	str	r2, [r3, #4]
 8002976:	609a      	str	r2, [r3, #8]
 8002978:	60da      	str	r2, [r3, #12]
 800297a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_HS)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a5a      	ldr	r2, [pc, #360]	; (8002aec <HAL_PCD_MspInit+0x188>)
 8002982:	4293      	cmp	r3, r2
 8002984:	f040 80ae 	bne.w	8002ae4 <HAL_PCD_MspInit+0x180>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002988:	4b59      	ldr	r3, [pc, #356]	; (8002af0 <HAL_PCD_MspInit+0x18c>)
 800298a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298c:	4a58      	ldr	r2, [pc, #352]	; (8002af0 <HAL_PCD_MspInit+0x18c>)
 800298e:	f043 0302 	orr.w	r3, r3, #2
 8002992:	6313      	str	r3, [r2, #48]	; 0x30
 8002994:	4b56      	ldr	r3, [pc, #344]	; (8002af0 <HAL_PCD_MspInit+0x18c>)
 8002996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002998:	f003 0302 	and.w	r3, r3, #2
 800299c:	623b      	str	r3, [r7, #32]
 800299e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80029a0:	4b53      	ldr	r3, [pc, #332]	; (8002af0 <HAL_PCD_MspInit+0x18c>)
 80029a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a4:	4a52      	ldr	r2, [pc, #328]	; (8002af0 <HAL_PCD_MspInit+0x18c>)
 80029a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029aa:	6313      	str	r3, [r2, #48]	; 0x30
 80029ac:	4b50      	ldr	r3, [pc, #320]	; (8002af0 <HAL_PCD_MspInit+0x18c>)
 80029ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b4:	61fb      	str	r3, [r7, #28]
 80029b6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80029b8:	4b4d      	ldr	r3, [pc, #308]	; (8002af0 <HAL_PCD_MspInit+0x18c>)
 80029ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029bc:	4a4c      	ldr	r2, [pc, #304]	; (8002af0 <HAL_PCD_MspInit+0x18c>)
 80029be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029c2:	6313      	str	r3, [r2, #48]	; 0x30
 80029c4:	4b4a      	ldr	r3, [pc, #296]	; (8002af0 <HAL_PCD_MspInit+0x18c>)
 80029c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029cc:	61bb      	str	r3, [r7, #24]
 80029ce:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029d0:	4b47      	ldr	r3, [pc, #284]	; (8002af0 <HAL_PCD_MspInit+0x18c>)
 80029d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d4:	4a46      	ldr	r2, [pc, #280]	; (8002af0 <HAL_PCD_MspInit+0x18c>)
 80029d6:	f043 0304 	orr.w	r3, r3, #4
 80029da:	6313      	str	r3, [r2, #48]	; 0x30
 80029dc:	4b44      	ldr	r3, [pc, #272]	; (8002af0 <HAL_PCD_MspInit+0x18c>)
 80029de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e0:	f003 0304 	and.w	r3, r3, #4
 80029e4:	617b      	str	r3, [r7, #20]
 80029e6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029e8:	4b41      	ldr	r3, [pc, #260]	; (8002af0 <HAL_PCD_MspInit+0x18c>)
 80029ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ec:	4a40      	ldr	r2, [pc, #256]	; (8002af0 <HAL_PCD_MspInit+0x18c>)
 80029ee:	f043 0301 	orr.w	r3, r3, #1
 80029f2:	6313      	str	r3, [r2, #48]	; 0x30
 80029f4:	4b3e      	ldr	r3, [pc, #248]	; (8002af0 <HAL_PCD_MspInit+0x18c>)
 80029f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f8:	f003 0301 	and.w	r3, r3, #1
 80029fc:	613b      	str	r3, [r7, #16]
 80029fe:	693b      	ldr	r3, [r7, #16]
    PA3     ------> USB_OTG_HS_ULPI_D0
    PB1     ------> USB_OTG_HS_ULPI_D2
    PB0     ------> USB_OTG_HS_ULPI_D1
    PB11     ------> USB_OTG_HS_ULPI_D4 
    */
    GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 8002a00:	f643 4323 	movw	r3, #15395	; 0x3c23
 8002a04:	627b      	str	r3, [r7, #36]	; 0x24
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a06:	2302      	movs	r3, #2
 8002a08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002a12:	230a      	movs	r3, #10
 8002a14:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	4835      	ldr	r0, [pc, #212]	; (8002af4 <HAL_PCD_MspInit+0x190>)
 8002a1e:	f002 fccd 	bl	80053bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_DIR_Pin;
 8002a22:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a28:	2302      	movs	r3, #2
 8002a2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a30:	2303      	movs	r3, #3
 8002a32:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002a34:	230a      	movs	r3, #10
 8002a36:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ULPI_DIR_GPIO_Port, &GPIO_InitStruct);
 8002a38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	482e      	ldr	r0, [pc, #184]	; (8002af8 <HAL_PCD_MspInit+0x194>)
 8002a40:	f002 fcbc 	bl	80053bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8002a44:	2310      	movs	r3, #16
 8002a46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a48:	2302      	movs	r3, #2
 8002a4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a50:	2303      	movs	r3, #3
 8002a52:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002a54:	230a      	movs	r3, #10
 8002a56:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8002a58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	4827      	ldr	r0, [pc, #156]	; (8002afc <HAL_PCD_MspInit+0x198>)
 8002a60:	f002 fcac 	bl	80053bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_STP_Pin;
 8002a64:	2301      	movs	r3, #1
 8002a66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a68:	2302      	movs	r3, #2
 8002a6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a70:	2303      	movs	r3, #3
 8002a72:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002a74:	230a      	movs	r3, #10
 8002a76:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ULPI_STP_GPIO_Port, &GPIO_InitStruct);
 8002a78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	4820      	ldr	r0, [pc, #128]	; (8002b00 <HAL_PCD_MspInit+0x19c>)
 8002a80:	f002 fc9c 	bl	80053bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8002a84:	2328      	movs	r3, #40	; 0x28
 8002a86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a88:	2302      	movs	r3, #2
 8002a8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a90:	2303      	movs	r3, #3
 8002a92:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002a94:	230a      	movs	r3, #10
 8002a96:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	4819      	ldr	r0, [pc, #100]	; (8002b04 <HAL_PCD_MspInit+0x1a0>)
 8002aa0:	f002 fc8c 	bl	80053bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8002aa4:	4b12      	ldr	r3, [pc, #72]	; (8002af0 <HAL_PCD_MspInit+0x18c>)
 8002aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa8:	4a11      	ldr	r2, [pc, #68]	; (8002af0 <HAL_PCD_MspInit+0x18c>)
 8002aaa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002aae:	6313      	str	r3, [r2, #48]	; 0x30
 8002ab0:	4b0f      	ldr	r3, [pc, #60]	; (8002af0 <HAL_PCD_MspInit+0x18c>)
 8002ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ab8:	60fb      	str	r3, [r7, #12]
 8002aba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 8002abc:	4b0c      	ldr	r3, [pc, #48]	; (8002af0 <HAL_PCD_MspInit+0x18c>)
 8002abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac0:	4a0b      	ldr	r2, [pc, #44]	; (8002af0 <HAL_PCD_MspInit+0x18c>)
 8002ac2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002ac6:	6313      	str	r3, [r2, #48]	; 0x30
 8002ac8:	4b09      	ldr	r3, [pc, #36]	; (8002af0 <HAL_PCD_MspInit+0x18c>)
 8002aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002acc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002ad0:	60bb      	str	r3, [r7, #8]
 8002ad2:	68bb      	ldr	r3, [r7, #8]
    /* USB_OTG_HS interrupt Init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	2105      	movs	r1, #5
 8002ad8:	204d      	movs	r0, #77	; 0x4d
 8002ada:	f000 ff41 	bl	8003960 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8002ade:	204d      	movs	r0, #77	; 0x4d
 8002ae0:	f000 ff5a 	bl	8003998 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }

}
 8002ae4:	bf00      	nop
 8002ae6:	3738      	adds	r7, #56	; 0x38
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	40040000 	.word	0x40040000
 8002af0:	40023800 	.word	0x40023800
 8002af4:	40020400 	.word	0x40020400
 8002af8:	40022000 	.word	0x40022000
 8002afc:	40021c00 	.word	0x40021c00
 8002b00:	40020800 	.word	0x40020800
 8002b04:	40020000 	.word	0x40020000

08002b08 <HAL_WWDG_MspInit>:
* This function configures the hardware resources used in this example
* @param hwwdg: WWDG handle pointer
* @retval None
*/
void HAL_WWDG_MspInit(WWDG_HandleTypeDef* hwwdg)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b085      	sub	sp, #20
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  if(hwwdg->Instance==WWDG)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a0a      	ldr	r2, [pc, #40]	; (8002b40 <HAL_WWDG_MspInit+0x38>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d10b      	bne.n	8002b32 <HAL_WWDG_MspInit+0x2a>
  {
  /* USER CODE BEGIN WWDG_MspInit 0 */

  /* USER CODE END WWDG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_WWDG_CLK_ENABLE();
 8002b1a:	4b0a      	ldr	r3, [pc, #40]	; (8002b44 <HAL_WWDG_MspInit+0x3c>)
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1e:	4a09      	ldr	r2, [pc, #36]	; (8002b44 <HAL_WWDG_MspInit+0x3c>)
 8002b20:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002b24:	6413      	str	r3, [r2, #64]	; 0x40
 8002b26:	4b07      	ldr	r3, [pc, #28]	; (8002b44 <HAL_WWDG_MspInit+0x3c>)
 8002b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b2e:	60fb      	str	r3, [r7, #12]
 8002b30:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN WWDG_MspInit 1 */

  /* USER CODE END WWDG_MspInit 1 */
  }

}
 8002b32:	bf00      	nop
 8002b34:	3714      	adds	r7, #20
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	40002c00 	.word	0x40002c00
 8002b44:	40023800 	.word	0x40023800

08002b48 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b086      	sub	sp, #24
 8002b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002b4e:	1d3b      	adds	r3, r7, #4
 8002b50:	2200      	movs	r2, #0
 8002b52:	601a      	str	r2, [r3, #0]
 8002b54:	605a      	str	r2, [r3, #4]
 8002b56:	609a      	str	r2, [r3, #8]
 8002b58:	60da      	str	r2, [r3, #12]
 8002b5a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002b5c:	4b3b      	ldr	r3, [pc, #236]	; (8002c4c <HAL_FMC_MspInit+0x104>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d16f      	bne.n	8002c44 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8002b64:	4b39      	ldr	r3, [pc, #228]	; (8002c4c <HAL_FMC_MspInit+0x104>)
 8002b66:	2201      	movs	r2, #1
 8002b68:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002b6a:	4b39      	ldr	r3, [pc, #228]	; (8002c50 <HAL_FMC_MspInit+0x108>)
 8002b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b6e:	4a38      	ldr	r2, [pc, #224]	; (8002c50 <HAL_FMC_MspInit+0x108>)
 8002b70:	f043 0301 	orr.w	r3, r3, #1
 8002b74:	6393      	str	r3, [r2, #56]	; 0x38
 8002b76:	4b36      	ldr	r3, [pc, #216]	; (8002c50 <HAL_FMC_MspInit+0x108>)
 8002b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b7a:	f003 0301 	and.w	r3, r3, #1
 8002b7e:	603b      	str	r3, [r7, #0]
 8002b80:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 8002b82:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002b86:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin 
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b88:	2302      	movs	r3, #2
 8002b8a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b90:	2303      	movs	r3, #3
 8002b92:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002b94:	230c      	movs	r3, #12
 8002b96:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b98:	1d3b      	adds	r3, r7, #4
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	482d      	ldr	r0, [pc, #180]	; (8002c54 <HAL_FMC_MspInit+0x10c>)
 8002b9e:	f002 fc0d 	bl	80053bc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A12_Pin 
 8002ba2:	f248 1337 	movw	r3, #33079	; 0x8137
 8002ba6:	607b      	str	r3, [r7, #4]
                          |FMC_A10_Pin|FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ba8:	2302      	movs	r3, #2
 8002baa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bac:	2300      	movs	r3, #0
 8002bae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002bb4:	230c      	movs	r3, #12
 8002bb6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002bb8:	1d3b      	adds	r3, r7, #4
 8002bba:	4619      	mov	r1, r3
 8002bbc:	4826      	ldr	r0, [pc, #152]	; (8002c58 <HAL_FMC_MspInit+0x110>)
 8002bbe:	f002 fbfd 	bl	80053bc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 8002bc2:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002bc6:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc8:	2302      	movs	r3, #2
 8002bca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002bd4:	230c      	movs	r3, #12
 8002bd6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002bd8:	1d3b      	adds	r3, r7, #4
 8002bda:	4619      	mov	r1, r3
 8002bdc:	481f      	ldr	r0, [pc, #124]	; (8002c5c <HAL_FMC_MspInit+0x114>)
 8002bde:	f002 fbed 	bl	80053bc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_NBL2_Pin|D27_Pin|D26_Pin|FMC_NBL3_Pin 
 8002be2:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8002be6:	607b      	str	r3, [r7, #4]
                          |D29_Pin|D31_Pin|D28_Pin|D25_Pin 
                          |D30_Pin|D24_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002be8:	2302      	movs	r3, #2
 8002bea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bec:	2300      	movs	r3, #0
 8002bee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002bf4:	230c      	movs	r3, #12
 8002bf6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002bf8:	1d3b      	adds	r3, r7, #4
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	4818      	ldr	r0, [pc, #96]	; (8002c60 <HAL_FMC_MspInit+0x118>)
 8002bfe:	f002 fbdd 	bl	80053bc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 8002c02:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002c06:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin 
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c08:	2302      	movs	r3, #2
 8002c0a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c10:	2303      	movs	r3, #3
 8002c12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002c14:	230c      	movs	r3, #12
 8002c16:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002c18:	1d3b      	adds	r3, r7, #4
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	4811      	ldr	r0, [pc, #68]	; (8002c64 <HAL_FMC_MspInit+0x11c>)
 8002c1e:	f002 fbcd 	bl	80053bc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D23_Pin|D21_Pin|D22_Pin|FMC_SDNME_Pin 
 8002c22:	f64f 732c 	movw	r3, #65324	; 0xff2c
 8002c26:	607b      	str	r3, [r7, #4]
                          |FMC_SDNE0_Pin|FMC_SDCKE0_Pin|D20_Pin|FMC_D_7_Pin 
                          |FMC_D19_Pin|FMC_D16_Pin|FMC_D18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c28:	2302      	movs	r3, #2
 8002c2a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c30:	2303      	movs	r3, #3
 8002c32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002c34:	230c      	movs	r3, #12
 8002c36:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002c38:	1d3b      	adds	r3, r7, #4
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	480a      	ldr	r0, [pc, #40]	; (8002c68 <HAL_FMC_MspInit+0x120>)
 8002c3e:	f002 fbbd 	bl	80053bc <HAL_GPIO_Init>
 8002c42:	e000      	b.n	8002c46 <HAL_FMC_MspInit+0xfe>
    return;
 8002c44:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002c46:	3718      	adds	r7, #24
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	20000028 	.word	0x20000028
 8002c50:	40023800 	.word	0x40023800
 8002c54:	40021000 	.word	0x40021000
 8002c58:	40021800 	.word	0x40021800
 8002c5c:	40020c00 	.word	0x40020c00
 8002c60:	40022000 	.word	0x40022000
 8002c64:	40021400 	.word	0x40021400
 8002c68:	40021c00 	.word	0x40021c00

08002c6c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002c74:	f7ff ff68 	bl	8002b48 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002c78:	bf00      	nop
 8002c7a:	3708      	adds	r7, #8
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <HAL_SAI_MspInit>:

static uint32_t SAI1_client =0;
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b08a      	sub	sp, #40	; 0x28
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a48      	ldr	r2, [pc, #288]	; (8002db0 <HAL_SAI_MspInit+0x130>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d134      	bne.n	8002cfc <HAL_SAI_MspInit+0x7c>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 8002c92:	4b48      	ldr	r3, [pc, #288]	; (8002db4 <HAL_SAI_MspInit+0x134>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d10b      	bne.n	8002cb2 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8002c9a:	4b47      	ldr	r3, [pc, #284]	; (8002db8 <HAL_SAI_MspInit+0x138>)
 8002c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c9e:	4a46      	ldr	r2, [pc, #280]	; (8002db8 <HAL_SAI_MspInit+0x138>)
 8002ca0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002ca4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ca6:	4b44      	ldr	r3, [pc, #272]	; (8002db8 <HAL_SAI_MspInit+0x138>)
 8002ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002caa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cae:	613b      	str	r3, [r7, #16]
 8002cb0:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 8002cb2:	4b40      	ldr	r3, [pc, #256]	; (8002db4 <HAL_SAI_MspInit+0x134>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	4a3e      	ldr	r2, [pc, #248]	; (8002db4 <HAL_SAI_MspInit+0x134>)
 8002cba:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    PG7     ------> SAI1_MCLK_A 
    */
    GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_SCKA_Pin|SAI1_SDA_Pin;
 8002cbc:	2370      	movs	r3, #112	; 0x70
 8002cbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cc0:	2302      	movs	r3, #2
 8002cc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002ccc:	2306      	movs	r3, #6
 8002cce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002cd0:	f107 0314 	add.w	r3, r7, #20
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	4839      	ldr	r0, [pc, #228]	; (8002dbc <HAL_SAI_MspInit+0x13c>)
 8002cd8:	f002 fb70 	bl	80053bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI1_MCLKA_Pin;
 8002cdc:	2380      	movs	r3, #128	; 0x80
 8002cde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ce0:	2302      	movs	r3, #2
 8002ce2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002cec:	2306      	movs	r3, #6
 8002cee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI1_MCLKA_GPIO_Port, &GPIO_InitStruct);
 8002cf0:	f107 0314 	add.w	r3, r7, #20
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	4832      	ldr	r0, [pc, #200]	; (8002dc0 <HAL_SAI_MspInit+0x140>)
 8002cf8:	f002 fb60 	bl	80053bc <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a30      	ldr	r2, [pc, #192]	; (8002dc4 <HAL_SAI_MspInit+0x144>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d124      	bne.n	8002d50 <HAL_SAI_MspInit+0xd0>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 8002d06:	4b2b      	ldr	r3, [pc, #172]	; (8002db4 <HAL_SAI_MspInit+0x134>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d10b      	bne.n	8002d26 <HAL_SAI_MspInit+0xa6>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8002d0e:	4b2a      	ldr	r3, [pc, #168]	; (8002db8 <HAL_SAI_MspInit+0x138>)
 8002d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d12:	4a29      	ldr	r2, [pc, #164]	; (8002db8 <HAL_SAI_MspInit+0x138>)
 8002d14:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d18:	6453      	str	r3, [r2, #68]	; 0x44
 8002d1a:	4b27      	ldr	r3, [pc, #156]	; (8002db8 <HAL_SAI_MspInit+0x138>)
 8002d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d22:	60fb      	str	r3, [r7, #12]
 8002d24:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 8002d26:	4b23      	ldr	r3, [pc, #140]	; (8002db4 <HAL_SAI_MspInit+0x134>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	4a21      	ldr	r2, [pc, #132]	; (8002db4 <HAL_SAI_MspInit+0x134>)
 8002d2e:	6013      	str	r3, [r2, #0]
    
    /**SAI1_B_Block_B GPIO Configuration    
    PE3     ------> SAI1_SD_B 
    */
    GPIO_InitStruct.Pin = SAI1_SDB_Pin;
 8002d30:	2308      	movs	r3, #8
 8002d32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d34:	2302      	movs	r3, #2
 8002d36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002d40:	2306      	movs	r3, #6
 8002d42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI1_SDB_GPIO_Port, &GPIO_InitStruct);
 8002d44:	f107 0314 	add.w	r3, r7, #20
 8002d48:	4619      	mov	r1, r3
 8002d4a:	481c      	ldr	r0, [pc, #112]	; (8002dbc <HAL_SAI_MspInit+0x13c>)
 8002d4c:	f002 fb36 	bl	80053bc <HAL_GPIO_Init>

    }
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a1c      	ldr	r2, [pc, #112]	; (8002dc8 <HAL_SAI_MspInit+0x148>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d125      	bne.n	8002da6 <HAL_SAI_MspInit+0x126>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8002d5a:	4b1c      	ldr	r3, [pc, #112]	; (8002dcc <HAL_SAI_MspInit+0x14c>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d10b      	bne.n	8002d7a <HAL_SAI_MspInit+0xfa>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002d62:	4b15      	ldr	r3, [pc, #84]	; (8002db8 <HAL_SAI_MspInit+0x138>)
 8002d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d66:	4a14      	ldr	r2, [pc, #80]	; (8002db8 <HAL_SAI_MspInit+0x138>)
 8002d68:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002d6c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d6e:	4b12      	ldr	r3, [pc, #72]	; (8002db8 <HAL_SAI_MspInit+0x138>)
 8002d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d76:	60bb      	str	r3, [r7, #8]
 8002d78:	68bb      	ldr	r3, [r7, #8]
    }
    SAI2_client ++;
 8002d7a:	4b14      	ldr	r3, [pc, #80]	; (8002dcc <HAL_SAI_MspInit+0x14c>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	3301      	adds	r3, #1
 8002d80:	4a12      	ldr	r2, [pc, #72]	; (8002dcc <HAL_SAI_MspInit+0x14c>)
 8002d82:	6013      	str	r3, [r2, #0]
    
    /**SAI2_A_Block_A GPIO Configuration    
    PD11     ------> SAI2_SD_A 
    */
    GPIO_InitStruct.Pin = SPDIF_TX_Pin;
 8002d84:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d8a:	2302      	movs	r3, #2
 8002d8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d92:	2300      	movs	r3, #0
 8002d94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002d96:	230a      	movs	r3, #10
 8002d98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_TX_GPIO_Port, &GPIO_InitStruct);
 8002d9a:	f107 0314 	add.w	r3, r7, #20
 8002d9e:	4619      	mov	r1, r3
 8002da0:	480b      	ldr	r0, [pc, #44]	; (8002dd0 <HAL_SAI_MspInit+0x150>)
 8002da2:	f002 fb0b 	bl	80053bc <HAL_GPIO_Init>

    }
}
 8002da6:	bf00      	nop
 8002da8:	3728      	adds	r7, #40	; 0x28
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	40015804 	.word	0x40015804
 8002db4:	2000002c 	.word	0x2000002c
 8002db8:	40023800 	.word	0x40023800
 8002dbc:	40021000 	.word	0x40021000
 8002dc0:	40021800 	.word	0x40021800
 8002dc4:	40015824 	.word	0x40015824
 8002dc8:	40015c04 	.word	0x40015c04
 8002dcc:	20000030 	.word	0x20000030
 8002dd0:	40020c00 	.word	0x40020c00

08002dd4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b08c      	sub	sp, #48	; 0x30
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002de0:	2300      	movs	r3, #0
 8002de2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8002de4:	2200      	movs	r2, #0
 8002de6:	6879      	ldr	r1, [r7, #4]
 8002de8:	2036      	movs	r0, #54	; 0x36
 8002dea:	f000 fdb9 	bl	8003960 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8002dee:	2036      	movs	r0, #54	; 0x36
 8002df0:	f000 fdd2 	bl	8003998 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002df4:	4b1f      	ldr	r3, [pc, #124]	; (8002e74 <HAL_InitTick+0xa0>)
 8002df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df8:	4a1e      	ldr	r2, [pc, #120]	; (8002e74 <HAL_InitTick+0xa0>)
 8002dfa:	f043 0310 	orr.w	r3, r3, #16
 8002dfe:	6413      	str	r3, [r2, #64]	; 0x40
 8002e00:	4b1c      	ldr	r3, [pc, #112]	; (8002e74 <HAL_InitTick+0xa0>)
 8002e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e04:	f003 0310 	and.w	r3, r3, #16
 8002e08:	60fb      	str	r3, [r7, #12]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002e0c:	f107 0210 	add.w	r2, r7, #16
 8002e10:	f107 0314 	add.w	r3, r7, #20
 8002e14:	4611      	mov	r1, r2
 8002e16:	4618      	mov	r0, r3
 8002e18:	f005 fb5a 	bl	80084d0 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002e1c:	f005 fb30 	bl	8008480 <HAL_RCC_GetPCLK1Freq>
 8002e20:	4603      	mov	r3, r0
 8002e22:	005b      	lsls	r3, r3, #1
 8002e24:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e28:	4a13      	ldr	r2, [pc, #76]	; (8002e78 <HAL_InitTick+0xa4>)
 8002e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e2e:	0c9b      	lsrs	r3, r3, #18
 8002e30:	3b01      	subs	r3, #1
 8002e32:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002e34:	4b11      	ldr	r3, [pc, #68]	; (8002e7c <HAL_InitTick+0xa8>)
 8002e36:	4a12      	ldr	r2, [pc, #72]	; (8002e80 <HAL_InitTick+0xac>)
 8002e38:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8002e3a:	4b10      	ldr	r3, [pc, #64]	; (8002e7c <HAL_InitTick+0xa8>)
 8002e3c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002e40:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002e42:	4a0e      	ldr	r2, [pc, #56]	; (8002e7c <HAL_InitTick+0xa8>)
 8002e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e46:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002e48:	4b0c      	ldr	r3, [pc, #48]	; (8002e7c <HAL_InitTick+0xa8>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e4e:	4b0b      	ldr	r3, [pc, #44]	; (8002e7c <HAL_InitTick+0xa8>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002e54:	4809      	ldr	r0, [pc, #36]	; (8002e7c <HAL_InitTick+0xa8>)
 8002e56:	f006 ff23 	bl	8009ca0 <HAL_TIM_Base_Init>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d104      	bne.n	8002e6a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002e60:	4806      	ldr	r0, [pc, #24]	; (8002e7c <HAL_InitTick+0xa8>)
 8002e62:	f006 ff49 	bl	8009cf8 <HAL_TIM_Base_Start_IT>
 8002e66:	4603      	mov	r3, r0
 8002e68:	e000      	b.n	8002e6c <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3730      	adds	r7, #48	; 0x30
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	40023800 	.word	0x40023800
 8002e78:	431bde83 	.word	0x431bde83
 8002e7c:	20008ecc 	.word	0x20008ecc
 8002e80:	40001000 	.word	0x40001000

08002e84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e84:	b480      	push	{r7}
 8002e86:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002e88:	bf00      	nop
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr

08002e92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e92:	b480      	push	{r7}
 8002e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e96:	e7fe      	b.n	8002e96 <HardFault_Handler+0x4>

08002e98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e9c:	e7fe      	b.n	8002e9c <MemManage_Handler+0x4>

08002e9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e9e:	b480      	push	{r7}
 8002ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ea2:	e7fe      	b.n	8002ea2 <BusFault_Handler+0x4>

08002ea4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ea8:	e7fe      	b.n	8002ea8 <UsageFault_Handler+0x4>

08002eaa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002eaa:	b480      	push	{r7}
 8002eac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002eae:	bf00      	nop
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr

08002eb8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002ebc:	4802      	ldr	r0, [pc, #8]	; (8002ec8 <TIM6_DAC_IRQHandler+0x10>)
 8002ebe:	f006 ff70 	bl	8009da2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002ec2:	bf00      	nop
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	20008ecc 	.word	0x20008ecc

08002ecc <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8002ed0:	4802      	ldr	r0, [pc, #8]	; (8002edc <OTG_HS_IRQHandler+0x10>)
 8002ed2:	f003 feb9 	bl	8006c48 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8002ed6:	bf00      	nop
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	20008384 	.word	0x20008384

08002ee0 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002ee4:	4802      	ldr	r0, [pc, #8]	; (8002ef0 <LTDC_IRQHandler+0x10>)
 8002ee6:	f002 fe6b 	bl	8005bc0 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002eea:	bf00      	nop
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	200088e8 	.word	0x200088e8

08002ef4 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002ef8:	4802      	ldr	r0, [pc, #8]	; (8002f04 <DMA2D_IRQHandler+0x10>)
 8002efa:	f000 fe9f 	bl	8003c3c <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002efe:	bf00      	nop
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	20008cd8 	.word	0x20008cd8

08002f08 <CEC_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC global interrupt.
  */
void CEC_IRQHandler(void)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_IRQn 0 */

  /* USER CODE END CEC_IRQn 0 */
  HAL_CEC_IRQHandler(&hcec);
 8002f0c:	4802      	ldr	r0, [pc, #8]	; (8002f18 <CEC_IRQHandler+0x10>)
 8002f0e:	f000 fb68 	bl	80035e2 <HAL_CEC_IRQHandler>
  /* USER CODE BEGIN CEC_IRQn 1 */

  /* USER CODE END CEC_IRQn 1 */
}
 8002f12:	bf00      	nop
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	20008864 	.word	0x20008864

08002f1c <DSI_IRQHandler>:

/**
  * @brief This function handles DSI global interrupt.
  */
void DSI_IRQHandler(void)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 8002f20:	4802      	ldr	r0, [pc, #8]	; (8002f2c <DSI_IRQHandler+0x10>)
 8002f22:	f001 fa0f 	bl	8004344 <HAL_DSI_IRQHandler>
  /* USER CODE BEGIN DSI_IRQn 1 */

  /* USER CODE END DSI_IRQn 1 */
}
 8002f26:	bf00      	nop
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	20008848 	.word	0x20008848

08002f30 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f30:	b480      	push	{r7}
 8002f32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f34:	4b15      	ldr	r3, [pc, #84]	; (8002f8c <SystemInit+0x5c>)
 8002f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f3a:	4a14      	ldr	r2, [pc, #80]	; (8002f8c <SystemInit+0x5c>)
 8002f3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002f44:	4b12      	ldr	r3, [pc, #72]	; (8002f90 <SystemInit+0x60>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a11      	ldr	r2, [pc, #68]	; (8002f90 <SystemInit+0x60>)
 8002f4a:	f043 0301 	orr.w	r3, r3, #1
 8002f4e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002f50:	4b0f      	ldr	r3, [pc, #60]	; (8002f90 <SystemInit+0x60>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002f56:	4b0e      	ldr	r3, [pc, #56]	; (8002f90 <SystemInit+0x60>)
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	490d      	ldr	r1, [pc, #52]	; (8002f90 <SystemInit+0x60>)
 8002f5c:	4b0d      	ldr	r3, [pc, #52]	; (8002f94 <SystemInit+0x64>)
 8002f5e:	4013      	ands	r3, r2
 8002f60:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002f62:	4b0b      	ldr	r3, [pc, #44]	; (8002f90 <SystemInit+0x60>)
 8002f64:	4a0c      	ldr	r2, [pc, #48]	; (8002f98 <SystemInit+0x68>)
 8002f66:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002f68:	4b09      	ldr	r3, [pc, #36]	; (8002f90 <SystemInit+0x60>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a08      	ldr	r2, [pc, #32]	; (8002f90 <SystemInit+0x60>)
 8002f6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f72:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002f74:	4b06      	ldr	r3, [pc, #24]	; (8002f90 <SystemInit+0x60>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002f7a:	4b04      	ldr	r3, [pc, #16]	; (8002f8c <SystemInit+0x5c>)
 8002f7c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002f80:	609a      	str	r2, [r3, #8]
#endif
}
 8002f82:	bf00      	nop
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr
 8002f8c:	e000ed00 	.word	0xe000ed00
 8002f90:	40023800 	.word	0x40023800
 8002f94:	fef6ffff 	.word	0xfef6ffff
 8002f98:	24003010 	.word	0x24003010

08002f9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fa0:	2003      	movs	r0, #3
 8002fa2:	f000 fcd2 	bl	800394a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002fa6:	2000      	movs	r0, #0
 8002fa8:	f7ff ff14 	bl	8002dd4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002fac:	f7fe fe00 	bl	8001bb0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002fb0:	2300      	movs	r3, #0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	bd80      	pop	{r7, pc}
	...

08002fb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002fbc:	4b06      	ldr	r3, [pc, #24]	; (8002fd8 <HAL_IncTick+0x20>)
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	4b06      	ldr	r3, [pc, #24]	; (8002fdc <HAL_IncTick+0x24>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4413      	add	r3, r2
 8002fc8:	4a04      	ldr	r2, [pc, #16]	; (8002fdc <HAL_IncTick+0x24>)
 8002fca:	6013      	str	r3, [r2, #0]
}
 8002fcc:	bf00      	nop
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop
 8002fd8:	20000004 	.word	0x20000004
 8002fdc:	20008f0c 	.word	0x20008f0c

08002fe0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	af00      	add	r7, sp, #0
  return uwTick;
 8002fe4:	4b03      	ldr	r3, [pc, #12]	; (8002ff4 <HAL_GetTick+0x14>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr
 8002ff2:	bf00      	nop
 8002ff4:	20008f0c 	.word	0x20008f0c

08002ff8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003000:	f7ff ffee 	bl	8002fe0 <HAL_GetTick>
 8003004:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003010:	d005      	beq.n	800301e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003012:	4b09      	ldr	r3, [pc, #36]	; (8003038 <HAL_Delay+0x40>)
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	461a      	mov	r2, r3
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	4413      	add	r3, r2
 800301c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800301e:	bf00      	nop
 8003020:	f7ff ffde 	bl	8002fe0 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	68fa      	ldr	r2, [r7, #12]
 800302c:	429a      	cmp	r2, r3
 800302e:	d8f7      	bhi.n	8003020 <HAL_Delay+0x28>
  {
  }
}
 8003030:	bf00      	nop
 8003032:	3710      	adds	r7, #16
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}
 8003038:	20000004 	.word	0x20000004

0800303c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003044:	2300      	movs	r3, #0
 8003046:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d101      	bne.n	8003052 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e031      	b.n	80030b6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003056:	2b00      	cmp	r3, #0
 8003058:	d109      	bne.n	800306e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f7fe fdd0 	bl	8001c00 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003072:	f003 0310 	and.w	r3, r3, #16
 8003076:	2b00      	cmp	r3, #0
 8003078:	d116      	bne.n	80030a8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800307e:	4b10      	ldr	r3, [pc, #64]	; (80030c0 <HAL_ADC_Init+0x84>)
 8003080:	4013      	ands	r3, r2
 8003082:	f043 0202 	orr.w	r2, r3, #2
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f000 f94e 	bl	800332c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309a:	f023 0303 	bic.w	r3, r3, #3
 800309e:	f043 0201 	orr.w	r2, r3, #1
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	641a      	str	r2, [r3, #64]	; 0x40
 80030a6:	e001      	b.n	80030ac <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2200      	movs	r2, #0
 80030b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80030b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3710      	adds	r7, #16
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	ffffeefd 	.word	0xffffeefd

080030c4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b085      	sub	sp, #20
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80030ce:	2300      	movs	r3, #0
 80030d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d101      	bne.n	80030e0 <HAL_ADC_ConfigChannel+0x1c>
 80030dc:	2302      	movs	r3, #2
 80030de:	e115      	b.n	800330c <HAL_ADC_ConfigChannel+0x248>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2b09      	cmp	r3, #9
 80030ee:	d935      	bls.n	800315c <HAL_ADC_ConfigChannel+0x98>
	{
		/* Clear the old sample time */
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	68d9      	ldr	r1, [r3, #12]
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	461a      	mov	r2, r3
 80030fe:	4613      	mov	r3, r2
 8003100:	005b      	lsls	r3, r3, #1
 8003102:	4413      	add	r3, r2
 8003104:	3b1e      	subs	r3, #30
 8003106:	2207      	movs	r2, #7
 8003108:	fa02 f303 	lsl.w	r3, r2, r3
 800310c:	43da      	mvns	r2, r3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	400a      	ands	r2, r1
 8003114:	60da      	str	r2, [r3, #12]

		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a7f      	ldr	r2, [pc, #508]	; (8003318 <HAL_ADC_ConfigChannel+0x254>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d10a      	bne.n	8003136 <HAL_ADC_ConfigChannel+0x72>
		{
			/* Set the new sample time */
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	68d9      	ldr	r1, [r3, #12]
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	061a      	lsls	r2, r3, #24
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	430a      	orrs	r2, r1
 8003132:	60da      	str	r2, [r3, #12]
 8003134:	e035      	b.n	80031a2 <HAL_ADC_ConfigChannel+0xde>
		}
	  else
	  {	
		  /* Set the new sample time */
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	68d9      	ldr	r1, [r3, #12]
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	689a      	ldr	r2, [r3, #8]
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	b29b      	uxth	r3, r3
 8003146:	4618      	mov	r0, r3
 8003148:	4603      	mov	r3, r0
 800314a:	005b      	lsls	r3, r3, #1
 800314c:	4403      	add	r3, r0
 800314e:	3b1e      	subs	r3, #30
 8003150:	409a      	lsls	r2, r3
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	430a      	orrs	r2, r1
 8003158:	60da      	str	r2, [r3, #12]
 800315a:	e022      	b.n	80031a2 <HAL_ADC_ConfigChannel+0xde>
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	6919      	ldr	r1, [r3, #16]
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	b29b      	uxth	r3, r3
 8003168:	461a      	mov	r2, r3
 800316a:	4613      	mov	r3, r2
 800316c:	005b      	lsls	r3, r3, #1
 800316e:	4413      	add	r3, r2
 8003170:	2207      	movs	r2, #7
 8003172:	fa02 f303 	lsl.w	r3, r2, r3
 8003176:	43da      	mvns	r2, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	400a      	ands	r2, r1
 800317e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	6919      	ldr	r1, [r3, #16]
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	689a      	ldr	r2, [r3, #8]
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	b29b      	uxth	r3, r3
 8003190:	4618      	mov	r0, r3
 8003192:	4603      	mov	r3, r0
 8003194:	005b      	lsls	r3, r3, #1
 8003196:	4403      	add	r3, r0
 8003198:	409a      	lsls	r2, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	430a      	orrs	r2, r1
 80031a0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	2b06      	cmp	r3, #6
 80031a8:	d824      	bhi.n	80031f4 <HAL_ADC_ConfigChannel+0x130>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	685a      	ldr	r2, [r3, #4]
 80031b4:	4613      	mov	r3, r2
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	4413      	add	r3, r2
 80031ba:	3b05      	subs	r3, #5
 80031bc:	221f      	movs	r2, #31
 80031be:	fa02 f303 	lsl.w	r3, r2, r3
 80031c2:	43da      	mvns	r2, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	400a      	ands	r2, r1
 80031ca:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	4618      	mov	r0, r3
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	685a      	ldr	r2, [r3, #4]
 80031de:	4613      	mov	r3, r2
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	4413      	add	r3, r2
 80031e4:	3b05      	subs	r3, #5
 80031e6:	fa00 f203 	lsl.w	r2, r0, r3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	430a      	orrs	r2, r1
 80031f0:	635a      	str	r2, [r3, #52]	; 0x34
 80031f2:	e04c      	b.n	800328e <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	2b0c      	cmp	r3, #12
 80031fa:	d824      	bhi.n	8003246 <HAL_ADC_ConfigChannel+0x182>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	685a      	ldr	r2, [r3, #4]
 8003206:	4613      	mov	r3, r2
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	4413      	add	r3, r2
 800320c:	3b23      	subs	r3, #35	; 0x23
 800320e:	221f      	movs	r2, #31
 8003210:	fa02 f303 	lsl.w	r3, r2, r3
 8003214:	43da      	mvns	r2, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	400a      	ands	r2, r1
 800321c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	b29b      	uxth	r3, r3
 800322a:	4618      	mov	r0, r3
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	685a      	ldr	r2, [r3, #4]
 8003230:	4613      	mov	r3, r2
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	4413      	add	r3, r2
 8003236:	3b23      	subs	r3, #35	; 0x23
 8003238:	fa00 f203 	lsl.w	r2, r0, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	430a      	orrs	r2, r1
 8003242:	631a      	str	r2, [r3, #48]	; 0x30
 8003244:	e023      	b.n	800328e <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	685a      	ldr	r2, [r3, #4]
 8003250:	4613      	mov	r3, r2
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	4413      	add	r3, r2
 8003256:	3b41      	subs	r3, #65	; 0x41
 8003258:	221f      	movs	r2, #31
 800325a:	fa02 f303 	lsl.w	r3, r2, r3
 800325e:	43da      	mvns	r2, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	400a      	ands	r2, r1
 8003266:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	b29b      	uxth	r3, r3
 8003274:	4618      	mov	r0, r3
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	685a      	ldr	r2, [r3, #4]
 800327a:	4613      	mov	r3, r2
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	4413      	add	r3, r2
 8003280:	3b41      	subs	r3, #65	; 0x41
 8003282:	fa00 f203 	lsl.w	r2, r0, r3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	430a      	orrs	r2, r1
 800328c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a22      	ldr	r2, [pc, #136]	; (800331c <HAL_ADC_ConfigChannel+0x258>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d109      	bne.n	80032ac <HAL_ADC_ConfigChannel+0x1e8>
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2b12      	cmp	r3, #18
 800329e:	d105      	bne.n	80032ac <HAL_ADC_ConfigChannel+0x1e8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80032a0:	4b1f      	ldr	r3, [pc, #124]	; (8003320 <HAL_ADC_ConfigChannel+0x25c>)
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	4a1e      	ldr	r2, [pc, #120]	; (8003320 <HAL_ADC_ConfigChannel+0x25c>)
 80032a6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80032aa:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a1a      	ldr	r2, [pc, #104]	; (800331c <HAL_ADC_ConfigChannel+0x258>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d125      	bne.n	8003302 <HAL_ADC_ConfigChannel+0x23e>
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a17      	ldr	r2, [pc, #92]	; (8003318 <HAL_ADC_ConfigChannel+0x254>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d003      	beq.n	80032c8 <HAL_ADC_ConfigChannel+0x204>
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2b11      	cmp	r3, #17
 80032c6:	d11c      	bne.n	8003302 <HAL_ADC_ConfigChannel+0x23e>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80032c8:	4b15      	ldr	r3, [pc, #84]	; (8003320 <HAL_ADC_ConfigChannel+0x25c>)
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	4a14      	ldr	r2, [pc, #80]	; (8003320 <HAL_ADC_ConfigChannel+0x25c>)
 80032ce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80032d2:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a0f      	ldr	r2, [pc, #60]	; (8003318 <HAL_ADC_ConfigChannel+0x254>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d111      	bne.n	8003302 <HAL_ADC_ConfigChannel+0x23e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80032de:	4b11      	ldr	r3, [pc, #68]	; (8003324 <HAL_ADC_ConfigChannel+0x260>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a11      	ldr	r2, [pc, #68]	; (8003328 <HAL_ADC_ConfigChannel+0x264>)
 80032e4:	fba2 2303 	umull	r2, r3, r2, r3
 80032e8:	0c9a      	lsrs	r2, r3, #18
 80032ea:	4613      	mov	r3, r2
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	4413      	add	r3, r2
 80032f0:	005b      	lsls	r3, r3, #1
 80032f2:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80032f4:	e002      	b.n	80032fc <HAL_ADC_ConfigChannel+0x238>
      {
        counter--;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	3b01      	subs	r3, #1
 80032fa:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d1f9      	bne.n	80032f6 <HAL_ADC_ConfigChannel+0x232>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800330a:	2300      	movs	r3, #0
}
 800330c:	4618      	mov	r0, r3
 800330e:	3714      	adds	r7, #20
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr
 8003318:	10000012 	.word	0x10000012
 800331c:	40012000 	.word	0x40012000
 8003320:	40012300 	.word	0x40012300
 8003324:	20000000 	.word	0x20000000
 8003328:	431bde83 	.word	0x431bde83

0800332c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003334:	4b78      	ldr	r3, [pc, #480]	; (8003518 <ADC_Init+0x1ec>)
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	4a77      	ldr	r2, [pc, #476]	; (8003518 <ADC_Init+0x1ec>)
 800333a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800333e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003340:	4b75      	ldr	r3, [pc, #468]	; (8003518 <ADC_Init+0x1ec>)
 8003342:	685a      	ldr	r2, [r3, #4]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	4973      	ldr	r1, [pc, #460]	; (8003518 <ADC_Init+0x1ec>)
 800334a:	4313      	orrs	r3, r2
 800334c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	685a      	ldr	r2, [r3, #4]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800335c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	6859      	ldr	r1, [r3, #4]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	691b      	ldr	r3, [r3, #16]
 8003368:	021a      	lsls	r2, r3, #8
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	430a      	orrs	r2, r1
 8003370:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	685a      	ldr	r2, [r3, #4]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003380:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	6859      	ldr	r1, [r3, #4]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	689a      	ldr	r2, [r3, #8]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	430a      	orrs	r2, r1
 8003392:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	689a      	ldr	r2, [r3, #8]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	6899      	ldr	r1, [r3, #8]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	68da      	ldr	r2, [r3, #12]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	430a      	orrs	r2, r1
 80033b4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ba:	4a58      	ldr	r2, [pc, #352]	; (800351c <ADC_Init+0x1f0>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d022      	beq.n	8003406 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	689a      	ldr	r2, [r3, #8]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80033ce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	6899      	ldr	r1, [r3, #8]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	430a      	orrs	r2, r1
 80033e0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	689a      	ldr	r2, [r3, #8]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80033f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	6899      	ldr	r1, [r3, #8]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	430a      	orrs	r2, r1
 8003402:	609a      	str	r2, [r3, #8]
 8003404:	e00f      	b.n	8003426 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	689a      	ldr	r2, [r3, #8]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003414:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	689a      	ldr	r2, [r3, #8]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003424:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	689a      	ldr	r2, [r3, #8]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f022 0202 	bic.w	r2, r2, #2
 8003434:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	6899      	ldr	r1, [r3, #8]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	699b      	ldr	r3, [r3, #24]
 8003440:	005a      	lsls	r2, r3, #1
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	430a      	orrs	r2, r1
 8003448:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d01b      	beq.n	800348c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	685a      	ldr	r2, [r3, #4]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003462:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	685a      	ldr	r2, [r3, #4]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003472:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	6859      	ldr	r1, [r3, #4]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347e:	3b01      	subs	r3, #1
 8003480:	035a      	lsls	r2, r3, #13
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	430a      	orrs	r2, r1
 8003488:	605a      	str	r2, [r3, #4]
 800348a:	e007      	b.n	800349c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	685a      	ldr	r2, [r3, #4]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800349a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80034aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	69db      	ldr	r3, [r3, #28]
 80034b6:	3b01      	subs	r3, #1
 80034b8:	051a      	lsls	r2, r3, #20
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	430a      	orrs	r2, r1
 80034c0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	689a      	ldr	r2, [r3, #8]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80034d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	6899      	ldr	r1, [r3, #8]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80034de:	025a      	lsls	r2, r3, #9
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	430a      	orrs	r2, r1
 80034e6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	689a      	ldr	r2, [r3, #8]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	6899      	ldr	r1, [r3, #8]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	695b      	ldr	r3, [r3, #20]
 8003502:	029a      	lsls	r2, r3, #10
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	430a      	orrs	r2, r1
 800350a:	609a      	str	r2, [r3, #8]
}
 800350c:	bf00      	nop
 800350e:	370c      	adds	r7, #12
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr
 8003518:	40012300 	.word	0x40012300
 800351c:	0f000001 	.word	0x0f000001

08003520 <HAL_CEC_Init>:
  *         parameters in the CEC_InitTypeDef and creates the associated handle .
  * @param hcec CEC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CEC_Init(CEC_HandleTypeDef *hcec)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  /* Check the CEC handle allocation */
  if ((hcec == NULL) || (hcec->Init.RxBuffer == NULL))
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d003      	beq.n	8003536 <HAL_CEC_Init+0x16>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003532:	2b00      	cmp	r3, #0
 8003534:	d101      	bne.n	800353a <HAL_CEC_Init+0x1a>
  {
    return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e04f      	b.n	80035da <HAL_CEC_Init+0xba>

    /* Init the low level hardware */
    hcec->MspInitCallback(hcec);
  }
#else
  if (hcec->gState == HAL_CEC_STATE_RESET)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800353e:	2b00      	cmp	r3, #0
 8003540:	d106      	bne.n	8003550 <HAL_CEC_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hcec->Lock = HAL_UNLOCKED;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_CEC_MspInit(hcec);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f7fe fd0a 	bl	8001f64 <HAL_CEC_MspInit>
  }
#endif /* USE_HAL_CEC_REGISTER_CALLBACKS */

  hcec->gState = HAL_CEC_STATE_BUSY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2224      	movs	r2, #36	; 0x24
 8003554:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable the Peripheral */
  __HAL_CEC_DISABLE(hcec);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f022 0201 	bic.w	r2, r2, #1
 8003564:	601a      	str	r2, [r3, #0]

  /* Write to CEC Control Register */
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685a      	ldr	r2, [r3, #4]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	431a      	orrs	r2, r3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	431a      	orrs	r2, r3
                         hcec->Init.BREErrorBitGen | hcec->Init.LBPEErrorBitGen | hcec->Init.BroadcastMsgNoErrorBitGen | \
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	691b      	ldr	r3, [r3, #16]
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 800357a:	431a      	orrs	r2, r3
                         hcec->Init.BREErrorBitGen | hcec->Init.LBPEErrorBitGen | hcec->Init.BroadcastMsgNoErrorBitGen | \
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	695b      	ldr	r3, [r3, #20]
 8003580:	431a      	orrs	r2, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	699b      	ldr	r3, [r3, #24]
 8003586:	431a      	orrs	r2, r3
                         hcec->Init.SignalFreeTimeOption | ((uint32_t)(hcec->Init.OwnAddress) << 16U) | \
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	69db      	ldr	r3, [r3, #28]
                         hcec->Init.BREErrorBitGen | hcec->Init.LBPEErrorBitGen | hcec->Init.BroadcastMsgNoErrorBitGen | \
 800358c:	431a      	orrs	r2, r3
                         hcec->Init.SignalFreeTimeOption | ((uint32_t)(hcec->Init.OwnAddress) << 16U) | \
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003592:	041b      	lsls	r3, r3, #16
 8003594:	ea42 0103 	orr.w	r1, r2, r3
                         hcec->Init.ListenMode;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a1a      	ldr	r2, [r3, #32]
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
                         hcec->Init.SignalFreeTimeOption | ((uint32_t)(hcec->Init.OwnAddress) << 16U) | \
 80035a0:	430a      	orrs	r2, r1
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 80035a2:	605a      	str	r2, [r3, #4]
    * End of Transmission IT
    * Tx Missing Acknowledge IT
    * Tx-Error IT
    * Tx-Buffer Underrun IT
    * Tx arbitration lost   */
  __HAL_CEC_ENABLE_IT(hcec, CEC_IT_RXBR | CEC_IT_RXEND | CEC_IER_RX_ALL_ERR | CEC_IT_TXBR | CEC_IT_TXEND |
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	6959      	ldr	r1, [r3, #20]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80035b2:	430b      	orrs	r3, r1
 80035b4:	6153      	str	r3, [r2, #20]
                      CEC_IER_TX_ALL_ERR);

  /* Enable the CEC Peripheral */
  __HAL_CEC_ENABLE(hcec);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f042 0201 	orr.w	r2, r2, #1
 80035c4:	601a      	str	r2, [r3, #0]

  hcec->ErrorCode = HAL_CEC_ERROR_NONE;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	641a      	str	r2, [r3, #64]	; 0x40
  hcec->gState = HAL_CEC_STATE_READY;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2220      	movs	r2, #32
 80035d0:	639a      	str	r2, [r3, #56]	; 0x38
  hcec->RxState = HAL_CEC_STATE_READY;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2220      	movs	r2, #32
 80035d6:	63da      	str	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035d8:	2300      	movs	r3, #0
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3708      	adds	r7, #8
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}

080035e2 <HAL_CEC_IRQHandler>:
  * @brief This function handles CEC interrupt requests.
  * @param hcec CEC handle
  * @retval None
  */
void HAL_CEC_IRQHandler(CEC_HandleTypeDef *hcec)
{
 80035e2:	b580      	push	{r7, lr}
 80035e4:	b084      	sub	sp, #16
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	6078      	str	r0, [r7, #4]

  /* save interrupts register for further error or interrupts handling purposes */
  uint32_t reg;
  reg = hcec->Instance->ISR;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	691b      	ldr	r3, [r3, #16]
 80035f0:	60fb      	str	r3, [r7, #12]


  /* ----------------------------Arbitration Lost Management----------------------------------*/
  /* CEC TX arbitration error interrupt occurred --------------------------------------*/
  if ((reg & CEC_FLAG_ARBLST) != 0U)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d00a      	beq.n	8003612 <HAL_CEC_IRQHandler+0x30>
  {
    hcec->ErrorCode = HAL_CEC_ERROR_ARBLST;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2280      	movs	r2, #128	; 0x80
 8003600:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_ARBLST);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	691a      	ldr	r2, [r3, #16]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003610:	611a      	str	r2, [r3, #16]
  }

  /* ----------------------------Rx Management----------------------------------*/
  /* CEC RX byte received interrupt  ---------------------------------------------------*/
  if ((reg & CEC_FLAG_RXBR) != 0U)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f003 0301 	and.w	r3, r3, #1
 8003618:	2b00      	cmp	r3, #0
 800361a:	d01c      	beq.n	8003656 <HAL_CEC_IRQHandler+0x74>
  {
    /* reception is starting */
    hcec->RxState = HAL_CEC_STATE_BUSY_RX;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2222      	movs	r2, #34	; 0x22
 8003620:	63da      	str	r2, [r3, #60]	; 0x3c
    hcec->RxXferSize++;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003626:	3301      	adds	r3, #1
 8003628:	b29a      	uxth	r2, r3
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	865a      	strh	r2, [r3, #50]	; 0x32
    /* read received byte */
    *hcec->Init.RxBuffer = (uint8_t) hcec->Instance->RXDR;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	68da      	ldr	r2, [r3, #12]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003638:	b2d2      	uxtb	r2, r2
 800363a:	701a      	strb	r2, [r3, #0]
    hcec->Init.RxBuffer++;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003640:	1c5a      	adds	r2, r3, #1
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	629a      	str	r2, [r3, #40]	; 0x28
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_RXBR);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	691a      	ldr	r2, [r3, #16]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f042 0201 	orr.w	r2, r2, #1
 8003654:	611a      	str	r2, [r3, #16]
  }

  /* CEC RX end received interrupt  ---------------------------------------------------*/
  if ((reg & CEC_FLAG_RXEND) != 0U)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	f003 0302 	and.w	r3, r3, #2
 800365c:	2b00      	cmp	r3, #0
 800365e:	d01e      	beq.n	800369e <HAL_CEC_IRQHandler+0xbc>
  {
    /* clear IT */
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_RXEND);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	691a      	ldr	r2, [r3, #16]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f042 0202 	orr.w	r2, r2, #2
 800366e:	611a      	str	r2, [r3, #16]

    /* Rx process is completed, restore hcec->RxState to Ready */
    hcec->RxState = HAL_CEC_STATE_READY;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2220      	movs	r2, #32
 8003674:	63da      	str	r2, [r3, #60]	; 0x3c
    hcec->ErrorCode = HAL_CEC_ERROR_NONE;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	641a      	str	r2, [r3, #64]	; 0x40
    hcec->Init.RxBuffer -= hcec->RxXferSize;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003684:	425b      	negs	r3, r3
 8003686:	441a      	add	r2, r3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->RxCpltCallback(hcec, hcec->RxXferSize);
#else
    HAL_CEC_RxCpltCallback(hcec, hcec->RxXferSize);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003690:	4619      	mov	r1, r3
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f000 f897 	bl	80037c6 <HAL_CEC_RxCpltCallback>
#endif /* USE_HAL_CEC_REGISTER_CALLBACKS */
    hcec->RxXferSize = 0U;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* ----------------------------Tx Management----------------------------------*/
  /* CEC TX byte request interrupt ------------------------------------------------*/
  if ((reg & CEC_FLAG_TXBR) != 0U)
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d030      	beq.n	800370a <HAL_CEC_IRQHandler+0x128>
  {
    if (hcec->TxXferCount == 0U)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d113      	bne.n	80036d8 <HAL_CEC_IRQHandler+0xf6>
    {
      /* if this is the last byte transmission, set TX End of Message (TXEOM) bit */
      __HAL_CEC_LAST_BYTE_TX_SET(hcec);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f042 0204 	orr.w	r2, r2, #4
 80036be:	601a      	str	r2, [r3, #0]
      hcec->Instance->TXDR = *hcec->pTxBuffPtr;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c4:	781a      	ldrb	r2, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	609a      	str	r2, [r3, #8]
      hcec->pTxBuffPtr++;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d0:	1c5a      	adds	r2, r3, #1
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	62da      	str	r2, [r3, #44]	; 0x2c
 80036d6:	e010      	b.n	80036fa <HAL_CEC_IRQHandler+0x118>
    }
    else
    {
      hcec->Instance->TXDR = *hcec->pTxBuffPtr;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036dc:	781a      	ldrb	r2, [r3, #0]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	609a      	str	r2, [r3, #8]
      hcec->pTxBuffPtr++;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e8:	1c5a      	adds	r2, r3, #1
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	62da      	str	r2, [r3, #44]	; 0x2c
      hcec->TxXferCount--;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80036f2:	3b01      	subs	r3, #1
 80036f4:	b29a      	uxth	r2, r3
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	861a      	strh	r2, [r3, #48]	; 0x30
    }
    /* clear Tx-Byte request flag */
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_TXBR);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	691a      	ldr	r2, [r3, #16]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003708:	611a      	str	r2, [r3, #16]
  }

  /* CEC TX end interrupt ------------------------------------------------*/
  if ((reg & CEC_FLAG_TXEND) != 0U)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003710:	2b00      	cmp	r3, #0
 8003712:	d014      	beq.n	800373e <HAL_CEC_IRQHandler+0x15c>
  {
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_TXEND);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	691a      	ldr	r2, [r3, #16]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003722:	611a      	str	r2, [r3, #16]

    /* Tx process is ended, restore hcec->gState to Ready */
    hcec->gState = HAL_CEC_STATE_READY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2220      	movs	r2, #32
 8003728:	639a      	str	r2, [r3, #56]	; 0x38
    /* Call the Process Unlocked before calling the Tx call back API to give the possibility to
    start again the Transmission under the Tx call back API */
    __HAL_UNLOCK(hcec);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hcec->ErrorCode = HAL_CEC_ERROR_NONE;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->TxCpltCallback(hcec);
#else
    HAL_CEC_TxCpltCallback(hcec);
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f000 f83a 	bl	80037b2 <HAL_CEC_TxCpltCallback>
#endif /* USE_HAL_CEC_REGISTER_CALLBACKS */
  }

  /* ----------------------------Rx/Tx Error Management----------------------------------*/
  if ((reg & (CEC_ISR_RXOVR | CEC_ISR_BRE | CEC_ISR_SBPE | CEC_ISR_LBPE | CEC_ISR_RXACKE | CEC_ISR_TXUDR | CEC_ISR_TXERR |
 800373e:	68fa      	ldr	r2, [r7, #12]
 8003740:	f641 437c 	movw	r3, #7292	; 0x1c7c
 8003744:	4013      	ands	r3, r2
 8003746:	2b00      	cmp	r3, #0
 8003748:	d02f      	beq.n	80037aa <HAL_CEC_IRQHandler+0x1c8>
              CEC_ISR_TXACKE)) != 0U)
  {
    hcec->ErrorCode = reg;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	68fa      	ldr	r2, [r7, #12]
 800374e:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_CEC_CLEAR_FLAG(hcec, HAL_CEC_ERROR_RXOVR | HAL_CEC_ERROR_BRE | CEC_FLAG_LBPE | CEC_FLAG_SBPE |
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	6919      	ldr	r1, [r3, #16]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	f641 437c 	movw	r3, #7292	; 0x1c7c
 800375e:	430b      	orrs	r3, r1
 8003760:	6113      	str	r3, [r2, #16]
                         HAL_CEC_ERROR_RXACKE | HAL_CEC_ERROR_TXUDR | HAL_CEC_ERROR_TXERR | HAL_CEC_ERROR_TXACKE);


    if ((reg & (CEC_ISR_RXOVR | CEC_ISR_BRE | CEC_ISR_SBPE | CEC_ISR_LBPE | CEC_ISR_RXACKE)) != 0U)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8003768:	2b00      	cmp	r3, #0
 800376a:	d00e      	beq.n	800378a <HAL_CEC_IRQHandler+0x1a8>
    {
      hcec->Init.RxBuffer -= hcec->RxXferSize;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003774:	425b      	negs	r3, r3
 8003776:	441a      	add	r2, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	629a      	str	r2, [r3, #40]	; 0x28
      hcec->RxXferSize = 0U;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	865a      	strh	r2, [r3, #50]	; 0x32
      hcec->RxState = HAL_CEC_STATE_READY;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2220      	movs	r2, #32
 8003786:	63da      	str	r2, [r3, #60]	; 0x3c
 8003788:	e00c      	b.n	80037a4 <HAL_CEC_IRQHandler+0x1c2>
    }
    else if (((reg & CEC_ISR_ARBLST) == 0U) && ((reg & (CEC_ISR_TXUDR | CEC_ISR_TXERR | CEC_ISR_TXACKE)) != 0U))
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003790:	2b00      	cmp	r3, #0
 8003792:	d107      	bne.n	80037a4 <HAL_CEC_IRQHandler+0x1c2>
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800379a:	2b00      	cmp	r3, #0
 800379c:	d002      	beq.n	80037a4 <HAL_CEC_IRQHandler+0x1c2>
    {
      /* Set the CEC state ready to be able to start again the process */
      hcec->gState = HAL_CEC_STATE_READY;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2220      	movs	r2, #32
 80037a2:	639a      	str	r2, [r3, #56]	; 0x38
    }
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->ErrorCallback(hcec);
#else
    /* Error  Call Back */
    HAL_CEC_ErrorCallback(hcec);
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f000 f819 	bl	80037dc <HAL_CEC_ErrorCallback>
  }
  else
  {
    /* Nothing todo*/
  }
}
 80037aa:	bf00      	nop
 80037ac:	3710      	adds	r7, #16
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}

080037b2 <HAL_CEC_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hcec CEC handle
  * @retval None
  */
__weak void HAL_CEC_TxCpltCallback(CEC_HandleTypeDef *hcec)
{
 80037b2:	b480      	push	{r7}
 80037b4:	b083      	sub	sp, #12
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hcec);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_TxCpltCallback can be implemented in the user file
   */
}
 80037ba:	bf00      	nop
 80037bc:	370c      	adds	r7, #12
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr

080037c6 <HAL_CEC_RxCpltCallback>:
  * @param hcec CEC handle
  * @param RxFrameSize Size of frame
  * @retval None
  */
__weak void HAL_CEC_RxCpltCallback(CEC_HandleTypeDef *hcec, uint32_t RxFrameSize)
{
 80037c6:	b480      	push	{r7}
 80037c8:	b083      	sub	sp, #12
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	6078      	str	r0, [r7, #4]
 80037ce:	6039      	str	r1, [r7, #0]
  UNUSED(hcec);
  UNUSED(RxFrameSize);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_RxCpltCallback can be implemented in the user file
   */
}
 80037d0:	bf00      	nop
 80037d2:	370c      	adds	r7, #12
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr

080037dc <HAL_CEC_ErrorCallback>:
  * @brief CEC error callbacks
  * @param hcec CEC handle
  * @retval None
  */
__weak void HAL_CEC_ErrorCallback(CEC_HandleTypeDef *hcec)
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hcec);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_ErrorCallback can be implemented in the user file
   */
}
 80037e4:	bf00      	nop
 80037e6:	370c      	adds	r7, #12
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b085      	sub	sp, #20
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f003 0307 	and.w	r3, r3, #7
 80037fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003800:	4b0b      	ldr	r3, [pc, #44]	; (8003830 <__NVIC_SetPriorityGrouping+0x40>)
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003806:	68ba      	ldr	r2, [r7, #8]
 8003808:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800380c:	4013      	ands	r3, r2
 800380e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003818:	4b06      	ldr	r3, [pc, #24]	; (8003834 <__NVIC_SetPriorityGrouping+0x44>)
 800381a:	4313      	orrs	r3, r2
 800381c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800381e:	4a04      	ldr	r2, [pc, #16]	; (8003830 <__NVIC_SetPriorityGrouping+0x40>)
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	60d3      	str	r3, [r2, #12]
}
 8003824:	bf00      	nop
 8003826:	3714      	adds	r7, #20
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr
 8003830:	e000ed00 	.word	0xe000ed00
 8003834:	05fa0000 	.word	0x05fa0000

08003838 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003838:	b480      	push	{r7}
 800383a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800383c:	4b04      	ldr	r3, [pc, #16]	; (8003850 <__NVIC_GetPriorityGrouping+0x18>)
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	0a1b      	lsrs	r3, r3, #8
 8003842:	f003 0307 	and.w	r3, r3, #7
}
 8003846:	4618      	mov	r0, r3
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr
 8003850:	e000ed00 	.word	0xe000ed00

08003854 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	4603      	mov	r3, r0
 800385c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800385e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003862:	2b00      	cmp	r3, #0
 8003864:	db0b      	blt.n	800387e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003866:	79fb      	ldrb	r3, [r7, #7]
 8003868:	f003 021f 	and.w	r2, r3, #31
 800386c:	4907      	ldr	r1, [pc, #28]	; (800388c <__NVIC_EnableIRQ+0x38>)
 800386e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003872:	095b      	lsrs	r3, r3, #5
 8003874:	2001      	movs	r0, #1
 8003876:	fa00 f202 	lsl.w	r2, r0, r2
 800387a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800387e:	bf00      	nop
 8003880:	370c      	adds	r7, #12
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	e000e100 	.word	0xe000e100

08003890 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	4603      	mov	r3, r0
 8003898:	6039      	str	r1, [r7, #0]
 800389a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800389c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	db0a      	blt.n	80038ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	b2da      	uxtb	r2, r3
 80038a8:	490c      	ldr	r1, [pc, #48]	; (80038dc <__NVIC_SetPriority+0x4c>)
 80038aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ae:	0112      	lsls	r2, r2, #4
 80038b0:	b2d2      	uxtb	r2, r2
 80038b2:	440b      	add	r3, r1
 80038b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038b8:	e00a      	b.n	80038d0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	b2da      	uxtb	r2, r3
 80038be:	4908      	ldr	r1, [pc, #32]	; (80038e0 <__NVIC_SetPriority+0x50>)
 80038c0:	79fb      	ldrb	r3, [r7, #7]
 80038c2:	f003 030f 	and.w	r3, r3, #15
 80038c6:	3b04      	subs	r3, #4
 80038c8:	0112      	lsls	r2, r2, #4
 80038ca:	b2d2      	uxtb	r2, r2
 80038cc:	440b      	add	r3, r1
 80038ce:	761a      	strb	r2, [r3, #24]
}
 80038d0:	bf00      	nop
 80038d2:	370c      	adds	r7, #12
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr
 80038dc:	e000e100 	.word	0xe000e100
 80038e0:	e000ed00 	.word	0xe000ed00

080038e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b089      	sub	sp, #36	; 0x24
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	60f8      	str	r0, [r7, #12]
 80038ec:	60b9      	str	r1, [r7, #8]
 80038ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f003 0307 	and.w	r3, r3, #7
 80038f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	f1c3 0307 	rsb	r3, r3, #7
 80038fe:	2b04      	cmp	r3, #4
 8003900:	bf28      	it	cs
 8003902:	2304      	movcs	r3, #4
 8003904:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	3304      	adds	r3, #4
 800390a:	2b06      	cmp	r3, #6
 800390c:	d902      	bls.n	8003914 <NVIC_EncodePriority+0x30>
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	3b03      	subs	r3, #3
 8003912:	e000      	b.n	8003916 <NVIC_EncodePriority+0x32>
 8003914:	2300      	movs	r3, #0
 8003916:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003918:	f04f 32ff 	mov.w	r2, #4294967295
 800391c:	69bb      	ldr	r3, [r7, #24]
 800391e:	fa02 f303 	lsl.w	r3, r2, r3
 8003922:	43da      	mvns	r2, r3
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	401a      	ands	r2, r3
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800392c:	f04f 31ff 	mov.w	r1, #4294967295
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	fa01 f303 	lsl.w	r3, r1, r3
 8003936:	43d9      	mvns	r1, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800393c:	4313      	orrs	r3, r2
         );
}
 800393e:	4618      	mov	r0, r3
 8003940:	3724      	adds	r7, #36	; 0x24
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr

0800394a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800394a:	b580      	push	{r7, lr}
 800394c:	b082      	sub	sp, #8
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f7ff ff4c 	bl	80037f0 <__NVIC_SetPriorityGrouping>
}
 8003958:	bf00      	nop
 800395a:	3708      	adds	r7, #8
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003960:	b580      	push	{r7, lr}
 8003962:	b086      	sub	sp, #24
 8003964:	af00      	add	r7, sp, #0
 8003966:	4603      	mov	r3, r0
 8003968:	60b9      	str	r1, [r7, #8]
 800396a:	607a      	str	r2, [r7, #4]
 800396c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800396e:	2300      	movs	r3, #0
 8003970:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003972:	f7ff ff61 	bl	8003838 <__NVIC_GetPriorityGrouping>
 8003976:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	68b9      	ldr	r1, [r7, #8]
 800397c:	6978      	ldr	r0, [r7, #20]
 800397e:	f7ff ffb1 	bl	80038e4 <NVIC_EncodePriority>
 8003982:	4602      	mov	r2, r0
 8003984:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003988:	4611      	mov	r1, r2
 800398a:	4618      	mov	r0, r3
 800398c:	f7ff ff80 	bl	8003890 <__NVIC_SetPriority>
}
 8003990:	bf00      	nop
 8003992:	3718      	adds	r7, #24
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}

08003998 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b082      	sub	sp, #8
 800399c:	af00      	add	r7, sp, #0
 800399e:	4603      	mov	r3, r0
 80039a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039a6:	4618      	mov	r0, r3
 80039a8:	f7ff ff54 	bl	8003854 <__NVIC_EnableIRQ>
}
 80039ac:	bf00      	nop
 80039ae:	3708      	adds	r7, #8
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b082      	sub	sp, #8
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d101      	bne.n	80039c6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e054      	b.n	8003a70 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	7f5b      	ldrb	r3, [r3, #29]
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d105      	bne.n	80039dc <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f7fe f99a 	bl	8001d10 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2202      	movs	r2, #2
 80039e0:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	791b      	ldrb	r3, [r3, #4]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d10c      	bne.n	8003a04 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a22      	ldr	r2, [pc, #136]	; (8003a78 <HAL_CRC_Init+0xc4>)
 80039f0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	689a      	ldr	r2, [r3, #8]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f022 0218 	bic.w	r2, r2, #24
 8003a00:	609a      	str	r2, [r3, #8]
 8003a02:	e00c      	b.n	8003a1e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6899      	ldr	r1, [r3, #8]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f000 f834 	bl	8003a7c <HAL_CRCEx_Polynomial_Set>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d001      	beq.n	8003a1e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e028      	b.n	8003a70 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	795b      	ldrb	r3, [r3, #5]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d105      	bne.n	8003a32 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f04f 32ff 	mov.w	r2, #4294967295
 8003a2e:	611a      	str	r2, [r3, #16]
 8003a30:	e004      	b.n	8003a3c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	6912      	ldr	r2, [r2, #16]
 8003a3a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	695a      	ldr	r2, [r3, #20]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	430a      	orrs	r2, r1
 8003a50:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	699a      	ldr	r2, [r3, #24]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	430a      	orrs	r2, r1
 8003a66:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8003a6e:	2300      	movs	r3, #0
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3708      	adds	r7, #8
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	04c11db7 	.word	0x04c11db7

08003a7c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b087      	sub	sp, #28
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	60f8      	str	r0, [r7, #12]
 8003a84:	60b9      	str	r1, [r7, #8]
 8003a86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003a8c:	231f      	movs	r3, #31
 8003a8e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003a90:	bf00      	nop
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	1e5a      	subs	r2, r3, #1
 8003a96:	613a      	str	r2, [r7, #16]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d009      	beq.n	8003ab0 <HAL_CRCEx_Polynomial_Set+0x34>
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	f003 031f 	and.w	r3, r3, #31
 8003aa2:	68ba      	ldr	r2, [r7, #8]
 8003aa4:	fa22 f303 	lsr.w	r3, r2, r3
 8003aa8:	f003 0301 	and.w	r3, r3, #1
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d0f0      	beq.n	8003a92 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2b18      	cmp	r3, #24
 8003ab4:	d846      	bhi.n	8003b44 <HAL_CRCEx_Polynomial_Set+0xc8>
 8003ab6:	a201      	add	r2, pc, #4	; (adr r2, 8003abc <HAL_CRCEx_Polynomial_Set+0x40>)
 8003ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003abc:	08003b4b 	.word	0x08003b4b
 8003ac0:	08003b45 	.word	0x08003b45
 8003ac4:	08003b45 	.word	0x08003b45
 8003ac8:	08003b45 	.word	0x08003b45
 8003acc:	08003b45 	.word	0x08003b45
 8003ad0:	08003b45 	.word	0x08003b45
 8003ad4:	08003b45 	.word	0x08003b45
 8003ad8:	08003b45 	.word	0x08003b45
 8003adc:	08003b39 	.word	0x08003b39
 8003ae0:	08003b45 	.word	0x08003b45
 8003ae4:	08003b45 	.word	0x08003b45
 8003ae8:	08003b45 	.word	0x08003b45
 8003aec:	08003b45 	.word	0x08003b45
 8003af0:	08003b45 	.word	0x08003b45
 8003af4:	08003b45 	.word	0x08003b45
 8003af8:	08003b45 	.word	0x08003b45
 8003afc:	08003b2d 	.word	0x08003b2d
 8003b00:	08003b45 	.word	0x08003b45
 8003b04:	08003b45 	.word	0x08003b45
 8003b08:	08003b45 	.word	0x08003b45
 8003b0c:	08003b45 	.word	0x08003b45
 8003b10:	08003b45 	.word	0x08003b45
 8003b14:	08003b45 	.word	0x08003b45
 8003b18:	08003b45 	.word	0x08003b45
 8003b1c:	08003b21 	.word	0x08003b21
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	2b06      	cmp	r3, #6
 8003b24:	d913      	bls.n	8003b4e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003b2a:	e010      	b.n	8003b4e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	2b07      	cmp	r3, #7
 8003b30:	d90f      	bls.n	8003b52 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003b36:	e00c      	b.n	8003b52 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	2b0f      	cmp	r3, #15
 8003b3c:	d90b      	bls.n	8003b56 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003b42:	e008      	b.n	8003b56 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	75fb      	strb	r3, [r7, #23]
      break;
 8003b48:	e006      	b.n	8003b58 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003b4a:	bf00      	nop
 8003b4c:	e004      	b.n	8003b58 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003b4e:	bf00      	nop
 8003b50:	e002      	b.n	8003b58 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003b52:	bf00      	nop
 8003b54:	e000      	b.n	8003b58 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003b56:	bf00      	nop
  }
  if (status == HAL_OK)
 8003b58:	7dfb      	ldrb	r3, [r7, #23]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d10d      	bne.n	8003b7a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	68ba      	ldr	r2, [r7, #8]
 8003b64:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	f023 0118 	bic.w	r1, r3, #24
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	430a      	orrs	r2, r1
 8003b78:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8003b7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	371c      	adds	r7, #28
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr

08003b88 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b082      	sub	sp, #8
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d101      	bne.n	8003b9a <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e049      	b.n	8003c2e <HAL_DMA2D_Init+0xa6>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d106      	bne.n	8003bb4 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f7fe f8ce 	bl	8001d50 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2202      	movs	r2, #2
 8003bb8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	685a      	ldr	r2, [r3, #4]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	430a      	orrs	r2, r1
 8003bd0:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bd8:	f023 0107 	bic.w	r1, r3, #7
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	689a      	ldr	r2, [r3, #8]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	430a      	orrs	r2, r1
 8003be6:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bee:	4b12      	ldr	r3, [pc, #72]	; (8003c38 <HAL_DMA2D_Init+0xb0>)
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	68d1      	ldr	r1, [r2, #12]
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	6812      	ldr	r2, [r2, #0]
 8003bfa:	430b      	orrs	r3, r1
 8003bfc:	6413      	str	r3, [r2, #64]	; 0x40
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c04:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	691b      	ldr	r3, [r3, #16]
 8003c0c:	051a      	lsls	r2, r3, #20
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	695b      	ldr	r3, [r3, #20]
 8003c12:	055b      	lsls	r3, r3, #21
 8003c14:	431a      	orrs	r2, r3
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	430a      	orrs	r2, r1
 8003c1c:	635a      	str	r2, [r3, #52]	; 0x34
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2200      	movs	r2, #0
 8003c22:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003c2c:	2300      	movs	r3, #0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3708      	adds	r7, #8
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	ffffc000 	.word	0xffffc000

08003c3c <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f003 0301 	and.w	r3, r3, #1
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d026      	beq.n	8003cac <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d021      	beq.n	8003cac <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c76:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c7c:	f043 0201 	orr.w	r2, r3, #1
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	655a      	str	r2, [r3, #84]	; 0x54

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2204      	movs	r2, #4
 8003c90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if(hdma2d->XferErrorCallback != NULL)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	69db      	ldr	r3, [r3, #28]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d003      	beq.n	8003cac <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	69db      	ldr	r3, [r3, #28]
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f003 0320 	and.w	r3, r3, #32
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d026      	beq.n	8003d04 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d021      	beq.n	8003d04 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003cce:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	2220      	movs	r2, #32
 8003cd6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cdc:	f043 0202 	orr.w	r2, r3, #2
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2204      	movs	r2, #4
 8003ce8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if(hdma2d->XferErrorCallback != NULL)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	69db      	ldr	r3, [r3, #28]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d003      	beq.n	8003d04 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	69db      	ldr	r3, [r3, #28]
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f003 0308 	and.w	r3, r3, #8
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d026      	beq.n	8003d5c <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d021      	beq.n	8003d5c <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d26:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2208      	movs	r2, #8
 8003d2e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d34:	f043 0204 	orr.w	r2, r3, #4
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2204      	movs	r2, #4
 8003d40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if(hdma2d->XferErrorCallback != NULL)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	69db      	ldr	r3, [r3, #28]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d003      	beq.n	8003d5c <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	69db      	ldr	r3, [r3, #28]
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f003 0304 	and.w	r3, r3, #4
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d013      	beq.n	8003d8e <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d00e      	beq.n	8003d8e <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d7e:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2204      	movs	r2, #4
 8003d86:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f000 f853 	bl	8003e34 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	f003 0302 	and.w	r3, r3, #2
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d024      	beq.n	8003de2 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d01f      	beq.n	8003de2 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003db0:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	2202      	movs	r2, #2
 8003db8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if(hdma2d->XferCpltCallback != NULL)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	699b      	ldr	r3, [r3, #24]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d003      	beq.n	8003de2 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	699b      	ldr	r3, [r3, #24]
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	f003 0310 	and.w	r3, r3, #16
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d01f      	beq.n	8003e2c <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d01a      	beq.n	8003e2c <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003e04:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2210      	movs	r2, #16
 8003e0c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2201      	movs	r2, #1
 8003e1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f000 f80e 	bl	8003e48 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8003e2c:	bf00      	nop
 8003e2e:	3710      	adds	r7, #16
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8003e3c:	bf00      	nop
 8003e3e:	370c      	adds	r7, #12
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr

08003e48 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8003e50:	bf00      	nop
 8003e52:	370c      	adds	r7, #12
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b087      	sub	sp, #28
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d101      	bne.n	8003e7c <HAL_DMA2D_ConfigLayer+0x20>
 8003e78:	2302      	movs	r3, #2
 8003e7a:	e084      	b.n	8003f86 <HAL_DMA2D_ConfigLayer+0x12a>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2202      	movs	r2, #2
 8003e88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003e8c:	683a      	ldr	r2, [r7, #0]
 8003e8e:	4613      	mov	r3, r2
 8003e90:	005b      	lsls	r3, r3, #1
 8003e92:	4413      	add	r3, r2
 8003e94:	00db      	lsls	r3, r3, #3
 8003e96:	3320      	adds	r3, #32
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	4413      	add	r3, r2
 8003e9c:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	685a      	ldr	r2, [r3, #4]
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	041b      	lsls	r3, r3, #16
 8003ea8:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	691b      	ldr	r3, [r3, #16]
 8003eae:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 8003eb0:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	695b      	ldr	r3, [r3, #20]
 8003eb6:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	617b      	str	r3, [r7, #20]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8003ebc:	4b35      	ldr	r3, [pc, #212]	; (8003f94 <HAL_DMA2D_ConfigLayer+0x138>)
 8003ebe:	60fb      	str	r3, [r7, #12]
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	2b0a      	cmp	r3, #10
 8003ec6:	d003      	beq.n	8003ed0 <HAL_DMA2D_ConfigLayer+0x74>
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	2b09      	cmp	r3, #9
 8003ece:	d107      	bne.n	8003ee0 <HAL_DMA2D_ConfigLayer+0x84>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003ed8:	697a      	ldr	r2, [r7, #20]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	617b      	str	r3, [r7, #20]
 8003ede:	e005      	b.n	8003eec <HAL_DMA2D_ConfigLayer+0x90>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	061b      	lsls	r3, r3, #24
 8003ee6:	697a      	ldr	r2, [r7, #20]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d120      	bne.n	8003f34 <HAL_DMA2D_ConfigLayer+0xd8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	43db      	mvns	r3, r3
 8003efc:	ea02 0103 	and.w	r1, r2, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	697a      	ldr	r2, [r7, #20]
 8003f06:	430a      	orrs	r2, r1
 8003f08:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	693a      	ldr	r2, [r7, #16]
 8003f10:	6812      	ldr	r2, [r2, #0]
 8003f12:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	2b0a      	cmp	r3, #10
 8003f1a:	d003      	beq.n	8003f24 <HAL_DMA2D_ConfigLayer+0xc8>
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	2b09      	cmp	r3, #9
 8003f22:	d127      	bne.n	8003f74 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	68da      	ldr	r2, [r3, #12]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003f30:	629a      	str	r2, [r3, #40]	; 0x28
 8003f32:	e01f      	b.n	8003f74 <HAL_DMA2D_ConfigLayer+0x118>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	69da      	ldr	r2, [r3, #28]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	43db      	mvns	r3, r3
 8003f3e:	ea02 0103 	and.w	r1, r2, r3
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	697a      	ldr	r2, [r7, #20]
 8003f48:	430a      	orrs	r2, r1
 8003f4a:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	693a      	ldr	r2, [r7, #16]
 8003f52:	6812      	ldr	r2, [r2, #0]
 8003f54:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	2b0a      	cmp	r3, #10
 8003f5c:	d003      	beq.n	8003f66 <HAL_DMA2D_ConfigLayer+0x10a>
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	2b09      	cmp	r3, #9
 8003f64:	d106      	bne.n	8003f74 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	68da      	ldr	r2, [r3, #12]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003f72:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003f84:	2300      	movs	r3, #0
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	371c      	adds	r7, #28
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr
 8003f92:	bf00      	nop
 8003f94:	ff33000f 	.word	0xff33000f

08003f98 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b088      	sub	sp, #32
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d101      	bne.n	8003fac <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e106      	b.n	80041ba <HAL_DSI_Init+0x222>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	7c5b      	ldrb	r3, [r3, #17]
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d102      	bne.n	8003fbc <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f7fd fef0 	bl	8001d9c <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2203      	movs	r2, #3
 8003fc0:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	613b      	str	r3, [r7, #16]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003fd6:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003fe2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fe6:	613b      	str	r3, [r7, #16]
 8003fe8:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003fea:	f7fe fff9 	bl	8002fe0 <HAL_GetTick>
 8003fee:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8003ff0:	e009      	b.n	8004006 <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003ff2:	f7fe fff5 	bl	8002fe0 <HAL_GetTick>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	69fb      	ldr	r3, [r7, #28]
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004000:	d901      	bls.n	8004006 <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e0d9      	b.n	80041ba <HAL_DSI_Init+0x222>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800400e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004012:	2b00      	cmp	r3, #0
 8004014:	d0ed      	beq.n	8003ff2 <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	4b68      	ldr	r3, [pc, #416]	; (80041c4 <HAL_DSI_Init+0x22c>)
 8004024:	400b      	ands	r3, r1
 8004026:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	009a      	lsls	r2, r3, #2
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	02db      	lsls	r3, r3, #11
 800403e:	431a      	orrs	r2, r3
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	041b      	lsls	r3, r3, #16
 8004046:	431a      	orrs	r2, r3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	430a      	orrs	r2, r1
 800404e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8004052:	2300      	movs	r3, #0
 8004054:	60fb      	str	r3, [r7, #12]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f042 0201 	orr.w	r2, r2, #1
 8004066:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8004072:	f003 0301 	and.w	r3, r3, #1
 8004076:	60fb      	str	r3, [r7, #12]
 8004078:	68fb      	ldr	r3, [r7, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800407a:	f7fe ffb1 	bl	8002fe0 <HAL_GetTick>
 800407e:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8004080:	e009      	b.n	8004096 <HAL_DSI_Init+0xfe>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8004082:	f7fe ffad 	bl	8002fe0 <HAL_GetTick>
 8004086:	4602      	mov	r2, r0
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004090:	d901      	bls.n	8004096 <HAL_DSI_Init+0xfe>
    {
      return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e091      	b.n	80041ba <HAL_DSI_Init+0x222>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800409e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d0ed      	beq.n	8004082 <HAL_DSI_Init+0xea>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f042 0206 	orr.w	r2, r2, #6
 80040b6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f022 0203 	bic.w	r2, r2, #3
 80040ca:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	431a      	orrs	r2, r3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f042 0201 	orr.w	r2, r2, #1
 80040e4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f022 0203 	bic.w	r2, r2, #3
 80040f8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	68da      	ldr	r2, [r3, #12]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	430a      	orrs	r2, r1
 800410e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	689a      	ldr	r2, [r3, #8]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004120:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	6899      	ldr	r1, [r3, #8]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	689a      	ldr	r2, [r3, #8]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	430a      	orrs	r2, r1
 8004132:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d002      	beq.n	8004142 <HAL_DSI_Init+0x1aa>
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	e000      	b.n	8004144 <HAL_DSI_Init+0x1ac>
 8004142:	2301      	movs	r3, #1
 8004144:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8004146:	69bb      	ldr	r3, [r7, #24]
 8004148:	4a1f      	ldr	r2, [pc, #124]	; (80041c8 <HAL_DSI_Init+0x230>)
 800414a:	fb02 f203 	mul.w	r2, r2, r3
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	f003 0303 	and.w	r3, r3, #3
 8004156:	409a      	lsls	r2, r3
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8004160:	fb01 f303 	mul.w	r3, r1, r3
 8004164:	fbb2 f3f3 	udiv	r3, r2, r3
 8004168:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800417a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	697a      	ldr	r2, [r7, #20]
 800418c:	430a      	orrs	r2, r1
 800418e:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	2200      	movs	r2, #0
 8004198:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2200      	movs	r2, #0
 80041a2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	619a      	str	r2, [r3, #24]

  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2201      	movs	r2, #1
 80041b6:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3720      	adds	r7, #32
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	fffc8603 	.word	0xfffc8603
 80041c8:	003d0900 	.word	0x003d0900

080041cc <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @ref DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	7c1b      	ldrb	r3, [r3, #16]
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d101      	bne.n	80041e2 <HAL_DSI_ConfigErrorMonitor+0x16>
 80041de:	2302      	movs	r3, #2
 80041e0:	e0aa      	b.n	8004338 <HAL_DSI_ConfigErrorMonitor+0x16c>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2201      	movs	r2, #1
 80041e6:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	2200      	movs	r2, #0
 80041ee:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	2200      	movs	r2, #0
 80041f8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	683a      	ldr	r2, [r7, #0]
 8004200:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	f003 0301 	and.w	r3, r3, #1
 8004208:	2b00      	cmp	r3, #0
 800420a:	d00a      	beq.n	8004222 <HAL_DSI_ConfigErrorMonitor+0x56>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800421c:	430b      	orrs	r3, r1
 800421e:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	f003 0302 	and.w	r3, r3, #2
 8004228:	2b00      	cmp	r3, #0
 800422a:	d009      	beq.n	8004240 <HAL_DSI_ConfigErrorMonitor+0x74>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 800423c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	f003 0304 	and.w	r3, r3, #4
 8004246:	2b00      	cmp	r3, #0
 8004248:	d009      	beq.n	800425e <HAL_DSI_ConfigErrorMonitor+0x92>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f042 0201 	orr.w	r2, r2, #1
 800425a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	f003 0308 	and.w	r3, r3, #8
 8004264:	2b00      	cmp	r3, #0
 8004266:	d009      	beq.n	800427c <HAL_DSI_ConfigErrorMonitor+0xb0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f042 0202 	orr.w	r2, r2, #2
 8004278:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	f003 0310 	and.w	r3, r3, #16
 8004282:	2b00      	cmp	r3, #0
 8004284:	d009      	beq.n	800429a <HAL_DSI_ConfigErrorMonitor+0xce>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f042 020c 	orr.w	r2, r2, #12
 8004296:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	f003 0320 	and.w	r3, r3, #32
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d009      	beq.n	80042b8 <HAL_DSI_ConfigErrorMonitor+0xec>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f042 0210 	orr.w	r2, r2, #16
 80042b4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d009      	beq.n	80042d6 <HAL_DSI_ConfigErrorMonitor+0x10a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f042 0220 	orr.w	r2, r2, #32
 80042d2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d009      	beq.n	80042f4 <HAL_DSI_ConfigErrorMonitor+0x128>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042f0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d009      	beq.n	8004312 <HAL_DSI_ConfigErrorMonitor+0x146>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800430e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004318:	2b00      	cmp	r3, #0
 800431a:	d009      	beq.n	8004330 <HAL_DSI_ConfigErrorMonitor+0x164>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 800432c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004336:	2300      	movs	r3, #0
}
 8004338:	4618      	mov	r0, r3
 800433a:	370c      	adds	r7, #12
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr

08004344 <HAL_DSI_IRQHandler>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b084      	sub	sp, #16
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  uint32_t ErrorStatus0, ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8004354:	f003 0301 	and.w	r3, r3, #1
 8004358:	2b00      	cmp	r3, #0
 800435a:	d00f      	beq.n	800437c <HAL_DSI_IRQHandler+0x38>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8004364:	f003 0301 	and.w	r3, r3, #1
 8004368:	2b00      	cmp	r3, #0
 800436a:	d007      	beq.n	800437c <HAL_DSI_IRQHandler+0x38>
    {
      /* Clear the Tearing Effect Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	2201      	movs	r2, #1
 8004372:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Tearing Effect callback */
      hdsi->TearingEffectCallback(hdsi);
#else
      /*Call legacy Tearing Effect callback*/
      HAL_DSI_TearingEffectCallback(hdsi);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f000 f8ad 	bl	80044d6 <HAL_DSI_TearingEffectCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8004384:	f003 0302 	and.w	r3, r3, #2
 8004388:	2b00      	cmp	r3, #0
 800438a:	d00f      	beq.n	80043ac <HAL_DSI_IRQHandler+0x68>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8004394:	f003 0302 	and.w	r3, r3, #2
 8004398:	2b00      	cmp	r3, #0
 800439a:	d007      	beq.n	80043ac <HAL_DSI_IRQHandler+0x68>
    {
      /* Clear the End of Refresh Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2202      	movs	r2, #2
 80043a2:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered End of refresh callback */
      hdsi->EndOfRefreshCallback(hdsi);
#else
      /*Call Legacy End of refresh callback */
      HAL_DSI_EndOfRefreshCallback(hdsi);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f000 f89f 	bl	80044ea <HAL_DSI_EndOfRefreshCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	699b      	ldr	r3, [r3, #24]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	f000 808c 	beq.w	80044ce <HAL_DSI_IRQHandler+0x18a>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80043be:	60fb      	str	r3, [r7, #12]
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80043c8:	68fa      	ldr	r2, [r7, #12]
 80043ca:	4013      	ands	r3, r2
 80043cc:	60fb      	str	r3, [r7, #12]
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80043d6:	60bb      	str	r3, [r7, #8]
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80043e0:	68ba      	ldr	r2, [r7, #8]
 80043e2:	4013      	ands	r3, r2
 80043e4:	60bb      	str	r3, [r7, #8]

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d005      	beq.n	80043fa <HAL_DSI_IRQHandler+0xb6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	695b      	ldr	r3, [r3, #20]
 80043f2:	f043 0201 	orr.w	r2, r3, #1
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8004400:	2b00      	cmp	r3, #0
 8004402:	d005      	beq.n	8004410 <HAL_DSI_IRQHandler+0xcc>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	695b      	ldr	r3, [r3, #20]
 8004408:	f043 0202 	orr.w	r2, r3, #2
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	f003 0301 	and.w	r3, r3, #1
 8004416:	2b00      	cmp	r3, #0
 8004418:	d005      	beq.n	8004426 <HAL_DSI_IRQHandler+0xe2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	695b      	ldr	r3, [r3, #20]
 800441e:	f043 0204 	orr.w	r2, r3, #4
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	f003 0302 	and.w	r3, r3, #2
 800442c:	2b00      	cmp	r3, #0
 800442e:	d005      	beq.n	800443c <HAL_DSI_IRQHandler+0xf8>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	695b      	ldr	r3, [r3, #20]
 8004434:	f043 0208 	orr.w	r2, r3, #8
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	f003 030c 	and.w	r3, r3, #12
 8004442:	2b00      	cmp	r3, #0
 8004444:	d005      	beq.n	8004452 <HAL_DSI_IRQHandler+0x10e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	695b      	ldr	r3, [r3, #20]
 800444a:	f043 0210 	orr.w	r2, r3, #16
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	f003 0310 	and.w	r3, r3, #16
 8004458:	2b00      	cmp	r3, #0
 800445a:	d005      	beq.n	8004468 <HAL_DSI_IRQHandler+0x124>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	695b      	ldr	r3, [r3, #20]
 8004460:	f043 0220 	orr.w	r2, r3, #32
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	f003 0320 	and.w	r3, r3, #32
 800446e:	2b00      	cmp	r3, #0
 8004470:	d005      	beq.n	800447e <HAL_DSI_IRQHandler+0x13a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	695b      	ldr	r3, [r3, #20]
 8004476:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004484:	2b00      	cmp	r3, #0
 8004486:	d005      	beq.n	8004494 <HAL_DSI_IRQHandler+0x150>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	695b      	ldr	r3, [r3, #20]
 800448c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800449a:	2b00      	cmp	r3, #0
 800449c:	d005      	beq.n	80044aa <HAL_DSI_IRQHandler+0x166>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	695b      	ldr	r3, [r3, #20]
 80044a2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d005      	beq.n	80044c0 <HAL_DSI_IRQHandler+0x17c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	695b      	ldr	r3, [r3, #20]
 80044b8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	615a      	str	r2, [r3, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	695b      	ldr	r3, [r3, #20]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d002      	beq.n	80044ce <HAL_DSI_IRQHandler+0x18a>
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Error callback */
      hdsi->ErrorCallback(hdsi);
#else
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f000 f818 	bl	80044fe <HAL_DSI_ErrorCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 80044ce:	bf00      	nop
 80044d0:	3710      	adds	r7, #16
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}

080044d6 <HAL_DSI_TearingEffectCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef *hdsi)
{
 80044d6:	b480      	push	{r7}
 80044d8:	b083      	sub	sp, #12
 80044da:	af00      	add	r7, sp, #0
 80044dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_TearingEffectCallback could be implemented in the user file
   */
}
 80044de:	bf00      	nop
 80044e0:	370c      	adds	r7, #12
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr

080044ea <HAL_DSI_EndOfRefreshCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef *hdsi)
{
 80044ea:	b480      	push	{r7}
 80044ec:	b083      	sub	sp, #12
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_EndOfRefreshCallback could be implemented in the user file
   */
}
 80044f2:	bf00      	nop
 80044f4:	370c      	adds	r7, #12
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr

080044fe <HAL_DSI_ErrorCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
{
 80044fe:	b480      	push	{r7}
 8004500:	b083      	sub	sp, #12
 8004502:	af00      	add	r7, sp, #0
 8004504:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_ErrorCallback could be implemented in the user file
   */
}
 8004506:	bf00      	nop
 8004508:	370c      	adds	r7, #12
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr

08004512 <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 8004512:	b480      	push	{r7}
 8004514:	b083      	sub	sp, #12
 8004516:	af00      	add	r7, sp, #0
 8004518:	6078      	str	r0, [r7, #4]
 800451a:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	7c1b      	ldrb	r3, [r3, #16]
 8004520:	2b01      	cmp	r3, #1
 8004522:	d101      	bne.n	8004528 <HAL_DSI_SetGenericVCID+0x16>
 8004524:	2302      	movs	r3, #2
 8004526:	e016      	b.n	8004556 <HAL_DSI_SetGenericVCID+0x44>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	741a      	strb	r2, [r3, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f022 0203 	bic.w	r2, r2, #3
 800453c:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	683a      	ldr	r2, [r7, #0]
 800454a:	430a      	orrs	r2, r1
 800454c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2200      	movs	r2, #0
 8004552:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004554:	2300      	movs	r3, #0
}
 8004556:	4618      	mov	r0, r3
 8004558:	370c      	adds	r7, #12
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr
	...

08004564 <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 8004564:	b480      	push	{r7}
 8004566:	b083      	sub	sp, #12
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	7c1b      	ldrb	r3, [r3, #16]
 8004572:	2b01      	cmp	r3, #1
 8004574:	d101      	bne.n	800457a <HAL_DSI_ConfigAdaptedCommandMode+0x16>
 8004576:	2302      	movs	r3, #2
 8004578:	e0c5      	b.n	8004706 <HAL_DSI_ConfigAdaptedCommandMode+0x1a2>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2201      	movs	r2, #1
 800457e:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f042 0201 	orr.w	r2, r2, #1
 800458e:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f022 0201 	bic.w	r2, r2, #1
 80045a0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f042 0201 	orr.w	r2, r2, #1
 80045b4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	68da      	ldr	r2, [r3, #12]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f022 0203 	bic.w	r2, r2, #3
 80045c6:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	68d9      	ldr	r1, [r3, #12]
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	430a      	orrs	r2, r1
 80045d8:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	695a      	ldr	r2, [r3, #20]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f022 0207 	bic.w	r2, r2, #7
 80045e8:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	6959      	ldr	r1, [r3, #20]
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	69da      	ldr	r2, [r3, #28]
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	699b      	ldr	r3, [r3, #24]
 80045f8:	431a      	orrs	r2, r3
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	695b      	ldr	r3, [r3, #20]
 80045fe:	431a      	orrs	r2, r3
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	430a      	orrs	r2, r1
 8004606:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	691a      	ldr	r2, [r3, #16]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f022 020f 	bic.w	r2, r2, #15
 8004616:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	6919      	ldr	r1, [r3, #16]
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	685a      	ldr	r2, [r3, #4]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	430a      	orrs	r2, r1
 8004628:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f022 020e 	bic.w	r2, r2, #14
 800463a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	005a      	lsls	r2, r3, #1
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	430a      	orrs	r2, r1
 8004652:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	6e59      	ldr	r1, [r3, #100]	; 0x64
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	4b2c      	ldr	r3, [pc, #176]	; (8004714 <HAL_DSI_ConfigAdaptedCommandMode+0x1b0>)
 8004662:	400b      	ands	r3, r1
 8004664:	6653      	str	r3, [r2, #100]	; 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	6e59      	ldr	r1, [r3, #100]	; 0x64
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	689a      	ldr	r2, [r3, #8]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	430a      	orrs	r2, r1
 8004676:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004688:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	68da      	ldr	r2, [r3, #12]
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	691b      	ldr	r3, [r3, #16]
 800469c:	431a      	orrs	r2, r3
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a2:	431a      	orrs	r2, r3
                            CmdCfg->VSyncPol);
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	6a1b      	ldr	r3, [r3, #32]
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 80046a8:	431a      	orrs	r2, r3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	430a      	orrs	r2, r1
 80046b0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f022 0201 	bic.w	r2, r2, #1
 80046c2:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	6e99      	ldr	r1, [r3, #104]	; 0x68
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	430a      	orrs	r2, r1
 80046d4:	669a      	str	r2, [r3, #104]	; 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f042 0201 	orr.w	r2, r2, #1
 80046e6:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f042 0202 	orr.w	r2, r2, #2
 80046fa:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004704:	2300      	movs	r3, #0
}
 8004706:	4618      	mov	r0, r3
 8004708:	370c      	adds	r7, #12
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr
 8004712:	bf00      	nop
 8004714:	ffff0000 	.word	0xffff0000

08004718 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 8004718:	b480      	push	{r7}
 800471a:	b083      	sub	sp, #12
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	7c1b      	ldrb	r3, [r3, #16]
 8004726:	2b01      	cmp	r3, #1
 8004728:	d101      	bne.n	800472e <HAL_DSI_ConfigCommand+0x16>
 800472a:	2302      	movs	r3, #2
 800472c:	e049      	b.n	80047c2 <HAL_DSI_ConfigCommand+0xaa>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2201      	movs	r2, #1
 8004732:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	6e99      	ldr	r1, [r3, #104]	; 0x68
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	4b24      	ldr	r3, [pc, #144]	; (80047d0 <HAL_DSI_ConfigCommand+0xb8>)
 8004740:	400b      	ands	r3, r1
 8004742:	6693      	str	r3, [r2, #104]	; 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	6e99      	ldr	r1, [r3, #104]	; 0x68
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	681a      	ldr	r2, [r3, #0]
                           LPCmd->LPGenShortWriteOneP | \
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	685b      	ldr	r3, [r3, #4]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8004752:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortWriteTwoP | \
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	689b      	ldr	r3, [r3, #8]
                           LPCmd->LPGenShortWriteOneP | \
 8004758:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadNoP   | \
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	68db      	ldr	r3, [r3, #12]
                           LPCmd->LPGenShortWriteTwoP | \
 800475e:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadOneP  | \
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	691b      	ldr	r3, [r3, #16]
                           LPCmd->LPGenShortReadNoP   | \
 8004764:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadTwoP  | \
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	695b      	ldr	r3, [r3, #20]
                           LPCmd->LPGenShortReadOneP  | \
 800476a:	431a      	orrs	r2, r3
                           LPCmd->LPGenLongWrite      | \
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	699b      	ldr	r3, [r3, #24]
                           LPCmd->LPGenShortReadTwoP  | \
 8004770:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteNoP  | \
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	69db      	ldr	r3, [r3, #28]
                           LPCmd->LPGenLongWrite      | \
 8004776:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteOneP | \
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	6a1b      	ldr	r3, [r3, #32]
                           LPCmd->LPDcsShortWriteNoP  | \
 800477c:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortReadNoP   | \
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           LPCmd->LPDcsShortWriteOneP | \
 8004782:	431a      	orrs	r2, r3
                           LPCmd->LPDcsLongWrite      | \
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                           LPCmd->LPDcsShortReadNoP   | \
 8004788:	431a      	orrs	r2, r3
                           LPCmd->LPMaxReadPacket);
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                           LPCmd->LPDcsLongWrite      | \
 800478e:	431a      	orrs	r2, r3
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	430a      	orrs	r2, r1
 8004796:	669a      	str	r2, [r3, #104]	; 0x68

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f022 0202 	bic.w	r2, r2, #2
 80047a6:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	6e99      	ldr	r1, [r3, #104]	; 0x68
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	430a      	orrs	r2, r1
 80047b8:	669a      	str	r2, [r3, #104]	; 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80047c0:	2300      	movs	r3, #0
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	370c      	adds	r7, #12
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr
 80047ce:	bf00      	nop
 80047d0:	fef080ff 	.word	0xfef080ff

080047d4 <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @ref DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b083      	sub	sp, #12
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	7c1b      	ldrb	r3, [r3, #16]
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d101      	bne.n	80047ea <HAL_DSI_ConfigFlowControl+0x16>
 80047e6:	2302      	movs	r3, #2
 80047e8:	e016      	b.n	8004818 <HAL_DSI_ConfigFlowControl+0x44>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2201      	movs	r2, #1
 80047ee:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f022 021f 	bic.w	r2, r2, #31
 80047fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	683a      	ldr	r2, [r7, #0]
 800480c:	430a      	orrs	r2, r1
 800480e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2200      	movs	r2, #0
 8004814:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004816:	2300      	movs	r3, #0
}
 8004818:	4618      	mov	r0, r3
 800481a:	370c      	adds	r7, #12
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8004824:	b480      	push	{r7}
 8004826:	b085      	sub	sp, #20
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	7c1b      	ldrb	r3, [r3, #16]
 8004832:	2b01      	cmp	r3, #1
 8004834:	d101      	bne.n	800483a <HAL_DSI_ConfigPhyTimer+0x16>
 8004836:	2302      	movs	r3, #2
 8004838:	e058      	b.n	80048ec <HAL_DSI_ConfigPhyTimer+0xc8>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2201      	movs	r2, #1
 800483e:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	4293      	cmp	r3, r2
 800484a:	bf38      	it	cc
 800484c:	4613      	movcc	r3, r2
 800484e:	60fb      	str	r3, [r7, #12]
     This timings are configured by the HS2LP_TIME and LP2HS_TIME in the DSI Host Clock Lane Timer Configuration Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 8004860:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	041a      	lsls	r2, r3, #16
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	431a      	orrs	r2, r3
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	430a      	orrs	r2, r1
 800487a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 800488e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	691a      	ldr	r2, [r3, #16]
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	041b      	lsls	r3, r3, #16
 80048a4:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80048ac:	431a      	orrs	r2, r3
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	430a      	orrs	r2, r1
 80048b4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80048c8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	695b      	ldr	r3, [r3, #20]
 80048d8:	021a      	lsls	r2, r3, #8
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	430a      	orrs	r2, r1
 80048e0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2200      	movs	r2, #0
 80048e8:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80048ea:	2300      	movs	r3, #0
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3714      	adds	r7, #20
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr

080048f8 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b083      	sub	sp, #12
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	7c1b      	ldrb	r3, [r3, #16]
 8004906:	2b01      	cmp	r3, #1
 8004908:	d101      	bne.n	800490e <HAL_DSI_ConfigHostTimeouts+0x16>
 800490a:	2302      	movs	r3, #2
 800490c:	e0b4      	b.n	8004a78 <HAL_DSI_ConfigHostTimeouts+0x180>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2201      	movs	r2, #1
 8004912:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	689a      	ldr	r2, [r3, #8]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8004922:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	6899      	ldr	r1, [r3, #8]
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	021a      	lsls	r2, r3, #8
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	430a      	orrs	r2, r1
 8004936:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	b292      	uxth	r2, r2
 8004944:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	6f99      	ldr	r1, [r3, #120]	; 0x78
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	041a      	lsls	r2, r3, #16
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	430a      	orrs	r2, r1
 8004958:	679a      	str	r2, [r3, #120]	; 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	4b47      	ldr	r3, [pc, #284]	; (8004a84 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8004966:	400b      	ands	r3, r1
 8004968:	6793      	str	r3, [r2, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	689a      	ldr	r2, [r3, #8]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	430a      	orrs	r2, r1
 800497a:	679a      	str	r2, [r3, #120]	; 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	4b3f      	ldr	r3, [pc, #252]	; (8004a84 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8004988:	400b      	ands	r3, r1
 800498a:	67d3      	str	r3, [r2, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	68da      	ldr	r2, [r3, #12]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	430a      	orrs	r2, r1
 800499c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	4b36      	ldr	r3, [pc, #216]	; (8004a84 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 80049ac:	400b      	ands	r3, r1
 80049ae:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	691a      	ldr	r2, [r3, #16]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	430a      	orrs	r2, r1
 80049c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	4b2b      	ldr	r3, [pc, #172]	; (8004a84 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 80049d6:	400b      	ands	r3, r1
 80049d8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	695a      	ldr	r2, [r3, #20]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	430a      	orrs	r2, r1
 80049ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8004a02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	699a      	ldr	r2, [r3, #24]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	430a      	orrs	r2, r1
 8004a18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	4b16      	ldr	r3, [pc, #88]	; (8004a84 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8004a2a:	400b      	ands	r3, r1
 8004a2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	69da      	ldr	r2, [r3, #28]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	430a      	orrs	r2, r1
 8004a42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	4b0c      	ldr	r3, [pc, #48]	; (8004a84 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8004a54:	400b      	ands	r3, r1
 8004a56:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	6a1a      	ldr	r2, [r3, #32]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	430a      	orrs	r2, r1
 8004a6c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2200      	movs	r2, #0
 8004a74:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004a76:	2300      	movs	r3, #0
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	370c      	adds	r7, #12
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr
 8004a84:	ffff0000 	.word	0xffff0000

08004a88 <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b083      	sub	sp, #12
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
 8004a90:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	7c1b      	ldrb	r3, [r3, #16]
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d101      	bne.n	8004a9e <HAL_DSI_SetLowPowerRXFilter+0x16>
 8004a9a:	2302      	movs	r3, #2
 8004a9c:	e01b      	b.n	8004ad6 <HAL_DSI_SetLowPowerRXFilter+0x4e>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8004ab4:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	065a      	lsls	r2, r3, #25
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	430a      	orrs	r2, r1
 8004aca:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004ad4:	2300      	movs	r3, #0
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	370c      	adds	r7, #12
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr
	...

08004ae4 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b088      	sub	sp, #32
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8004aec:	2300      	movs	r3, #0
 8004aee:	61fb      	str	r3, [r7, #28]
 8004af0:	2300      	movs	r3, #0
 8004af2:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8004af4:	4ba9      	ldr	r3, [pc, #676]	; (8004d9c <HAL_ETH_Init+0x2b8>)
 8004af6:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8004af8:	2300      	movs	r3, #0
 8004afa:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8004afc:	2300      	movs	r3, #0
 8004afe:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d101      	bne.n	8004b0a <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e183      	b.n	8004e12 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d106      	bne.n	8004b24 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f7fd f988 	bl	8001e34 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b24:	4b9e      	ldr	r3, [pc, #632]	; (8004da0 <HAL_ETH_Init+0x2bc>)
 8004b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b28:	4a9d      	ldr	r2, [pc, #628]	; (8004da0 <HAL_ETH_Init+0x2bc>)
 8004b2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b2e:	6453      	str	r3, [r2, #68]	; 0x44
 8004b30:	4b9b      	ldr	r3, [pc, #620]	; (8004da0 <HAL_ETH_Init+0x2bc>)
 8004b32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b38:	60bb      	str	r3, [r7, #8]
 8004b3a:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8004b3c:	4b99      	ldr	r3, [pc, #612]	; (8004da4 <HAL_ETH_Init+0x2c0>)
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	4a98      	ldr	r2, [pc, #608]	; (8004da4 <HAL_ETH_Init+0x2c0>)
 8004b42:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004b46:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8004b48:	4b96      	ldr	r3, [pc, #600]	; (8004da4 <HAL_ETH_Init+0x2c0>)
 8004b4a:	685a      	ldr	r2, [r3, #4]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6a1b      	ldr	r3, [r3, #32]
 8004b50:	4994      	ldr	r1, [pc, #592]	; (8004da4 <HAL_ETH_Init+0x2c0>)
 8004b52:	4313      	orrs	r3, r2
 8004b54:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f042 0201 	orr.w	r2, r2, #1
 8004b68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b6c:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8004b6e:	f7fe fa37 	bl	8002fe0 <HAL_GetTick>
 8004b72:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8004b74:	e011      	b.n	8004b9a <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8004b76:	f7fe fa33 	bl	8002fe0 <HAL_GetTick>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	1ad3      	subs	r3, r2, r3
 8004b80:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004b84:	d909      	bls.n	8004b9a <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2203      	movs	r2, #3
 8004b8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8004b96:	2303      	movs	r3, #3
 8004b98:	e13b      	b.n	8004e12 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 0301 	and.w	r3, r3, #1
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d1e4      	bne.n	8004b76 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	691b      	ldr	r3, [r3, #16]
 8004bb2:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8004bb4:	69fb      	ldr	r3, [r7, #28]
 8004bb6:	f023 031c 	bic.w	r3, r3, #28
 8004bba:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004bbc:	f003 fc54 	bl	8008468 <HAL_RCC_GetHCLKFreq>
 8004bc0:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8004bc2:	69bb      	ldr	r3, [r7, #24]
 8004bc4:	4a78      	ldr	r2, [pc, #480]	; (8004da8 <HAL_ETH_Init+0x2c4>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d908      	bls.n	8004bdc <HAL_ETH_Init+0xf8>
 8004bca:	69bb      	ldr	r3, [r7, #24]
 8004bcc:	4a77      	ldr	r2, [pc, #476]	; (8004dac <HAL_ETH_Init+0x2c8>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d804      	bhi.n	8004bdc <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	f043 0308 	orr.w	r3, r3, #8
 8004bd8:	61fb      	str	r3, [r7, #28]
 8004bda:	e027      	b.n	8004c2c <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8004bdc:	69bb      	ldr	r3, [r7, #24]
 8004bde:	4a73      	ldr	r2, [pc, #460]	; (8004dac <HAL_ETH_Init+0x2c8>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d908      	bls.n	8004bf6 <HAL_ETH_Init+0x112>
 8004be4:	69bb      	ldr	r3, [r7, #24]
 8004be6:	4a72      	ldr	r2, [pc, #456]	; (8004db0 <HAL_ETH_Init+0x2cc>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d804      	bhi.n	8004bf6 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8004bec:	69fb      	ldr	r3, [r7, #28]
 8004bee:	f043 030c 	orr.w	r3, r3, #12
 8004bf2:	61fb      	str	r3, [r7, #28]
 8004bf4:	e01a      	b.n	8004c2c <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8004bf6:	69bb      	ldr	r3, [r7, #24]
 8004bf8:	4a6d      	ldr	r2, [pc, #436]	; (8004db0 <HAL_ETH_Init+0x2cc>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d903      	bls.n	8004c06 <HAL_ETH_Init+0x122>
 8004bfe:	69bb      	ldr	r3, [r7, #24]
 8004c00:	4a6c      	ldr	r2, [pc, #432]	; (8004db4 <HAL_ETH_Init+0x2d0>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d911      	bls.n	8004c2a <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8004c06:	69bb      	ldr	r3, [r7, #24]
 8004c08:	4a6a      	ldr	r2, [pc, #424]	; (8004db4 <HAL_ETH_Init+0x2d0>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d908      	bls.n	8004c20 <HAL_ETH_Init+0x13c>
 8004c0e:	69bb      	ldr	r3, [r7, #24]
 8004c10:	4a69      	ldr	r2, [pc, #420]	; (8004db8 <HAL_ETH_Init+0x2d4>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d804      	bhi.n	8004c20 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8004c16:	69fb      	ldr	r3, [r7, #28]
 8004c18:	f043 0304 	orr.w	r3, r3, #4
 8004c1c:	61fb      	str	r3, [r7, #28]
 8004c1e:	e005      	b.n	8004c2c <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8004c20:	69fb      	ldr	r3, [r7, #28]
 8004c22:	f043 0310 	orr.w	r3, r3, #16
 8004c26:	61fb      	str	r3, [r7, #28]
 8004c28:	e000      	b.n	8004c2c <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8004c2a:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	69fa      	ldr	r2, [r7, #28]
 8004c32:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8004c34:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004c38:	2100      	movs	r1, #0
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f000 f956 	bl	8004eec <HAL_ETH_WritePHYRegister>
 8004c40:	4603      	mov	r3, r0
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d00b      	beq.n	8004c5e <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8004c4a:	6939      	ldr	r1, [r7, #16]
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f000 f9b3 	bl	8004fb8 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2201      	movs	r2, #1
 8004c56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e0d9      	b.n	8004e12 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8004c5e:	f640 70ff 	movw	r0, #4095	; 0xfff
 8004c62:	f7fe f9c9 	bl	8002ff8 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	f000 80a6 	beq.w	8004dbc <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c70:	f7fe f9b6 	bl	8002fe0 <HAL_GetTick>
 8004c74:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8004c76:	f107 030c 	add.w	r3, r7, #12
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	2101      	movs	r1, #1
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f000 f8cc 	bl	8004e1c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8004c84:	f7fe f9ac 	bl	8002fe0 <HAL_GetTick>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d90f      	bls.n	8004cb6 <HAL_ETH_Init+0x1d2>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8004c9a:	6939      	ldr	r1, [r7, #16]
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f000 f98b 	bl	8004fb8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e0ad      	b.n	8004e12 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	f003 0304 	and.w	r3, r3, #4
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d0da      	beq.n	8004c76 <HAL_ETH_Init+0x192>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8004cc0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004cc4:	2100      	movs	r1, #0
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f000 f910 	bl	8004eec <HAL_ETH_WritePHYRegister>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d00b      	beq.n	8004cea <HAL_ETH_Init+0x206>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8004cd6:	6939      	ldr	r1, [r7, #16]
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f000 f96d 	bl	8004fb8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e093      	b.n	8004e12 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8004cea:	f7fe f979 	bl	8002fe0 <HAL_GetTick>
 8004cee:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8004cf0:	f107 030c 	add.w	r3, r7, #12
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	2101      	movs	r1, #1
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f000 f88f 	bl	8004e1c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8004cfe:	f7fe f96f 	bl	8002fe0 <HAL_GetTick>
 8004d02:	4602      	mov	r2, r0
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	1ad3      	subs	r3, r2, r3
 8004d08:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d90f      	bls.n	8004d30 <HAL_ETH_Init+0x24c>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8004d14:	6939      	ldr	r1, [r7, #16]
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f000 f94e 	bl	8004fb8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8004d2c:	2303      	movs	r3, #3
 8004d2e:	e070      	b.n	8004e12 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f003 0320 	and.w	r3, r3, #32
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d0da      	beq.n	8004cf0 <HAL_ETH_Init+0x20c>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8004d3a:	f107 030c 	add.w	r3, r7, #12
 8004d3e:	461a      	mov	r2, r3
 8004d40:	211f      	movs	r1, #31
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f000 f86a 	bl	8004e1c <HAL_ETH_ReadPHYRegister>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d00b      	beq.n	8004d66 <HAL_ETH_Init+0x282>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8004d52:	6939      	ldr	r1, [r7, #16]
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f000 f92f 	bl	8004fb8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8004d62:	2301      	movs	r3, #1
 8004d64:	e055      	b.n	8004e12 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	f003 0310 	and.w	r3, r3, #16
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d004      	beq.n	8004d7a <HAL_ETH_Init+0x296>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d76:	60da      	str	r2, [r3, #12]
 8004d78:	e002      	b.n	8004d80 <HAL_ETH_Init+0x29c>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f003 0304 	and.w	r3, r3, #4
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d003      	beq.n	8004d92 <HAL_ETH_Init+0x2ae>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	609a      	str	r2, [r3, #8]
 8004d90:	e036      	b.n	8004e00 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004d98:	609a      	str	r2, [r3, #8]
 8004d9a:	e031      	b.n	8004e00 <HAL_ETH_Init+0x31c>
 8004d9c:	03938700 	.word	0x03938700
 8004da0:	40023800 	.word	0x40023800
 8004da4:	40013800 	.word	0x40013800
 8004da8:	01312cff 	.word	0x01312cff
 8004dac:	02160ebf 	.word	0x02160ebf
 8004db0:	039386ff 	.word	0x039386ff
 8004db4:	05f5e0ff 	.word	0x05f5e0ff
 8004db8:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	68db      	ldr	r3, [r3, #12]
 8004dc0:	08db      	lsrs	r3, r3, #3
 8004dc2:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	085b      	lsrs	r3, r3, #1
 8004dca:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	461a      	mov	r2, r3
 8004dd2:	2100      	movs	r1, #0
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f000 f889 	bl	8004eec <HAL_ETH_WritePHYRegister>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d00b      	beq.n	8004df8 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8004de4:	6939      	ldr	r1, [r7, #16]
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f000 f8e6 	bl	8004fb8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2201      	movs	r2, #1
 8004df0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	e00c      	b.n	8004e12 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8004df8:	f640 70ff 	movw	r0, #4095	; 0xfff
 8004dfc:	f7fe f8fc 	bl	8002ff8 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8004e00:	6939      	ldr	r1, [r7, #16]
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f000 f8d8 	bl	8004fb8 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8004e10:	2300      	movs	r3, #0
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3720      	adds	r7, #32
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}
 8004e1a:	bf00      	nop

08004e1c <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b086      	sub	sp, #24
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	460b      	mov	r3, r1
 8004e26:	607a      	str	r2, [r7, #4]
 8004e28:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	2b82      	cmp	r3, #130	; 0x82
 8004e3c:	d101      	bne.n	8004e42 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8004e3e:	2302      	movs	r3, #2
 8004e40:	e050      	b.n	8004ee4 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2282      	movs	r2, #130	; 0x82
 8004e46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	691b      	ldr	r3, [r3, #16]
 8004e50:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	f003 031c 	and.w	r3, r3, #28
 8004e58:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	8a1b      	ldrh	r3, [r3, #16]
 8004e5e:	02db      	lsls	r3, r3, #11
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	697a      	ldr	r2, [r7, #20]
 8004e64:	4313      	orrs	r3, r2
 8004e66:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8004e68:	897b      	ldrh	r3, [r7, #10]
 8004e6a:	019b      	lsls	r3, r3, #6
 8004e6c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8004e70:	697a      	ldr	r2, [r7, #20]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	f023 0302 	bic.w	r3, r3, #2
 8004e7c:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	f043 0301 	orr.w	r3, r3, #1
 8004e84:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	697a      	ldr	r2, [r7, #20]
 8004e8c:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8004e8e:	f7fe f8a7 	bl	8002fe0 <HAL_GetTick>
 8004e92:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004e94:	e015      	b.n	8004ec2 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8004e96:	f7fe f8a3 	bl	8002fe0 <HAL_GetTick>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	1ad3      	subs	r3, r2, r3
 8004ea0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ea4:	d309      	bcc.n	8004eba <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8004eb6:	2303      	movs	r3, #3
 8004eb8:	e014      	b.n	8004ee4 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	691b      	ldr	r3, [r3, #16]
 8004ec0:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	f003 0301 	and.w	r3, r3, #1
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d1e4      	bne.n	8004e96 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	695b      	ldr	r3, [r3, #20]
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	461a      	mov	r2, r3
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2201      	movs	r2, #1
 8004ede:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8004ee2:	2300      	movs	r3, #0
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3718      	adds	r7, #24
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}

08004eec <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b086      	sub	sp, #24
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	60f8      	str	r0, [r7, #12]
 8004ef4:	460b      	mov	r3, r1
 8004ef6:	607a      	str	r2, [r7, #4]
 8004ef8:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8004efa:	2300      	movs	r3, #0
 8004efc:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8004efe:	2300      	movs	r3, #0
 8004f00:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	2b42      	cmp	r3, #66	; 0x42
 8004f0c:	d101      	bne.n	8004f12 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8004f0e:	2302      	movs	r3, #2
 8004f10:	e04e      	b.n	8004fb0 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2242      	movs	r2, #66	; 0x42
 8004f16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	691b      	ldr	r3, [r3, #16]
 8004f20:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	f003 031c 	and.w	r3, r3, #28
 8004f28:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	8a1b      	ldrh	r3, [r3, #16]
 8004f2e:	02db      	lsls	r3, r3, #11
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	697a      	ldr	r2, [r7, #20]
 8004f34:	4313      	orrs	r3, r2
 8004f36:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8004f38:	897b      	ldrh	r3, [r7, #10]
 8004f3a:	019b      	lsls	r3, r3, #6
 8004f3c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8004f40:	697a      	ldr	r2, [r7, #20]
 8004f42:	4313      	orrs	r3, r2
 8004f44:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	f043 0302 	orr.w	r3, r3, #2
 8004f4c:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	f043 0301 	orr.w	r3, r3, #1
 8004f54:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	b29a      	uxth	r2, r3
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	697a      	ldr	r2, [r7, #20]
 8004f66:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8004f68:	f7fe f83a 	bl	8002fe0 <HAL_GetTick>
 8004f6c:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004f6e:	e015      	b.n	8004f9c <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8004f70:	f7fe f836 	bl	8002fe0 <HAL_GetTick>
 8004f74:	4602      	mov	r2, r0
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	1ad3      	subs	r3, r2, r3
 8004f7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f7e:	d309      	bcc.n	8004f94 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8004f90:	2303      	movs	r3, #3
 8004f92:	e00d      	b.n	8004fb0 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	691b      	ldr	r3, [r3, #16]
 8004f9a:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	f003 0301 	and.w	r3, r3, #1
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d1e4      	bne.n	8004f70 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2201      	movs	r2, #1
 8004faa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8004fae:	2300      	movs	r3, #0
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3718      	adds	r7, #24
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}

08004fb8 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b0b0      	sub	sp, #192	; 0xc0
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d007      	beq.n	8004fde <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004fd4:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004fdc:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8004fea:	2300      	movs	r3, #0
 8004fec:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	69db      	ldr	r3, [r3, #28]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d103      	bne.n	8005006 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8004ffe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005002:	663b      	str	r3, [r7, #96]	; 0x60
 8005004:	e001      	b.n	800500a <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8005006:	2300      	movs	r3, #0
 8005008:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800500a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800500e:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8005010:	2300      	movs	r3, #0
 8005012:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8005014:	2300      	movs	r3, #0
 8005016:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8005018:	2300      	movs	r3, #0
 800501a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 800501c:	2300      	movs	r3, #0
 800501e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8005020:	2300      	movs	r3, #0
 8005022:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8005024:	2340      	movs	r3, #64	; 0x40
 8005026:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8005028:	2300      	movs	r3, #0
 800502a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800502e:	2300      	movs	r3, #0
 8005030:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8005034:	2300      	movs	r3, #0
 8005036:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800503a:	2300      	movs	r3, #0
 800503c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8005040:	2300      	movs	r3, #0
 8005042:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8005046:	2300      	movs	r3, #0
 8005048:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 800504c:	2300      	movs	r3, #0
 800504e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8005052:	2300      	movs	r3, #0
 8005054:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8005058:	2380      	movs	r3, #128	; 0x80
 800505a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800505e:	2300      	movs	r3, #0
 8005060:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8005064:	2300      	movs	r3, #0
 8005066:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800506a:	2300      	movs	r3, #0
 800506c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8005070:	2300      	movs	r3, #0
 8005072:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8005076:	2300      	movs	r3, #0
 8005078:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 800507c:	2300      	movs	r3, #0
 800507e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 800508c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005090:	4bab      	ldr	r3, [pc, #684]	; (8005340 <ETH_MACDMAConfig+0x388>)
 8005092:	4013      	ands	r3, r2
 8005094:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8005098:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800509a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800509c:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800509e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80050a0:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80050a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80050a4:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80050aa:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80050ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80050ae:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80050b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80050b2:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80050b8:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80050ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80050bc:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80050be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80050c0:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80050c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80050c4:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80050c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80050c8:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80050ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80050cc:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80050ce:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80050d2:	4313      	orrs	r3, r2
 80050d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80050e0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80050ec:	2001      	movs	r0, #1
 80050ee:	f7fd ff83 	bl	8002ff8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80050fa:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80050fc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80050fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8005100:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8005102:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8005104:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8005106:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800510a:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 800510c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8005110:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8005112:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8005116:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8005118:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 800511c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8005120:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8005128:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800512a:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8005136:	2001      	movs	r0, #1
 8005138:	f7fd ff5e 	bl	8002ff8 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005144:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800514e:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8005158:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	699b      	ldr	r3, [r3, #24]
 8005160:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8005164:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005168:	f64f 7341 	movw	r3, #65345	; 0xff41
 800516c:	4013      	ands	r3, r2
 800516e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8005172:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005176:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8005178:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800517c:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800517e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8005182:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8005184:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8005188:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800518a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800518e:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8005190:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8005194:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8005196:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800519a:	4313      	orrs	r3, r2
 800519c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80051a8:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	699b      	ldr	r3, [r3, #24]
 80051b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80051b4:	2001      	movs	r0, #1
 80051b6:	f7fd ff1f 	bl	8002ff8 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80051c2:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80051c4:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80051c8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	430a      	orrs	r2, r1
 80051d2:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	69db      	ldr	r3, [r3, #28]
 80051da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80051de:	2001      	movs	r0, #1
 80051e0:	f7fd ff0a 	bl	8002ff8 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80051ec:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80051ee:	2300      	movs	r3, #0
 80051f0:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80051f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80051f6:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80051f8:	2300      	movs	r3, #0
 80051fa:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80051fc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005200:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8005202:	2300      	movs	r3, #0
 8005204:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8005206:	2300      	movs	r3, #0
 8005208:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800520a:	2300      	movs	r3, #0
 800520c:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800520e:	2300      	movs	r3, #0
 8005210:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8005212:	2304      	movs	r3, #4
 8005214:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8005216:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800521a:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 800521c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005220:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005222:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005226:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005228:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800522c:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800522e:	2380      	movs	r3, #128	; 0x80
 8005230:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8005232:	2300      	movs	r3, #0
 8005234:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8005236:	2300      	movs	r3, #0
 8005238:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	f241 0318 	movw	r3, #4120	; 0x1018
 8005242:	4413      	add	r3, r2
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 800524a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800524e:	4b3d      	ldr	r3, [pc, #244]	; (8005344 <ETH_MACDMAConfig+0x38c>)
 8005250:	4013      	ands	r3, r2
 8005252:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8005256:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8005258:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800525a:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 800525c:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800525e:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8005260:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8005262:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8005264:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8005266:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8005268:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800526a:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 800526c:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800526e:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8005270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8005272:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8005274:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8005276:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8005278:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800527c:	4313      	orrs	r3, r2
 800527e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	f241 0318 	movw	r3, #4120	; 0x1018
 800528a:	4413      	add	r3, r2
 800528c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005290:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	f241 0318 	movw	r3, #4120	; 0x1018
 800529a:	4413      	add	r3, r2
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80052a2:	2001      	movs	r0, #1
 80052a4:	f7fd fea8 	bl	8002ff8 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	f241 0318 	movw	r3, #4120	; 0x1018
 80052b0:	4413      	add	r3, r2
 80052b2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80052b6:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80052b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80052ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80052bc:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80052be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80052c0:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80052c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80052c4:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80052c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80052c8:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 80052ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052cc:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80052ce:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80052d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 80052d2:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80052dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052e0:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80052f0:	2001      	movs	r0, #1
 80052f2:	f7fd fe81 	bl	8002ff8 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052fe:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005302:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	699b      	ldr	r3, [r3, #24]
 8005308:	2b01      	cmp	r3, #1
 800530a:	d10d      	bne.n	8005328 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	f241 031c 	movw	r3, #4124	; 0x101c
 8005314:	4413      	add	r3, r2
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	687a      	ldr	r2, [r7, #4]
 800531a:	6811      	ldr	r1, [r2, #0]
 800531c:	4a0a      	ldr	r2, [pc, #40]	; (8005348 <ETH_MACDMAConfig+0x390>)
 800531e:	431a      	orrs	r2, r3
 8005320:	f241 031c 	movw	r3, #4124	; 0x101c
 8005324:	440b      	add	r3, r1
 8005326:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	695b      	ldr	r3, [r3, #20]
 800532c:	461a      	mov	r2, r3
 800532e:	2100      	movs	r1, #0
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f000 f80b 	bl	800534c <ETH_MACAddressConfig>
}
 8005336:	bf00      	nop
 8005338:	37c0      	adds	r7, #192	; 0xc0
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}
 800533e:	bf00      	nop
 8005340:	ff20810f 	.word	0xff20810f
 8005344:	f8de3f23 	.word	0xf8de3f23
 8005348:	00010040 	.word	0x00010040

0800534c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800534c:	b480      	push	{r7}
 800534e:	b087      	sub	sp, #28
 8005350:	af00      	add	r7, sp, #0
 8005352:	60f8      	str	r0, [r7, #12]
 8005354:	60b9      	str	r1, [r7, #8]
 8005356:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	3305      	adds	r3, #5
 800535c:	781b      	ldrb	r3, [r3, #0]
 800535e:	021b      	lsls	r3, r3, #8
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	3204      	adds	r2, #4
 8005364:	7812      	ldrb	r2, [r2, #0]
 8005366:	4313      	orrs	r3, r2
 8005368:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 800536a:	68ba      	ldr	r2, [r7, #8]
 800536c:	4b11      	ldr	r3, [pc, #68]	; (80053b4 <ETH_MACAddressConfig+0x68>)
 800536e:	4413      	add	r3, r2
 8005370:	461a      	mov	r2, r3
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	3303      	adds	r3, #3
 800537a:	781b      	ldrb	r3, [r3, #0]
 800537c:	061a      	lsls	r2, r3, #24
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	3302      	adds	r3, #2
 8005382:	781b      	ldrb	r3, [r3, #0]
 8005384:	041b      	lsls	r3, r3, #16
 8005386:	431a      	orrs	r2, r3
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	3301      	adds	r3, #1
 800538c:	781b      	ldrb	r3, [r3, #0]
 800538e:	021b      	lsls	r3, r3, #8
 8005390:	4313      	orrs	r3, r2
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	7812      	ldrb	r2, [r2, #0]
 8005396:	4313      	orrs	r3, r2
 8005398:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 800539a:	68ba      	ldr	r2, [r7, #8]
 800539c:	4b06      	ldr	r3, [pc, #24]	; (80053b8 <ETH_MACAddressConfig+0x6c>)
 800539e:	4413      	add	r3, r2
 80053a0:	461a      	mov	r2, r3
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	6013      	str	r3, [r2, #0]
}
 80053a6:	bf00      	nop
 80053a8:	371c      	adds	r7, #28
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr
 80053b2:	bf00      	nop
 80053b4:	40028040 	.word	0x40028040
 80053b8:	40028044 	.word	0x40028044

080053bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80053bc:	b480      	push	{r7}
 80053be:	b089      	sub	sp, #36	; 0x24
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80053c6:	2300      	movs	r3, #0
 80053c8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80053ca:	2300      	movs	r3, #0
 80053cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80053ce:	2300      	movs	r3, #0
 80053d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80053d2:	2300      	movs	r3, #0
 80053d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80053d6:	2300      	movs	r3, #0
 80053d8:	61fb      	str	r3, [r7, #28]
 80053da:	e175      	b.n	80056c8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80053dc:	2201      	movs	r2, #1
 80053de:	69fb      	ldr	r3, [r7, #28]
 80053e0:	fa02 f303 	lsl.w	r3, r2, r3
 80053e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	697a      	ldr	r2, [r7, #20]
 80053ec:	4013      	ands	r3, r2
 80053ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80053f0:	693a      	ldr	r2, [r7, #16]
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	429a      	cmp	r2, r3
 80053f6:	f040 8164 	bne.w	80056c2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	2b02      	cmp	r3, #2
 8005400:	d003      	beq.n	800540a <HAL_GPIO_Init+0x4e>
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	2b12      	cmp	r3, #18
 8005408:	d123      	bne.n	8005452 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800540a:	69fb      	ldr	r3, [r7, #28]
 800540c:	08da      	lsrs	r2, r3, #3
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	3208      	adds	r2, #8
 8005412:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005416:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005418:	69fb      	ldr	r3, [r7, #28]
 800541a:	f003 0307 	and.w	r3, r3, #7
 800541e:	009b      	lsls	r3, r3, #2
 8005420:	220f      	movs	r2, #15
 8005422:	fa02 f303 	lsl.w	r3, r2, r3
 8005426:	43db      	mvns	r3, r3
 8005428:	69ba      	ldr	r2, [r7, #24]
 800542a:	4013      	ands	r3, r2
 800542c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	691a      	ldr	r2, [r3, #16]
 8005432:	69fb      	ldr	r3, [r7, #28]
 8005434:	f003 0307 	and.w	r3, r3, #7
 8005438:	009b      	lsls	r3, r3, #2
 800543a:	fa02 f303 	lsl.w	r3, r2, r3
 800543e:	69ba      	ldr	r2, [r7, #24]
 8005440:	4313      	orrs	r3, r2
 8005442:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005444:	69fb      	ldr	r3, [r7, #28]
 8005446:	08da      	lsrs	r2, r3, #3
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	3208      	adds	r2, #8
 800544c:	69b9      	ldr	r1, [r7, #24]
 800544e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005458:	69fb      	ldr	r3, [r7, #28]
 800545a:	005b      	lsls	r3, r3, #1
 800545c:	2203      	movs	r2, #3
 800545e:	fa02 f303 	lsl.w	r3, r2, r3
 8005462:	43db      	mvns	r3, r3
 8005464:	69ba      	ldr	r2, [r7, #24]
 8005466:	4013      	ands	r3, r2
 8005468:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	f003 0203 	and.w	r2, r3, #3
 8005472:	69fb      	ldr	r3, [r7, #28]
 8005474:	005b      	lsls	r3, r3, #1
 8005476:	fa02 f303 	lsl.w	r3, r2, r3
 800547a:	69ba      	ldr	r2, [r7, #24]
 800547c:	4313      	orrs	r3, r2
 800547e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	69ba      	ldr	r2, [r7, #24]
 8005484:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	2b01      	cmp	r3, #1
 800548c:	d00b      	beq.n	80054a6 <HAL_GPIO_Init+0xea>
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	2b02      	cmp	r3, #2
 8005494:	d007      	beq.n	80054a6 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800549a:	2b11      	cmp	r3, #17
 800549c:	d003      	beq.n	80054a6 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	2b12      	cmp	r3, #18
 80054a4:	d130      	bne.n	8005508 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80054ac:	69fb      	ldr	r3, [r7, #28]
 80054ae:	005b      	lsls	r3, r3, #1
 80054b0:	2203      	movs	r2, #3
 80054b2:	fa02 f303 	lsl.w	r3, r2, r3
 80054b6:	43db      	mvns	r3, r3
 80054b8:	69ba      	ldr	r2, [r7, #24]
 80054ba:	4013      	ands	r3, r2
 80054bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	68da      	ldr	r2, [r3, #12]
 80054c2:	69fb      	ldr	r3, [r7, #28]
 80054c4:	005b      	lsls	r3, r3, #1
 80054c6:	fa02 f303 	lsl.w	r3, r2, r3
 80054ca:	69ba      	ldr	r2, [r7, #24]
 80054cc:	4313      	orrs	r3, r2
 80054ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	69ba      	ldr	r2, [r7, #24]
 80054d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80054dc:	2201      	movs	r2, #1
 80054de:	69fb      	ldr	r3, [r7, #28]
 80054e0:	fa02 f303 	lsl.w	r3, r2, r3
 80054e4:	43db      	mvns	r3, r3
 80054e6:	69ba      	ldr	r2, [r7, #24]
 80054e8:	4013      	ands	r3, r2
 80054ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	091b      	lsrs	r3, r3, #4
 80054f2:	f003 0201 	and.w	r2, r3, #1
 80054f6:	69fb      	ldr	r3, [r7, #28]
 80054f8:	fa02 f303 	lsl.w	r3, r2, r3
 80054fc:	69ba      	ldr	r2, [r7, #24]
 80054fe:	4313      	orrs	r3, r2
 8005500:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	69ba      	ldr	r2, [r7, #24]
 8005506:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800550e:	69fb      	ldr	r3, [r7, #28]
 8005510:	005b      	lsls	r3, r3, #1
 8005512:	2203      	movs	r2, #3
 8005514:	fa02 f303 	lsl.w	r3, r2, r3
 8005518:	43db      	mvns	r3, r3
 800551a:	69ba      	ldr	r2, [r7, #24]
 800551c:	4013      	ands	r3, r2
 800551e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	689a      	ldr	r2, [r3, #8]
 8005524:	69fb      	ldr	r3, [r7, #28]
 8005526:	005b      	lsls	r3, r3, #1
 8005528:	fa02 f303 	lsl.w	r3, r2, r3
 800552c:	69ba      	ldr	r2, [r7, #24]
 800552e:	4313      	orrs	r3, r2
 8005530:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	69ba      	ldr	r2, [r7, #24]
 8005536:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005540:	2b00      	cmp	r3, #0
 8005542:	f000 80be 	beq.w	80056c2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005546:	4b65      	ldr	r3, [pc, #404]	; (80056dc <HAL_GPIO_Init+0x320>)
 8005548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800554a:	4a64      	ldr	r2, [pc, #400]	; (80056dc <HAL_GPIO_Init+0x320>)
 800554c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005550:	6453      	str	r3, [r2, #68]	; 0x44
 8005552:	4b62      	ldr	r3, [pc, #392]	; (80056dc <HAL_GPIO_Init+0x320>)
 8005554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005556:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800555a:	60fb      	str	r3, [r7, #12]
 800555c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800555e:	4a60      	ldr	r2, [pc, #384]	; (80056e0 <HAL_GPIO_Init+0x324>)
 8005560:	69fb      	ldr	r3, [r7, #28]
 8005562:	089b      	lsrs	r3, r3, #2
 8005564:	3302      	adds	r3, #2
 8005566:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800556a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800556c:	69fb      	ldr	r3, [r7, #28]
 800556e:	f003 0303 	and.w	r3, r3, #3
 8005572:	009b      	lsls	r3, r3, #2
 8005574:	220f      	movs	r2, #15
 8005576:	fa02 f303 	lsl.w	r3, r2, r3
 800557a:	43db      	mvns	r3, r3
 800557c:	69ba      	ldr	r2, [r7, #24]
 800557e:	4013      	ands	r3, r2
 8005580:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4a57      	ldr	r2, [pc, #348]	; (80056e4 <HAL_GPIO_Init+0x328>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d037      	beq.n	80055fa <HAL_GPIO_Init+0x23e>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	4a56      	ldr	r2, [pc, #344]	; (80056e8 <HAL_GPIO_Init+0x32c>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d031      	beq.n	80055f6 <HAL_GPIO_Init+0x23a>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	4a55      	ldr	r2, [pc, #340]	; (80056ec <HAL_GPIO_Init+0x330>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d02b      	beq.n	80055f2 <HAL_GPIO_Init+0x236>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	4a54      	ldr	r2, [pc, #336]	; (80056f0 <HAL_GPIO_Init+0x334>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d025      	beq.n	80055ee <HAL_GPIO_Init+0x232>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4a53      	ldr	r2, [pc, #332]	; (80056f4 <HAL_GPIO_Init+0x338>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d01f      	beq.n	80055ea <HAL_GPIO_Init+0x22e>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	4a52      	ldr	r2, [pc, #328]	; (80056f8 <HAL_GPIO_Init+0x33c>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d019      	beq.n	80055e6 <HAL_GPIO_Init+0x22a>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	4a51      	ldr	r2, [pc, #324]	; (80056fc <HAL_GPIO_Init+0x340>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d013      	beq.n	80055e2 <HAL_GPIO_Init+0x226>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4a50      	ldr	r2, [pc, #320]	; (8005700 <HAL_GPIO_Init+0x344>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d00d      	beq.n	80055de <HAL_GPIO_Init+0x222>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4a4f      	ldr	r2, [pc, #316]	; (8005704 <HAL_GPIO_Init+0x348>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d007      	beq.n	80055da <HAL_GPIO_Init+0x21e>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	4a4e      	ldr	r2, [pc, #312]	; (8005708 <HAL_GPIO_Init+0x34c>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d101      	bne.n	80055d6 <HAL_GPIO_Init+0x21a>
 80055d2:	2309      	movs	r3, #9
 80055d4:	e012      	b.n	80055fc <HAL_GPIO_Init+0x240>
 80055d6:	230a      	movs	r3, #10
 80055d8:	e010      	b.n	80055fc <HAL_GPIO_Init+0x240>
 80055da:	2308      	movs	r3, #8
 80055dc:	e00e      	b.n	80055fc <HAL_GPIO_Init+0x240>
 80055de:	2307      	movs	r3, #7
 80055e0:	e00c      	b.n	80055fc <HAL_GPIO_Init+0x240>
 80055e2:	2306      	movs	r3, #6
 80055e4:	e00a      	b.n	80055fc <HAL_GPIO_Init+0x240>
 80055e6:	2305      	movs	r3, #5
 80055e8:	e008      	b.n	80055fc <HAL_GPIO_Init+0x240>
 80055ea:	2304      	movs	r3, #4
 80055ec:	e006      	b.n	80055fc <HAL_GPIO_Init+0x240>
 80055ee:	2303      	movs	r3, #3
 80055f0:	e004      	b.n	80055fc <HAL_GPIO_Init+0x240>
 80055f2:	2302      	movs	r3, #2
 80055f4:	e002      	b.n	80055fc <HAL_GPIO_Init+0x240>
 80055f6:	2301      	movs	r3, #1
 80055f8:	e000      	b.n	80055fc <HAL_GPIO_Init+0x240>
 80055fa:	2300      	movs	r3, #0
 80055fc:	69fa      	ldr	r2, [r7, #28]
 80055fe:	f002 0203 	and.w	r2, r2, #3
 8005602:	0092      	lsls	r2, r2, #2
 8005604:	4093      	lsls	r3, r2
 8005606:	69ba      	ldr	r2, [r7, #24]
 8005608:	4313      	orrs	r3, r2
 800560a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800560c:	4934      	ldr	r1, [pc, #208]	; (80056e0 <HAL_GPIO_Init+0x324>)
 800560e:	69fb      	ldr	r3, [r7, #28]
 8005610:	089b      	lsrs	r3, r3, #2
 8005612:	3302      	adds	r3, #2
 8005614:	69ba      	ldr	r2, [r7, #24]
 8005616:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800561a:	4b3c      	ldr	r3, [pc, #240]	; (800570c <HAL_GPIO_Init+0x350>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	43db      	mvns	r3, r3
 8005624:	69ba      	ldr	r2, [r7, #24]
 8005626:	4013      	ands	r3, r2
 8005628:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005632:	2b00      	cmp	r3, #0
 8005634:	d003      	beq.n	800563e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005636:	69ba      	ldr	r2, [r7, #24]
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	4313      	orrs	r3, r2
 800563c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800563e:	4a33      	ldr	r2, [pc, #204]	; (800570c <HAL_GPIO_Init+0x350>)
 8005640:	69bb      	ldr	r3, [r7, #24]
 8005642:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005644:	4b31      	ldr	r3, [pc, #196]	; (800570c <HAL_GPIO_Init+0x350>)
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	43db      	mvns	r3, r3
 800564e:	69ba      	ldr	r2, [r7, #24]
 8005650:	4013      	ands	r3, r2
 8005652:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800565c:	2b00      	cmp	r3, #0
 800565e:	d003      	beq.n	8005668 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005660:	69ba      	ldr	r2, [r7, #24]
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	4313      	orrs	r3, r2
 8005666:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005668:	4a28      	ldr	r2, [pc, #160]	; (800570c <HAL_GPIO_Init+0x350>)
 800566a:	69bb      	ldr	r3, [r7, #24]
 800566c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800566e:	4b27      	ldr	r3, [pc, #156]	; (800570c <HAL_GPIO_Init+0x350>)
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	43db      	mvns	r3, r3
 8005678:	69ba      	ldr	r2, [r7, #24]
 800567a:	4013      	ands	r3, r2
 800567c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005686:	2b00      	cmp	r3, #0
 8005688:	d003      	beq.n	8005692 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800568a:	69ba      	ldr	r2, [r7, #24]
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	4313      	orrs	r3, r2
 8005690:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005692:	4a1e      	ldr	r2, [pc, #120]	; (800570c <HAL_GPIO_Init+0x350>)
 8005694:	69bb      	ldr	r3, [r7, #24]
 8005696:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005698:	4b1c      	ldr	r3, [pc, #112]	; (800570c <HAL_GPIO_Init+0x350>)
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	43db      	mvns	r3, r3
 80056a2:	69ba      	ldr	r2, [r7, #24]
 80056a4:	4013      	ands	r3, r2
 80056a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d003      	beq.n	80056bc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80056b4:	69ba      	ldr	r2, [r7, #24]
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	4313      	orrs	r3, r2
 80056ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80056bc:	4a13      	ldr	r2, [pc, #76]	; (800570c <HAL_GPIO_Init+0x350>)
 80056be:	69bb      	ldr	r3, [r7, #24]
 80056c0:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80056c2:	69fb      	ldr	r3, [r7, #28]
 80056c4:	3301      	adds	r3, #1
 80056c6:	61fb      	str	r3, [r7, #28]
 80056c8:	69fb      	ldr	r3, [r7, #28]
 80056ca:	2b0f      	cmp	r3, #15
 80056cc:	f67f ae86 	bls.w	80053dc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80056d0:	bf00      	nop
 80056d2:	3724      	adds	r7, #36	; 0x24
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr
 80056dc:	40023800 	.word	0x40023800
 80056e0:	40013800 	.word	0x40013800
 80056e4:	40020000 	.word	0x40020000
 80056e8:	40020400 	.word	0x40020400
 80056ec:	40020800 	.word	0x40020800
 80056f0:	40020c00 	.word	0x40020c00
 80056f4:	40021000 	.word	0x40021000
 80056f8:	40021400 	.word	0x40021400
 80056fc:	40021800 	.word	0x40021800
 8005700:	40021c00 	.word	0x40021c00
 8005704:	40022000 	.word	0x40022000
 8005708:	40022400 	.word	0x40022400
 800570c:	40013c00 	.word	0x40013c00

08005710 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005710:	b480      	push	{r7}
 8005712:	b083      	sub	sp, #12
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	460b      	mov	r3, r1
 800571a:	807b      	strh	r3, [r7, #2]
 800571c:	4613      	mov	r3, r2
 800571e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005720:	787b      	ldrb	r3, [r7, #1]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d003      	beq.n	800572e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005726:	887a      	ldrh	r2, [r7, #2]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800572c:	e003      	b.n	8005736 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800572e:	887b      	ldrh	r3, [r7, #2]
 8005730:	041a      	lsls	r2, r3, #16
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	619a      	str	r2, [r3, #24]
}
 8005736:	bf00      	nop
 8005738:	370c      	adds	r7, #12
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr
	...

08005744 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b082      	sub	sp, #8
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d101      	bne.n	8005756 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	e07f      	b.n	8005856 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800575c:	b2db      	uxtb	r3, r3
 800575e:	2b00      	cmp	r3, #0
 8005760:	d106      	bne.n	8005770 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2200      	movs	r2, #0
 8005766:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f7fc fc46 	bl	8001ffc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2224      	movs	r2, #36	; 0x24
 8005774:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f022 0201 	bic.w	r2, r2, #1
 8005786:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	685a      	ldr	r2, [r3, #4]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005794:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	689a      	ldr	r2, [r3, #8]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80057a4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	68db      	ldr	r3, [r3, #12]
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d107      	bne.n	80057be <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	689a      	ldr	r2, [r3, #8]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80057ba:	609a      	str	r2, [r3, #8]
 80057bc:	e006      	b.n	80057cc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	689a      	ldr	r2, [r3, #8]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80057ca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	68db      	ldr	r3, [r3, #12]
 80057d0:	2b02      	cmp	r3, #2
 80057d2:	d104      	bne.n	80057de <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80057dc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	6859      	ldr	r1, [r3, #4]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	4b1d      	ldr	r3, [pc, #116]	; (8005860 <HAL_I2C_Init+0x11c>)
 80057ea:	430b      	orrs	r3, r1
 80057ec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	68da      	ldr	r2, [r3, #12]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80057fc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	691a      	ldr	r2, [r3, #16]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	695b      	ldr	r3, [r3, #20]
 8005806:	ea42 0103 	orr.w	r1, r2, r3
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	699b      	ldr	r3, [r3, #24]
 800580e:	021a      	lsls	r2, r3, #8
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	430a      	orrs	r2, r1
 8005816:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	69d9      	ldr	r1, [r3, #28]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6a1a      	ldr	r2, [r3, #32]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	430a      	orrs	r2, r1
 8005826:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f042 0201 	orr.w	r2, r2, #1
 8005836:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2200      	movs	r2, #0
 800583c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2220      	movs	r2, #32
 8005842:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2200      	movs	r2, #0
 800584a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2200      	movs	r2, #0
 8005850:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005854:	2300      	movs	r3, #0
}
 8005856:	4618      	mov	r0, r3
 8005858:	3708      	adds	r7, #8
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}
 800585e:	bf00      	nop
 8005860:	02008000 	.word	0x02008000

08005864 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005864:	b480      	push	{r7}
 8005866:	b083      	sub	sp, #12
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005874:	b2db      	uxtb	r3, r3
 8005876:	2b20      	cmp	r3, #32
 8005878:	d138      	bne.n	80058ec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005880:	2b01      	cmp	r3, #1
 8005882:	d101      	bne.n	8005888 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005884:	2302      	movs	r3, #2
 8005886:	e032      	b.n	80058ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2201      	movs	r2, #1
 800588c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2224      	movs	r2, #36	; 0x24
 8005894:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f022 0201 	bic.w	r2, r2, #1
 80058a6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80058b6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	6819      	ldr	r1, [r3, #0]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	683a      	ldr	r2, [r7, #0]
 80058c4:	430a      	orrs	r2, r1
 80058c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f042 0201 	orr.w	r2, r2, #1
 80058d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2220      	movs	r2, #32
 80058dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2200      	movs	r2, #0
 80058e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80058e8:	2300      	movs	r3, #0
 80058ea:	e000      	b.n	80058ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80058ec:	2302      	movs	r3, #2
  }
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	370c      	adds	r7, #12
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr

080058fa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80058fa:	b480      	push	{r7}
 80058fc:	b085      	sub	sp, #20
 80058fe:	af00      	add	r7, sp, #0
 8005900:	6078      	str	r0, [r7, #4]
 8005902:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800590a:	b2db      	uxtb	r3, r3
 800590c:	2b20      	cmp	r3, #32
 800590e:	d139      	bne.n	8005984 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005916:	2b01      	cmp	r3, #1
 8005918:	d101      	bne.n	800591e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800591a:	2302      	movs	r3, #2
 800591c:	e033      	b.n	8005986 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2201      	movs	r2, #1
 8005922:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2224      	movs	r2, #36	; 0x24
 800592a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f022 0201 	bic.w	r2, r2, #1
 800593c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800594c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	021b      	lsls	r3, r3, #8
 8005952:	68fa      	ldr	r2, [r7, #12]
 8005954:	4313      	orrs	r3, r2
 8005956:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	68fa      	ldr	r2, [r7, #12]
 800595e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f042 0201 	orr.w	r2, r2, #1
 800596e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2220      	movs	r2, #32
 8005974:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2200      	movs	r2, #0
 800597c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005980:	2300      	movs	r3, #0
 8005982:	e000      	b.n	8005986 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005984:	2302      	movs	r3, #2
  }
}
 8005986:	4618      	mov	r0, r3
 8005988:	3714      	adds	r7, #20
 800598a:	46bd      	mov	sp, r7
 800598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005990:	4770      	bx	lr

08005992 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8005992:	b580      	push	{r7, lr}
 8005994:	b084      	sub	sp, #16
 8005996:	af00      	add	r7, sp, #0
 8005998:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d101      	bne.n	80059a4 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80059a0:	2301      	movs	r3, #1
 80059a2:	e038      	b.n	8005a16 <HAL_IWDG_Init+0x84>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80059ac:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f245 5255 	movw	r2, #21845	; 0x5555
 80059b6:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	6852      	ldr	r2, [r2, #4]
 80059c0:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	687a      	ldr	r2, [r7, #4]
 80059c8:	6892      	ldr	r2, [r2, #8]
 80059ca:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80059cc:	f7fd fb08 	bl	8002fe0 <HAL_GetTick>
 80059d0:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 80059d2:	e008      	b.n	80059e6 <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80059d4:	f7fd fb04 	bl	8002fe0 <HAL_GetTick>
 80059d8:	4602      	mov	r2, r0
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	1ad3      	subs	r3, r2, r3
 80059de:	2b30      	cmp	r3, #48	; 0x30
 80059e0:	d901      	bls.n	80059e6 <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 80059e2:	2303      	movs	r3, #3
 80059e4:	e017      	b.n	8005a16 <HAL_IWDG_Init+0x84>
  while (hiwdg->Instance->SR != 0x00u)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	68db      	ldr	r3, [r3, #12]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d1f1      	bne.n	80059d4 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	691a      	ldr	r2, [r3, #16]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	68db      	ldr	r3, [r3, #12]
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d005      	beq.n	8005a0a <HAL_IWDG_Init+0x78>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	687a      	ldr	r2, [r7, #4]
 8005a04:	68d2      	ldr	r2, [r2, #12]
 8005a06:	611a      	str	r2, [r3, #16]
 8005a08:	e004      	b.n	8005a14 <HAL_IWDG_Init+0x82>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8005a12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a14:	2300      	movs	r3, #0
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3710      	adds	r7, #16
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
	...

08005a20 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b084      	sub	sp, #16
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d101      	bne.n	8005a32 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e0bf      	b.n	8005bb2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d106      	bne.n	8005a4c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2200      	movs	r2, #0
 8005a42:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f7fc fb6c 	bl	8002124 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2202      	movs	r2, #2
 8005a50:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	699a      	ldr	r2, [r3, #24]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005a62:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	6999      	ldr	r1, [r3, #24]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	685a      	ldr	r2, [r3, #4]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005a78:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	691b      	ldr	r3, [r3, #16]
 8005a7e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	430a      	orrs	r2, r1
 8005a86:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	6899      	ldr	r1, [r3, #8]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	4b4a      	ldr	r3, [pc, #296]	; (8005bbc <HAL_LTDC_Init+0x19c>)
 8005a94:	400b      	ands	r3, r1
 8005a96:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	695b      	ldr	r3, [r3, #20]
 8005a9c:	041b      	lsls	r3, r3, #16
 8005a9e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	6899      	ldr	r1, [r3, #8]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	699a      	ldr	r2, [r3, #24]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	431a      	orrs	r2, r3
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	430a      	orrs	r2, r1
 8005ab4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	68d9      	ldr	r1, [r3, #12]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	4b3e      	ldr	r3, [pc, #248]	; (8005bbc <HAL_LTDC_Init+0x19c>)
 8005ac2:	400b      	ands	r3, r1
 8005ac4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	69db      	ldr	r3, [r3, #28]
 8005aca:	041b      	lsls	r3, r3, #16
 8005acc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	68d9      	ldr	r1, [r3, #12]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6a1a      	ldr	r2, [r3, #32]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	431a      	orrs	r2, r3
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	430a      	orrs	r2, r1
 8005ae2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	6919      	ldr	r1, [r3, #16]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	4b33      	ldr	r3, [pc, #204]	; (8005bbc <HAL_LTDC_Init+0x19c>)
 8005af0:	400b      	ands	r3, r1
 8005af2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af8:	041b      	lsls	r3, r3, #16
 8005afa:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	6919      	ldr	r1, [r3, #16]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	431a      	orrs	r2, r3
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	430a      	orrs	r2, r1
 8005b10:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	6959      	ldr	r1, [r3, #20]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681a      	ldr	r2, [r3, #0]
 8005b1c:	4b27      	ldr	r3, [pc, #156]	; (8005bbc <HAL_LTDC_Init+0x19c>)
 8005b1e:	400b      	ands	r3, r1
 8005b20:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b26:	041b      	lsls	r3, r3, #16
 8005b28:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	6959      	ldr	r1, [r3, #20]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	431a      	orrs	r2, r3
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	430a      	orrs	r2, r1
 8005b3e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b46:	021b      	lsls	r3, r3, #8
 8005b48:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005b50:	041b      	lsls	r3, r3, #16
 8005b52:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005b62:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005b6a:	68ba      	ldr	r2, [r7, #8]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	687a      	ldr	r2, [r7, #4]
 8005b72:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8005b76:	431a      	orrs	r2, r3
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	430a      	orrs	r2, r1
 8005b7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f042 0206 	orr.w	r2, r2, #6
 8005b8e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	699a      	ldr	r2, [r3, #24]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f042 0201 	orr.w	r2, r2, #1
 8005b9e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2201      	movs	r2, #1
 8005bac:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8005bb0:	2300      	movs	r3, #0
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3710      	adds	r7, #16
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}
 8005bba:	bf00      	nop
 8005bbc:	f000f800 	.word	0xf000f800

08005bc0 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b084      	sub	sp, #16
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bce:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bd6:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f003 0304 	and.w	r3, r3, #4
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d023      	beq.n	8005c2a <HAL_LTDC_IRQHandler+0x6a>
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	f003 0304 	and.w	r3, r3, #4
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d01e      	beq.n	8005c2a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f022 0204 	bic.w	r2, r2, #4
 8005bfa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	2204      	movs	r2, #4
 8005c02:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005c0a:	f043 0201 	orr.w	r2, r3, #1
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2204      	movs	r2, #4
 8005c18:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f000 f86f 	bl	8005d08 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	f003 0302 	and.w	r3, r3, #2
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d023      	beq.n	8005c7c <HAL_LTDC_IRQHandler+0xbc>
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	f003 0302 	and.w	r3, r3, #2
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d01e      	beq.n	8005c7c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f022 0202 	bic.w	r2, r2, #2
 8005c4c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	2202      	movs	r2, #2
 8005c54:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005c5c:	f043 0202 	orr.w	r2, r3, #2
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2204      	movs	r2, #4
 8005c6a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2200      	movs	r2, #0
 8005c72:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f000 f846 	bl	8005d08 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f003 0301 	and.w	r3, r3, #1
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d01b      	beq.n	8005cbe <HAL_LTDC_IRQHandler+0xfe>
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	f003 0301 	and.w	r3, r3, #1
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d016      	beq.n	8005cbe <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f022 0201 	bic.w	r2, r2, #1
 8005c9e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2201      	movs	r2, #1
 8005cac:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f000 f82f 	bl	8005d1c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	f003 0308 	and.w	r3, r3, #8
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d01b      	beq.n	8005d00 <HAL_LTDC_IRQHandler+0x140>
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	f003 0308 	and.w	r3, r3, #8
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d016      	beq.n	8005d00 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f022 0208 	bic.w	r2, r2, #8
 8005ce0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	2208      	movs	r2, #8
 8005ce8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2201      	movs	r2, #1
 8005cee:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f000 f818 	bl	8005d30 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8005d00:	bf00      	nop
 8005d02:	3710      	adds	r7, #16
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}

08005d08 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b083      	sub	sp, #12
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8005d10:	bf00      	nop
 8005d12:	370c      	adds	r7, #12
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr

08005d1c <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b083      	sub	sp, #12
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8005d24:	bf00      	nop
 8005d26:	370c      	adds	r7, #12
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr

08005d30 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b083      	sub	sp, #12
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8005d38:	bf00      	nop
 8005d3a:	370c      	adds	r7, #12
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr

08005d44 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005d44:	b5b0      	push	{r4, r5, r7, lr}
 8005d46:	b084      	sub	sp, #16
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	60f8      	str	r0, [r7, #12]
 8005d4c:	60b9      	str	r1, [r7, #8]
 8005d4e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005d56:	2b01      	cmp	r3, #1
 8005d58:	d101      	bne.n	8005d5e <HAL_LTDC_ConfigLayer+0x1a>
 8005d5a:	2302      	movs	r3, #2
 8005d5c:	e02c      	b.n	8005db8 <HAL_LTDC_ConfigLayer+0x74>
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2201      	movs	r2, #1
 8005d62:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2202      	movs	r2, #2
 8005d6a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005d6e:	68fa      	ldr	r2, [r7, #12]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2134      	movs	r1, #52	; 0x34
 8005d74:	fb01 f303 	mul.w	r3, r1, r3
 8005d78:	4413      	add	r3, r2
 8005d7a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	4614      	mov	r4, r2
 8005d82:	461d      	mov	r5, r3
 8005d84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005d86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005d88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005d8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005d8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005d8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005d90:	682b      	ldr	r3, [r5, #0]
 8005d92:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005d94:	687a      	ldr	r2, [r7, #4]
 8005d96:	68b9      	ldr	r1, [r7, #8]
 8005d98:	68f8      	ldr	r0, [r7, #12]
 8005d9a:	f000 f811 	bl	8005dc0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	2201      	movs	r2, #1
 8005da4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2201      	movs	r2, #1
 8005daa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2200      	movs	r2, #0
 8005db2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005db6:	2300      	movs	r3, #0
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3710      	adds	r7, #16
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bdb0      	pop	{r4, r5, r7, pc}

08005dc0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b089      	sub	sp, #36	; 0x24
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	60f8      	str	r0, [r7, #12]
 8005dc8:	60b9      	str	r1, [r7, #8]
 8005dca:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	685a      	ldr	r2, [r3, #4]
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	68db      	ldr	r3, [r3, #12]
 8005dd6:	0c1b      	lsrs	r3, r3, #16
 8005dd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ddc:	4413      	add	r3, r2
 8005dde:	041b      	lsls	r3, r3, #16
 8005de0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	461a      	mov	r2, r3
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	01db      	lsls	r3, r3, #7
 8005dec:	4413      	add	r3, r2
 8005dee:	3384      	adds	r3, #132	; 0x84
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	68fa      	ldr	r2, [r7, #12]
 8005df4:	6812      	ldr	r2, [r2, #0]
 8005df6:	4611      	mov	r1, r2
 8005df8:	687a      	ldr	r2, [r7, #4]
 8005dfa:	01d2      	lsls	r2, r2, #7
 8005dfc:	440a      	add	r2, r1
 8005dfe:	3284      	adds	r2, #132	; 0x84
 8005e00:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005e04:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	681a      	ldr	r2, [r3, #0]
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	68db      	ldr	r3, [r3, #12]
 8005e10:	0c1b      	lsrs	r3, r3, #16
 8005e12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e16:	4413      	add	r3, r2
 8005e18:	1c5a      	adds	r2, r3, #1
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4619      	mov	r1, r3
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	01db      	lsls	r3, r3, #7
 8005e24:	440b      	add	r3, r1
 8005e26:	3384      	adds	r3, #132	; 0x84
 8005e28:	4619      	mov	r1, r3
 8005e2a:	69fb      	ldr	r3, [r7, #28]
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	68da      	ldr	r2, [r3, #12]
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	68db      	ldr	r3, [r3, #12]
 8005e3a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e3e:	4413      	add	r3, r2
 8005e40:	041b      	lsls	r3, r3, #16
 8005e42:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	461a      	mov	r2, r3
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	01db      	lsls	r3, r3, #7
 8005e4e:	4413      	add	r3, r2
 8005e50:	3384      	adds	r3, #132	; 0x84
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	68fa      	ldr	r2, [r7, #12]
 8005e56:	6812      	ldr	r2, [r2, #0]
 8005e58:	4611      	mov	r1, r2
 8005e5a:	687a      	ldr	r2, [r7, #4]
 8005e5c:	01d2      	lsls	r2, r2, #7
 8005e5e:	440a      	add	r2, r1
 8005e60:	3284      	adds	r2, #132	; 0x84
 8005e62:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005e66:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	689a      	ldr	r2, [r3, #8]
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	68db      	ldr	r3, [r3, #12]
 8005e72:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e76:	4413      	add	r3, r2
 8005e78:	1c5a      	adds	r2, r3, #1
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4619      	mov	r1, r3
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	01db      	lsls	r3, r3, #7
 8005e84:	440b      	add	r3, r1
 8005e86:	3384      	adds	r3, #132	; 0x84
 8005e88:	4619      	mov	r1, r3
 8005e8a:	69fb      	ldr	r3, [r7, #28]
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	461a      	mov	r2, r3
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	01db      	lsls	r3, r3, #7
 8005e9a:	4413      	add	r3, r2
 8005e9c:	3384      	adds	r3, #132	; 0x84
 8005e9e:	691b      	ldr	r3, [r3, #16]
 8005ea0:	68fa      	ldr	r2, [r7, #12]
 8005ea2:	6812      	ldr	r2, [r2, #0]
 8005ea4:	4611      	mov	r1, r2
 8005ea6:	687a      	ldr	r2, [r7, #4]
 8005ea8:	01d2      	lsls	r2, r2, #7
 8005eaa:	440a      	add	r2, r1
 8005eac:	3284      	adds	r2, #132	; 0x84
 8005eae:	f023 0307 	bic.w	r3, r3, #7
 8005eb2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	461a      	mov	r2, r3
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	01db      	lsls	r3, r3, #7
 8005ebe:	4413      	add	r3, r2
 8005ec0:	3384      	adds	r3, #132	; 0x84
 8005ec2:	461a      	mov	r2, r3
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	691b      	ldr	r3, [r3, #16]
 8005ec8:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005ed0:	021b      	lsls	r3, r3, #8
 8005ed2:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005eda:	041b      	lsls	r3, r3, #16
 8005edc:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	699b      	ldr	r3, [r3, #24]
 8005ee2:	061b      	lsls	r3, r3, #24
 8005ee4:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	461a      	mov	r2, r3
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	01db      	lsls	r3, r3, #7
 8005ef0:	4413      	add	r3, r2
 8005ef2:	3384      	adds	r3, #132	; 0x84
 8005ef4:	699b      	ldr	r3, [r3, #24]
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	461a      	mov	r2, r3
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	01db      	lsls	r3, r3, #7
 8005f00:	4413      	add	r3, r2
 8005f02:	3384      	adds	r3, #132	; 0x84
 8005f04:	461a      	mov	r2, r3
 8005f06:	2300      	movs	r3, #0
 8005f08:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005f10:	461a      	mov	r2, r3
 8005f12:	69fb      	ldr	r3, [r7, #28]
 8005f14:	431a      	orrs	r2, r3
 8005f16:	69bb      	ldr	r3, [r7, #24]
 8005f18:	431a      	orrs	r2, r3
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4619      	mov	r1, r3
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	01db      	lsls	r3, r3, #7
 8005f24:	440b      	add	r3, r1
 8005f26:	3384      	adds	r3, #132	; 0x84
 8005f28:	4619      	mov	r1, r3
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	461a      	mov	r2, r3
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	01db      	lsls	r3, r3, #7
 8005f3a:	4413      	add	r3, r2
 8005f3c:	3384      	adds	r3, #132	; 0x84
 8005f3e:	695b      	ldr	r3, [r3, #20]
 8005f40:	68fa      	ldr	r2, [r7, #12]
 8005f42:	6812      	ldr	r2, [r2, #0]
 8005f44:	4611      	mov	r1, r2
 8005f46:	687a      	ldr	r2, [r7, #4]
 8005f48:	01d2      	lsls	r2, r2, #7
 8005f4a:	440a      	add	r2, r1
 8005f4c:	3284      	adds	r2, #132	; 0x84
 8005f4e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005f52:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	461a      	mov	r2, r3
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	01db      	lsls	r3, r3, #7
 8005f5e:	4413      	add	r3, r2
 8005f60:	3384      	adds	r3, #132	; 0x84
 8005f62:	461a      	mov	r2, r3
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	695b      	ldr	r3, [r3, #20]
 8005f68:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	461a      	mov	r2, r3
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	01db      	lsls	r3, r3, #7
 8005f74:	4413      	add	r3, r2
 8005f76:	3384      	adds	r3, #132	; 0x84
 8005f78:	69da      	ldr	r2, [r3, #28]
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4619      	mov	r1, r3
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	01db      	lsls	r3, r3, #7
 8005f84:	440b      	add	r3, r1
 8005f86:	3384      	adds	r3, #132	; 0x84
 8005f88:	4619      	mov	r1, r3
 8005f8a:	4b58      	ldr	r3, [pc, #352]	; (80060ec <LTDC_SetConfig+0x32c>)
 8005f8c:	4013      	ands	r3, r2
 8005f8e:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	69da      	ldr	r2, [r3, #28]
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	6a1b      	ldr	r3, [r3, #32]
 8005f98:	68f9      	ldr	r1, [r7, #12]
 8005f9a:	6809      	ldr	r1, [r1, #0]
 8005f9c:	4608      	mov	r0, r1
 8005f9e:	6879      	ldr	r1, [r7, #4]
 8005fa0:	01c9      	lsls	r1, r1, #7
 8005fa2:	4401      	add	r1, r0
 8005fa4:	3184      	adds	r1, #132	; 0x84
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	461a      	mov	r2, r3
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	01db      	lsls	r3, r3, #7
 8005fb4:	4413      	add	r3, r2
 8005fb6:	3384      	adds	r3, #132	; 0x84
 8005fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	01db      	lsls	r3, r3, #7
 8005fc4:	4413      	add	r3, r2
 8005fc6:	3384      	adds	r3, #132	; 0x84
 8005fc8:	461a      	mov	r2, r3
 8005fca:	2300      	movs	r3, #0
 8005fcc:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	01db      	lsls	r3, r3, #7
 8005fd8:	4413      	add	r3, r2
 8005fda:	3384      	adds	r3, #132	; 0x84
 8005fdc:	461a      	mov	r2, r3
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe2:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	691b      	ldr	r3, [r3, #16]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d102      	bne.n	8005ff2 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8005fec:	2304      	movs	r3, #4
 8005fee:	61fb      	str	r3, [r7, #28]
 8005ff0:	e01b      	b.n	800602a <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	691b      	ldr	r3, [r3, #16]
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	d102      	bne.n	8006000 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8005ffa:	2303      	movs	r3, #3
 8005ffc:	61fb      	str	r3, [r7, #28]
 8005ffe:	e014      	b.n	800602a <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	691b      	ldr	r3, [r3, #16]
 8006004:	2b04      	cmp	r3, #4
 8006006:	d00b      	beq.n	8006020 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800600c:	2b02      	cmp	r3, #2
 800600e:	d007      	beq.n	8006020 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006014:	2b03      	cmp	r3, #3
 8006016:	d003      	beq.n	8006020 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800601c:	2b07      	cmp	r3, #7
 800601e:	d102      	bne.n	8006026 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8006020:	2302      	movs	r3, #2
 8006022:	61fb      	str	r3, [r7, #28]
 8006024:	e001      	b.n	800602a <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8006026:	2301      	movs	r3, #1
 8006028:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	461a      	mov	r2, r3
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	01db      	lsls	r3, r3, #7
 8006034:	4413      	add	r3, r2
 8006036:	3384      	adds	r3, #132	; 0x84
 8006038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800603a:	68fa      	ldr	r2, [r7, #12]
 800603c:	6812      	ldr	r2, [r2, #0]
 800603e:	4611      	mov	r1, r2
 8006040:	687a      	ldr	r2, [r7, #4]
 8006042:	01d2      	lsls	r2, r2, #7
 8006044:	440a      	add	r2, r1
 8006046:	3284      	adds	r2, #132	; 0x84
 8006048:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800604c:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006052:	69fa      	ldr	r2, [r7, #28]
 8006054:	fb02 f303 	mul.w	r3, r2, r3
 8006058:	041a      	lsls	r2, r3, #16
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	6859      	ldr	r1, [r3, #4]
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	1acb      	subs	r3, r1, r3
 8006064:	69f9      	ldr	r1, [r7, #28]
 8006066:	fb01 f303 	mul.w	r3, r1, r3
 800606a:	3303      	adds	r3, #3
 800606c:	68f9      	ldr	r1, [r7, #12]
 800606e:	6809      	ldr	r1, [r1, #0]
 8006070:	4608      	mov	r0, r1
 8006072:	6879      	ldr	r1, [r7, #4]
 8006074:	01c9      	lsls	r1, r1, #7
 8006076:	4401      	add	r1, r0
 8006078:	3184      	adds	r1, #132	; 0x84
 800607a:	4313      	orrs	r3, r2
 800607c:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	461a      	mov	r2, r3
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	01db      	lsls	r3, r3, #7
 8006088:	4413      	add	r3, r2
 800608a:	3384      	adds	r3, #132	; 0x84
 800608c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4619      	mov	r1, r3
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	01db      	lsls	r3, r3, #7
 8006098:	440b      	add	r3, r1
 800609a:	3384      	adds	r3, #132	; 0x84
 800609c:	4619      	mov	r1, r3
 800609e:	4b14      	ldr	r3, [pc, #80]	; (80060f0 <LTDC_SetConfig+0x330>)
 80060a0:	4013      	ands	r3, r2
 80060a2:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	461a      	mov	r2, r3
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	01db      	lsls	r3, r3, #7
 80060ae:	4413      	add	r3, r2
 80060b0:	3384      	adds	r3, #132	; 0x84
 80060b2:	461a      	mov	r2, r3
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060b8:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	461a      	mov	r2, r3
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	01db      	lsls	r3, r3, #7
 80060c4:	4413      	add	r3, r2
 80060c6:	3384      	adds	r3, #132	; 0x84
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	68fa      	ldr	r2, [r7, #12]
 80060cc:	6812      	ldr	r2, [r2, #0]
 80060ce:	4611      	mov	r1, r2
 80060d0:	687a      	ldr	r2, [r7, #4]
 80060d2:	01d2      	lsls	r2, r2, #7
 80060d4:	440a      	add	r2, r1
 80060d6:	3284      	adds	r2, #132	; 0x84
 80060d8:	f043 0301 	orr.w	r3, r3, #1
 80060dc:	6013      	str	r3, [r2, #0]
}
 80060de:	bf00      	nop
 80060e0:	3724      	adds	r7, #36	; 0x24
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr
 80060ea:	bf00      	nop
 80060ec:	fffff8f8 	.word	0xfffff8f8
 80060f0:	fffff800 	.word	0xfffff800

080060f4 <HAL_MMC_Init>:
            MMC_HandleTypeDef and create the associated handle.
  * @param  hmmc Pointer to the MMC handle  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_Init(MMC_HandleTypeDef *hmmc)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b082      	sub	sp, #8
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  /* Check the MMC handle allocation */
  if(hmmc == NULL)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d101      	bne.n	8006106 <HAL_MMC_Init+0x12>
  {
    return HAL_ERROR;
 8006102:	2301      	movs	r3, #1
 8006104:	e01d      	b.n	8006142 <HAL_MMC_Init+0x4e>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hmmc->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hmmc->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hmmc->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hmmc->Init.ClockDiv));

  if(hmmc->State == HAL_MMC_STATE_RESET)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800610c:	b2db      	uxtb	r3, r3
 800610e:	2b00      	cmp	r3, #0
 8006110:	d105      	bne.n	800611e <HAL_MMC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hmmc->Lock = HAL_UNLOCKED;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2200      	movs	r2, #0
 8006116:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hmmc->MspInitCallback(hmmc);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_MMC_MspInit(hmmc);
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f7fc f8f3 	bl	8002304 <HAL_MMC_MspInit>
#endif	
  }

  hmmc->State = HAL_MMC_STATE_BUSY;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2203      	movs	r2, #3
 8006122:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  HAL_MMC_InitCard(hmmc);
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f000 f80f 	bl	800614a <HAL_MMC_InitCard>

  /* Initialize the error code */
  hmmc->ErrorCode = HAL_DMA_ERROR_NONE;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2200      	movs	r2, #0
 8006130:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Initialize the MMC operation */
  hmmc->Context = MMC_CONTEXT_NONE;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2200      	movs	r2, #0
 8006136:	631a      	str	r2, [r3, #48]	; 0x30
                                                                                     
  /* Initialize the MMC state */
  hmmc->State = HAL_MMC_STATE_READY;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2201      	movs	r2, #1
 800613c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006140:	2300      	movs	r3, #0
}
 8006142:	4618      	mov	r0, r3
 8006144:	3708      	adds	r7, #8
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}

0800614a <HAL_MMC_InitCard>:
  * @note   This function initializes the MMC card. It could be used when a card 
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_InitCard(MMC_HandleTypeDef *hmmc)
{
 800614a:	b5b0      	push	{r4, r5, r7, lr}
 800614c:	b08e      	sub	sp, #56	; 0x38
 800614e:	af04      	add	r7, sp, #16
 8006150:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_MMC_ERROR_NONE;
 8006152:	2300      	movs	r3, #0
 8006154:	627b      	str	r3, [r7, #36]	; 0x24
  MMC_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for MMC card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8006156:	2300      	movs	r3, #0
 8006158:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800615a:	2300      	movs	r3, #0
 800615c:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800615e:	2300      	movs	r3, #0
 8006160:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8006162:	2300      	movs	r3, #0
 8006164:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8006166:	2300      	movs	r3, #0
 8006168:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800616a:	2376      	movs	r3, #118	; 0x76
 800616c:	623b      	str	r3, [r7, #32]

  /* Initialize SDMMC peripheral interface with default configuration */
  SDMMC_Init(hmmc->Instance, Init);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681d      	ldr	r5, [r3, #0]
 8006172:	466c      	mov	r4, sp
 8006174:	f107 0318 	add.w	r3, r7, #24
 8006178:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800617c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006180:	f107 030c 	add.w	r3, r7, #12
 8006184:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006186:	4628      	mov	r0, r5
 8006188:	f005 fa58 	bl	800b63c <SDMMC_Init>

  /* Disable SDMMC Clock */
  __HAL_MMC_DISABLE(hmmc); 
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	685a      	ldr	r2, [r3, #4]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800619a:	605a      	str	r2, [r3, #4]
  
  /* Set Power State to ON */
  SDMMC_PowerState_ON(hmmc->Instance);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4618      	mov	r0, r3
 80061a2:	f005 fa77 	bl	800b694 <SDMMC_PowerState_ON>
  
  /* Enable MMC Clock */
  __HAL_MMC_ENABLE(hmmc);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	685a      	ldr	r2, [r3, #4]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80061b4:	605a      	str	r2, [r3, #4]
  
  /* Required power up waiting time before starting the SD initialization sequence */
  HAL_Delay(2);
 80061b6:	2002      	movs	r0, #2
 80061b8:	f7fc ff1e 	bl	8002ff8 <HAL_Delay>
  
  /* Identify card operating voltage */
  errorstate = MMC_PowerON(hmmc);
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	f000 fbd5 	bl	800696c <MMC_PowerON>
 80061c2:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_MMC_ERROR_NONE)
 80061c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d00b      	beq.n	80061e2 <HAL_MMC_InitCard+0x98>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2201      	movs	r2, #1
 80061ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hmmc->ErrorCode |= errorstate;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d8:	431a      	orrs	r2, r3
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80061de:	2301      	movs	r3, #1
 80061e0:	e013      	b.n	800620a <HAL_MMC_InitCard+0xc0>
  }

  /* Card initialization */
  errorstate = MMC_InitCard(hmmc);
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f000 fb06 	bl	80067f4 <MMC_InitCard>
 80061e8:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_MMC_ERROR_NONE)
 80061ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d00b      	beq.n	8006208 <HAL_MMC_InitCard+0xbe>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2201      	movs	r2, #1
 80061f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hmmc->ErrorCode |= errorstate;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fe:	431a      	orrs	r2, r3
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006204:	2301      	movs	r3, #1
 8006206:	e000      	b.n	800620a <HAL_MMC_InitCard+0xc0>
  }

  return HAL_OK;
 8006208:	2300      	movs	r3, #0
}
 800620a:	4618      	mov	r0, r3
 800620c:	3728      	adds	r7, #40	; 0x28
 800620e:	46bd      	mov	sp, r7
 8006210:	bdb0      	pop	{r4, r5, r7, pc}

08006212 <HAL_MMC_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_MMC_CardInfoTypeDef structure that  
  *         contains all CSD register parameters  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_GetCardCSD(MMC_HandleTypeDef *hmmc, HAL_MMC_CardCSDTypeDef *pCSD)
{
 8006212:	b480      	push	{r7}
 8006214:	b085      	sub	sp, #20
 8006216:	af00      	add	r7, sp, #0
 8006218:	6078      	str	r0, [r7, #4]
 800621a:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0;
 800621c:	2300      	movs	r3, #0
 800621e:	60fb      	str	r3, [r7, #12]
  
  /* Byte 0 */
  tmp = (hmmc->CSD[0] & 0xFF000000U) >> 24;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006224:	0e1b      	lsrs	r3, r3, #24
 8006226:	60fb      	str	r3, [r7, #12]
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0) >> 6);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	099b      	lsrs	r3, r3, #6
 800622c:	b2db      	uxtb	r3, r3
 800622e:	f003 0303 	and.w	r3, r3, #3
 8006232:	b2da      	uxtb	r2, r3
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	701a      	strb	r2, [r3, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3C) >> 2);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	089b      	lsrs	r3, r3, #2
 800623c:	b2db      	uxtb	r3, r3
 800623e:	f003 030f 	and.w	r3, r3, #15
 8006242:	b2da      	uxtb	r2, r3
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	705a      	strb	r2, [r3, #1]
  pCSD->Reserved1      = tmp & 0x03;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	b2db      	uxtb	r3, r3
 800624c:	f003 0303 	and.w	r3, r3, #3
 8006250:	b2da      	uxtb	r2, r3
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	709a      	strb	r2, [r3, #2]
  
  /* Byte 1 */
  tmp = (hmmc->CSD[0] & 0x00FF0000) >> 16;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800625a:	0c1b      	lsrs	r3, r3, #16
 800625c:	b2db      	uxtb	r3, r3
 800625e:	60fb      	str	r3, [r7, #12]
  pCSD->TAAC = (uint8_t)tmp;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	b2da      	uxtb	r2, r3
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	70da      	strb	r2, [r3, #3]
  
  /* Byte 2 */
  tmp = (hmmc->CSD[0] & 0x0000FF00) >> 8;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800626c:	0a1b      	lsrs	r3, r3, #8
 800626e:	b2db      	uxtb	r3, r3
 8006270:	60fb      	str	r3, [r7, #12]
  pCSD->NSAC = (uint8_t)tmp;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	b2da      	uxtb	r2, r3
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	711a      	strb	r2, [r3, #4]
  
  /* Byte 3 */
  tmp = hmmc->CSD[0] & 0x000000FF;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800627e:	b2db      	uxtb	r3, r3
 8006280:	60fb      	str	r3, [r7, #12]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	b2da      	uxtb	r2, r3
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	715a      	strb	r2, [r3, #5]
  
  /* Byte 4 */
  tmp = (hmmc->CSD[1] & 0xFF000000U) >> 24;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800628e:	0e1b      	lsrs	r3, r3, #24
 8006290:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses = (uint16_t)(tmp << 4);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	b29b      	uxth	r3, r3
 8006296:	011b      	lsls	r3, r3, #4
 8006298:	b29a      	uxth	r2, r3
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	80da      	strh	r2, [r3, #6]
  
  /* Byte 5 */
  tmp = (hmmc->CSD[1] & 0x00FF0000U) >> 16;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062a2:	0c1b      	lsrs	r3, r3, #16
 80062a4:	b2db      	uxtb	r3, r3
 80062a6:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	88db      	ldrh	r3, [r3, #6]
 80062ac:	b29a      	uxth	r2, r3
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	091b      	lsrs	r3, r3, #4
 80062b2:	b29b      	uxth	r3, r3
 80062b4:	f003 030f 	and.w	r3, r3, #15
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	4313      	orrs	r3, r2
 80062bc:	b29a      	uxth	r2, r3
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	80da      	strh	r2, [r3, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0F);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	f003 030f 	and.w	r3, r3, #15
 80062ca:	b2da      	uxtb	r2, r3
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	721a      	strb	r2, [r3, #8]
  
  /* Byte 6 */
  tmp = (hmmc->CSD[1] & 0x0000FF00U) >> 8;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062d4:	0a1b      	lsrs	r3, r3, #8
 80062d6:	b2db      	uxtb	r3, r3
 80062d8:	60fb      	str	r3, [r7, #12]
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80) >> 7);
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	09db      	lsrs	r3, r3, #7
 80062de:	b2db      	uxtb	r3, r3
 80062e0:	f003 0301 	and.w	r3, r3, #1
 80062e4:	b2da      	uxtb	r2, r3
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	725a      	strb	r2, [r3, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40) >> 6);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	099b      	lsrs	r3, r3, #6
 80062ee:	b2db      	uxtb	r3, r3
 80062f0:	f003 0301 	and.w	r3, r3, #1
 80062f4:	b2da      	uxtb	r2, r3
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	729a      	strb	r2, [r3, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20) >> 5);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	095b      	lsrs	r3, r3, #5
 80062fe:	b2db      	uxtb	r3, r3
 8006300:	f003 0301 	and.w	r3, r3, #1
 8006304:	b2da      	uxtb	r2, r3
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	72da      	strb	r2, [r3, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10) >> 4);
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	091b      	lsrs	r3, r3, #4
 800630e:	b2db      	uxtb	r3, r3
 8006310:	f003 0301 	and.w	r3, r3, #1
 8006314:	b2da      	uxtb	r2, r3
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	731a      	strb	r2, [r3, #12]
  pCSD->Reserved2       = 0; /*!< Reserved */
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	2200      	movs	r2, #0
 800631e:	735a      	strb	r2, [r3, #13]
  
  pCSD->DeviceSize = (tmp & 0x03) << 10;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	029b      	lsls	r3, r3, #10
 8006324:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	611a      	str	r2, [r3, #16]
  
  /* Byte 7 */
  tmp = (uint8_t)(hmmc->CSD[1] & 0x000000FFU);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006330:	b2db      	uxtb	r3, r3
 8006332:	60fb      	str	r3, [r7, #12]
  pCSD->DeviceSize |= (tmp) << 2;
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	691a      	ldr	r2, [r3, #16]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	009b      	lsls	r3, r3, #2
 800633c:	431a      	orrs	r2, r3
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	611a      	str	r2, [r3, #16]
  
  /* Byte 8 */
  tmp = (uint8_t)((hmmc->CSD[2] & 0xFF000000U) >> 24);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006346:	0e1b      	lsrs	r3, r3, #24
 8006348:	b2db      	uxtb	r3, r3
 800634a:	60fb      	str	r3, [r7, #12]
  pCSD->DeviceSize |= (tmp & 0xC0) >> 6;
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	691a      	ldr	r2, [r3, #16]
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	099b      	lsrs	r3, r3, #6
 8006354:	f003 0303 	and.w	r3, r3, #3
 8006358:	431a      	orrs	r2, r3
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	611a      	str	r2, [r3, #16]
  
  pCSD->MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	08db      	lsrs	r3, r3, #3
 8006362:	b2db      	uxtb	r3, r3
 8006364:	f003 0307 	and.w	r3, r3, #7
 8006368:	b2da      	uxtb	r2, r3
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	751a      	strb	r2, [r3, #20]
  pCSD->MaxRdCurrentVDDMax = (tmp & 0x07);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	b2db      	uxtb	r3, r3
 8006372:	f003 0307 	and.w	r3, r3, #7
 8006376:	b2da      	uxtb	r2, r3
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	755a      	strb	r2, [r3, #21]
  
  /* Byte 9 */
  tmp = (uint8_t)((hmmc->CSD[2] & 0x00FF0000U) >> 16);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006380:	0c1b      	lsrs	r3, r3, #16
 8006382:	b2db      	uxtb	r3, r3
 8006384:	60fb      	str	r3, [r7, #12]
  pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	095b      	lsrs	r3, r3, #5
 800638a:	b2db      	uxtb	r3, r3
 800638c:	f003 0307 	and.w	r3, r3, #7
 8006390:	b2da      	uxtb	r2, r3
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	759a      	strb	r2, [r3, #22]
  pCSD->MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	089b      	lsrs	r3, r3, #2
 800639a:	b2db      	uxtb	r3, r3
 800639c:	f003 0307 	and.w	r3, r3, #7
 80063a0:	b2da      	uxtb	r2, r3
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	75da      	strb	r2, [r3, #23]
  pCSD->DeviceSizeMul      = (tmp & 0x03) << 1;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	b2db      	uxtb	r3, r3
 80063aa:	005b      	lsls	r3, r3, #1
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	f003 0306 	and.w	r3, r3, #6
 80063b2:	b2da      	uxtb	r2, r3
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	761a      	strb	r2, [r3, #24]
  /* Byte 10 */
  tmp = (uint8_t)((hmmc->CSD[2] & 0x0000FF00U) >> 8);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063bc:	0a1b      	lsrs	r3, r3, #8
 80063be:	b2db      	uxtb	r3, r3
 80063c0:	60fb      	str	r3, [r7, #12]
  pCSD->DeviceSizeMul |= (tmp & 0x80) >> 7;
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	7e1b      	ldrb	r3, [r3, #24]
 80063c6:	b2da      	uxtb	r2, r3
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	09db      	lsrs	r3, r3, #7
 80063cc:	b2db      	uxtb	r3, r3
 80063ce:	f003 0301 	and.w	r3, r3, #1
 80063d2:	b2db      	uxtb	r3, r3
 80063d4:	4313      	orrs	r3, r2
 80063d6:	b2da      	uxtb	r2, r3
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	761a      	strb	r2, [r3, #24]
  
  hmmc->MmcCard.BlockNbr  = (pCSD->DeviceSize + 1) ;
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	691b      	ldr	r3, [r3, #16]
 80063e0:	1c5a      	adds	r2, r3, #1
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	651a      	str	r2, [r3, #80]	; 0x50
  hmmc->MmcCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	7e1b      	ldrb	r3, [r3, #24]
 80063ea:	b2db      	uxtb	r3, r3
 80063ec:	3302      	adds	r3, #2
 80063ee:	2201      	movs	r2, #1
 80063f0:	409a      	lsls	r2, r3
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063f6:	fb02 f203 	mul.w	r2, r2, r3
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	651a      	str	r2, [r3, #80]	; 0x50
  hmmc->MmcCard.BlockSize = 1 << (pCSD->RdBlockLen);
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	7a1b      	ldrb	r3, [r3, #8]
 8006402:	b2db      	uxtb	r3, r3
 8006404:	461a      	mov	r2, r3
 8006406:	2301      	movs	r3, #1
 8006408:	4093      	lsls	r3, r2
 800640a:	461a      	mov	r2, r3
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	655a      	str	r2, [r3, #84]	; 0x54
  
  hmmc->MmcCard.LogBlockNbr =  (hmmc->MmcCard.BlockNbr) * ((hmmc->MmcCard.BlockSize) / 512); 
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006414:	687a      	ldr	r2, [r7, #4]
 8006416:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006418:	0a52      	lsrs	r2, r2, #9
 800641a:	fb02 f203 	mul.w	r2, r2, r3
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	659a      	str	r2, [r3, #88]	; 0x58
  hmmc->MmcCard.LogBlockSize = 512;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006428:	65da      	str	r2, [r3, #92]	; 0x5c
  
  pCSD->EraseGrSize = (tmp & 0x40) >> 6;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	099b      	lsrs	r3, r3, #6
 800642e:	b2db      	uxtb	r3, r3
 8006430:	f003 0301 	and.w	r3, r3, #1
 8006434:	b2da      	uxtb	r2, r3
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	765a      	strb	r2, [r3, #25]
  pCSD->EraseGrMul  = (tmp & 0x3F) << 1;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	b2db      	uxtb	r3, r3
 800643e:	005b      	lsls	r3, r3, #1
 8006440:	b2db      	uxtb	r3, r3
 8006442:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8006446:	b2da      	uxtb	r2, r3
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	769a      	strb	r2, [r3, #26]
  
  /* Byte 11 */
  tmp = (uint8_t)(hmmc->CSD[2] & 0x000000FF);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006450:	b2db      	uxtb	r3, r3
 8006452:	60fb      	str	r3, [r7, #12]
  pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	7e9b      	ldrb	r3, [r3, #26]
 8006458:	b2da      	uxtb	r2, r3
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	09db      	lsrs	r3, r3, #7
 800645e:	b2db      	uxtb	r3, r3
 8006460:	f003 0301 	and.w	r3, r3, #1
 8006464:	b2db      	uxtb	r3, r3
 8006466:	4313      	orrs	r3, r2
 8006468:	b2da      	uxtb	r2, r3
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	769a      	strb	r2, [r3, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7F);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	b2db      	uxtb	r3, r3
 8006472:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006476:	b2da      	uxtb	r2, r3
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	76da      	strb	r2, [r3, #27]
  
  /* Byte 12 */
  tmp = (uint8_t)((hmmc->CSD[3] & 0xFF000000U) >> 24);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006480:	0e1b      	lsrs	r3, r3, #24
 8006482:	b2db      	uxtb	r3, r3
 8006484:	60fb      	str	r3, [r7, #12]
  pCSD->WrProtectGrEnable = (tmp & 0x80) >> 7;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	09db      	lsrs	r3, r3, #7
 800648a:	b2db      	uxtb	r3, r3
 800648c:	f003 0301 	and.w	r3, r3, #1
 8006490:	b2da      	uxtb	r2, r3
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	771a      	strb	r2, [r3, #28]
  pCSD->ManDeflECC        = (tmp & 0x60) >> 5;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	095b      	lsrs	r3, r3, #5
 800649a:	b2db      	uxtb	r3, r3
 800649c:	f003 0303 	and.w	r3, r3, #3
 80064a0:	b2da      	uxtb	r2, r3
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	775a      	strb	r2, [r3, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1C) >> 2;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	089b      	lsrs	r3, r3, #2
 80064aa:	b2db      	uxtb	r3, r3
 80064ac:	f003 0307 	and.w	r3, r3, #7
 80064b0:	b2da      	uxtb	r2, r3
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	779a      	strb	r2, [r3, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03) << 2;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	b2db      	uxtb	r3, r3
 80064ba:	009b      	lsls	r3, r3, #2
 80064bc:	b2db      	uxtb	r3, r3
 80064be:	f003 030c 	and.w	r3, r3, #12
 80064c2:	b2da      	uxtb	r2, r3
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	77da      	strb	r2, [r3, #31]
  
  /* Byte 13 */
  tmp = (uint8_t)((hmmc->CSD[3] & 0x00FF0000) >> 16);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064cc:	0c1b      	lsrs	r3, r3, #16
 80064ce:	b2db      	uxtb	r3, r3
 80064d0:	60fb      	str	r3, [r7, #12]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	7fdb      	ldrb	r3, [r3, #31]
 80064d6:	b2da      	uxtb	r2, r3
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	099b      	lsrs	r3, r3, #6
 80064dc:	b2db      	uxtb	r3, r3
 80064de:	f003 0303 	and.w	r3, r3, #3
 80064e2:	b2db      	uxtb	r3, r3
 80064e4:	4313      	orrs	r3, r2
 80064e6:	b2da      	uxtb	r2, r3
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	77da      	strb	r2, [r3, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20) >> 5;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	095b      	lsrs	r3, r3, #5
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	f003 0301 	and.w	r3, r3, #1
 80064f6:	b2da      	uxtb	r2, r3
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	f883 2020 	strb.w	r2, [r3, #32]
  pCSD->Reserved3           = 0;
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	2200      	movs	r2, #0
 8006502:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	b2db      	uxtb	r3, r3
 800650a:	f003 0301 	and.w	r3, r3, #1
 800650e:	b2da      	uxtb	r2, r3
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  
  /* Byte 14 */
  tmp = (uint8_t)((hmmc->CSD[3] & 0x0000FF00) >> 8);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800651a:	0a1b      	lsrs	r3, r3, #8
 800651c:	b2db      	uxtb	r3, r3
 800651e:	60fb      	str	r3, [r7, #12]
  pCSD->FileFormatGrouop = (tmp & 0x80) >> 7;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	09db      	lsrs	r3, r3, #7
 8006524:	b2db      	uxtb	r3, r3
 8006526:	f003 0301 	and.w	r3, r3, #1
 800652a:	b2da      	uxtb	r2, r3
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40) >> 6;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	099b      	lsrs	r3, r3, #6
 8006536:	b2db      	uxtb	r3, r3
 8006538:	f003 0301 	and.w	r3, r3, #1
 800653c:	b2da      	uxtb	r2, r3
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20) >> 5;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	095b      	lsrs	r3, r3, #5
 8006548:	b2db      	uxtb	r3, r3
 800654a:	f003 0301 	and.w	r3, r3, #1
 800654e:	b2da      	uxtb	r2, r3
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10) >> 4;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	091b      	lsrs	r3, r3, #4
 800655a:	b2db      	uxtb	r3, r3
 800655c:	f003 0301 	and.w	r3, r3, #1
 8006560:	b2da      	uxtb	r2, r3
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0C) >> 2;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	089b      	lsrs	r3, r3, #2
 800656c:	b2db      	uxtb	r3, r3
 800656e:	f003 0303 	and.w	r3, r3, #3
 8006572:	b2da      	uxtb	r2, r3
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03);
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	b2db      	uxtb	r3, r3
 800657e:	f003 0303 	and.w	r3, r3, #3
 8006582:	b2da      	uxtb	r2, r3
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* Byte 15 */
  tmp = (uint8_t)(hmmc->CSD[3] & 0x000000FF);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800658e:	b2db      	uxtb	r3, r3
 8006590:	60fb      	str	r3, [r7, #12]
  pCSD->CSD_CRC   = (tmp & 0xFE) >> 1;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	085b      	lsrs	r3, r3, #1
 8006596:	b2db      	uxtb	r3, r3
 8006598:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800659c:	b2da      	uxtb	r2, r3
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  pCSD->Reserved4 = 1;
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	2201      	movs	r2, #1
 80065a8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  return HAL_OK;
 80065ac:	2300      	movs	r3, #0
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3714      	adds	r7, #20
 80065b2:	46bd      	mov	sp, r7
 80065b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b8:	4770      	bx	lr
	...

080065bc <HAL_MMC_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_ConfigWideBusOperation(MMC_HandleTypeDef *hmmc, uint32_t WideMode)
{
 80065bc:	b5b0      	push	{r4, r5, r7, lr}
 80065be:	b090      	sub	sp, #64	; 0x40
 80065c0:	af04      	add	r7, sp, #16
 80065c2:	6078      	str	r0, [r7, #4]
 80065c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0;
 80065c6:	2300      	movs	r3, #0
 80065c8:	623b      	str	r3, [r7, #32]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate = HAL_MMC_ERROR_NONE;
 80065ca:	2300      	movs	r3, #0
 80065cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t response = 0, busy = 0;
 80065ce:	2300      	movs	r3, #0
 80065d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065d2:	2300      	movs	r3, #0
 80065d4:	62bb      	str	r3, [r7, #40]	; 0x28
	
	/* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));
	
  /* Chnage Satte */
  hmmc->State = HAL_MMC_STATE_BUSY;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2203      	movs	r2, #3
 80065da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Update Clock for Bus mode update */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80065de:	2300      	movs	r3, #0
 80065e0:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80065e2:	2300      	movs	r3, #0
 80065e4:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80065e6:	2300      	movs	r3, #0
 80065e8:	613b      	str	r3, [r7, #16]
  Init.BusWide             = WideMode;
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80065ee:	2300      	movs	r3, #0
 80065f0:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 80065f2:	2376      	movs	r3, #118	; 0x76
 80065f4:	61fb      	str	r3, [r7, #28]
  /* Initialize SDMMC*/
  SDMMC_Init(hmmc->Instance, Init); 
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681d      	ldr	r5, [r3, #0]
 80065fa:	466c      	mov	r4, sp
 80065fc:	f107 0314 	add.w	r3, r7, #20
 8006600:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006604:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006608:	f107 0308 	add.w	r3, r7, #8
 800660c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800660e:	4628      	mov	r0, r5
 8006610:	f005 f814 	bl	800b63c <SDMMC_Init>
    
  if(WideMode == SDMMC_BUS_WIDE_8B)
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800661a:	d110      	bne.n	800663e <HAL_MMC_ConfigWideBusOperation+0x82>
  {
    errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70200);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4971      	ldr	r1, [pc, #452]	; (80067e8 <HAL_MMC_ConfigWideBusOperation+0x22c>)
 8006622:	4618      	mov	r0, r3
 8006624:	f005 f98c 	bl	800b940 <SDMMC_CmdSwitch>
 8006628:	6278      	str	r0, [r7, #36]	; 0x24
    if(errorstate != HAL_MMC_ERROR_NONE)
 800662a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800662c:	2b00      	cmp	r3, #0
 800662e:	d06b      	beq.n	8006708 <HAL_MMC_ConfigWideBusOperation+0x14c>
    {
      hmmc->ErrorCode |= errorstate;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006636:	431a      	orrs	r2, r3
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	639a      	str	r2, [r3, #56]	; 0x38
 800663c:	e064      	b.n	8006708 <HAL_MMC_ConfigWideBusOperation+0x14c>
    }
  }
  else if(WideMode == SDMMC_BUS_WIDE_4B)
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006644:	d110      	bne.n	8006668 <HAL_MMC_ConfigWideBusOperation+0xac>
  {
    errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70100);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4968      	ldr	r1, [pc, #416]	; (80067ec <HAL_MMC_ConfigWideBusOperation+0x230>)
 800664c:	4618      	mov	r0, r3
 800664e:	f005 f977 	bl	800b940 <SDMMC_CmdSwitch>
 8006652:	6278      	str	r0, [r7, #36]	; 0x24
    if(errorstate != HAL_MMC_ERROR_NONE)
 8006654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006656:	2b00      	cmp	r3, #0
 8006658:	d056      	beq.n	8006708 <HAL_MMC_ConfigWideBusOperation+0x14c>
    {
      hmmc->ErrorCode |= errorstate;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800665e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006660:	431a      	orrs	r2, r3
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	639a      	str	r2, [r3, #56]	; 0x38
 8006666:	e04f      	b.n	8006708 <HAL_MMC_ConfigWideBusOperation+0x14c>
    }
  }
  else if(WideMode == SDMMC_BUS_WIDE_1B)
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d110      	bne.n	8006690 <HAL_MMC_ConfigWideBusOperation+0xd4>
  {
    errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70000);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	495f      	ldr	r1, [pc, #380]	; (80067f0 <HAL_MMC_ConfigWideBusOperation+0x234>)
 8006674:	4618      	mov	r0, r3
 8006676:	f005 f963 	bl	800b940 <SDMMC_CmdSwitch>
 800667a:	6278      	str	r0, [r7, #36]	; 0x24
    if(errorstate != HAL_MMC_ERROR_NONE)
 800667c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800667e:	2b00      	cmp	r3, #0
 8006680:	d042      	beq.n	8006708 <HAL_MMC_ConfigWideBusOperation+0x14c>
    {
      hmmc->ErrorCode |= errorstate;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006688:	431a      	orrs	r2, r3
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	639a      	str	r2, [r3, #56]	; 0x38
 800668e:	e03b      	b.n	8006708 <HAL_MMC_ConfigWideBusOperation+0x14c>
    }
  }
  else
  {
    /* WideMode is not a valid argument*/
    hmmc->ErrorCode |= HAL_MMC_ERROR_PARAM;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006694:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  /* Check for switch error and violation of the trial number of sending CMD 13 */
  while(busy == 0)
 800669c:	e034      	b.n	8006708 <HAL_MMC_ConfigWideBusOperation+0x14c>
  {
    if(count++ == SDMMC_MAX_TRIAL)
 800669e:	6a3b      	ldr	r3, [r7, #32]
 80066a0:	1c5a      	adds	r2, r3, #1
 80066a2:	623a      	str	r2, [r7, #32]
 80066a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d10b      	bne.n	80066c4 <HAL_MMC_ConfigWideBusOperation+0x108>
    {
      hmmc->State = HAL_MMC_STATE_READY;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2201      	movs	r2, #1
 80066b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hmmc->ErrorCode |= HAL_MMC_ERROR_REQUEST_NOT_APPLICABLE;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066b8:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80066c0:	2301      	movs	r3, #1
 80066c2:	e08c      	b.n	80067de <HAL_MMC_ConfigWideBusOperation+0x222>
    }
    
    /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
    errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16));
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681a      	ldr	r2, [r3, #0]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066cc:	041b      	lsls	r3, r3, #16
 80066ce:	4619      	mov	r1, r3
 80066d0:	4610      	mov	r0, r2
 80066d2:	f005 f8f0 	bl	800b8b6 <SDMMC_CmdSendStatus>
 80066d6:	6278      	str	r0, [r7, #36]	; 0x24
    if(errorstate != HAL_MMC_ERROR_NONE)
 80066d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d005      	beq.n	80066ea <HAL_MMC_ConfigWideBusOperation+0x12e>
    {
      hmmc->ErrorCode |= errorstate;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e4:	431a      	orrs	r2, r3
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    /* Get command response */
    response = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	2100      	movs	r1, #0
 80066f0:	4618      	mov	r0, r3
 80066f2:	f005 f822 	bl	800b73a <SDMMC_GetResponse>
 80066f6:	62f8      	str	r0, [r7, #44]	; 0x2c
    
    /* Get operating voltage*/
    busy = (((response >> 7) == 1) ? 0 : 1);
 80066f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066fa:	09db      	lsrs	r3, r3, #7
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	bf14      	ite	ne
 8006700:	2301      	movne	r3, #1
 8006702:	2300      	moveq	r3, #0
 8006704:	b2db      	uxtb	r3, r3
 8006706:	62bb      	str	r3, [r7, #40]	; 0x28
  while(busy == 0)
 8006708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800670a:	2b00      	cmp	r3, #0
 800670c:	d0c7      	beq.n	800669e <HAL_MMC_ConfigWideBusOperation+0xe2>
  }
      
  /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
  count = SDMMC_DATATIMEOUT;
 800670e:	f04f 33ff 	mov.w	r3, #4294967295
 8006712:	623b      	str	r3, [r7, #32]
  while((response & 0x00000100) == 0)
 8006714:	e02a      	b.n	800676c <HAL_MMC_ConfigWideBusOperation+0x1b0>
  {
    if(count-- == 0)
 8006716:	6a3b      	ldr	r3, [r7, #32]
 8006718:	1e5a      	subs	r2, r3, #1
 800671a:	623a      	str	r2, [r7, #32]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d10b      	bne.n	8006738 <HAL_MMC_ConfigWideBusOperation+0x17c>
    {
      hmmc->State = HAL_MMC_STATE_READY;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2201      	movs	r2, #1
 8006724:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hmmc->ErrorCode |= HAL_MMC_ERROR_REQUEST_NOT_APPLICABLE;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800672c:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006734:	2301      	movs	r3, #1
 8006736:	e052      	b.n	80067de <HAL_MMC_ConfigWideBusOperation+0x222>
    }
    
    /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
    errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16));
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681a      	ldr	r2, [r3, #0]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006740:	041b      	lsls	r3, r3, #16
 8006742:	4619      	mov	r1, r3
 8006744:	4610      	mov	r0, r2
 8006746:	f005 f8b6 	bl	800b8b6 <SDMMC_CmdSendStatus>
 800674a:	6278      	str	r0, [r7, #36]	; 0x24
    if(errorstate != HAL_MMC_ERROR_NONE)
 800674c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800674e:	2b00      	cmp	r3, #0
 8006750:	d005      	beq.n	800675e <HAL_MMC_ConfigWideBusOperation+0x1a2>
    {
      hmmc->ErrorCode |= errorstate;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006758:	431a      	orrs	r2, r3
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    /* Get command response */
    response = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	2100      	movs	r1, #0
 8006764:	4618      	mov	r0, r3
 8006766:	f004 ffe8 	bl	800b73a <SDMMC_GetResponse>
 800676a:	62f8      	str	r0, [r7, #44]	; 0x2c
  while((response & 0x00000100) == 0)
 800676c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800676e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006772:	2b00      	cmp	r3, #0
 8006774:	d0cf      	beq.n	8006716 <HAL_MMC_ConfigWideBusOperation+0x15a>
  }
  
  if(hmmc->ErrorCode != HAL_MMC_ERROR_NONE)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800677a:	2b00      	cmp	r3, #0
 800677c:	d00a      	beq.n	8006794 <HAL_MMC_ConfigWideBusOperation+0x1d8>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006786:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->State = HAL_MMC_STATE_READY;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2201      	movs	r2, #1
 800678c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006790:	2301      	movs	r3, #1
 8006792:	e024      	b.n	80067de <HAL_MMC_ConfigWideBusOperation+0x222>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hmmc->Init.ClockEdge;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hmmc->Init.ClockBypass;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hmmc->Init.ClockPowerSave;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	68db      	ldr	r3, [r3, #12]
 80067a4:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hmmc->Init.HardwareFlowControl;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	695b      	ldr	r3, [r3, #20]
 80067ae:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hmmc->Init.ClockDiv;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	699b      	ldr	r3, [r3, #24]
 80067b4:	61fb      	str	r3, [r7, #28]
    SDMMC_Init(hmmc->Instance, Init);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681d      	ldr	r5, [r3, #0]
 80067ba:	466c      	mov	r4, sp
 80067bc:	f107 0314 	add.w	r3, r7, #20
 80067c0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80067c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80067c8:	f107 0308 	add.w	r3, r7, #8
 80067cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80067ce:	4628      	mov	r0, r5
 80067d0:	f004 ff34 	bl	800b63c <SDMMC_Init>
  }

  /* Change State */
  hmmc->State = HAL_MMC_STATE_READY;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2201      	movs	r2, #1
 80067d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return HAL_OK;
 80067dc:	2300      	movs	r3, #0
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3730      	adds	r7, #48	; 0x30
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bdb0      	pop	{r4, r5, r7, pc}
 80067e6:	bf00      	nop
 80067e8:	03b70200 	.word	0x03b70200
 80067ec:	03b70100 	.word	0x03b70100
 80067f0:	03b70000 	.word	0x03b70000

080067f4 <MMC_InitCard>:
  * @brief  Initializes the mmc card.
  * @param  hmmc Pointer to MMC handle
  * @retval MMC Card error state
  */
static uint32_t MMC_InitCard(MMC_HandleTypeDef *hmmc)
{
 80067f4:	b5b0      	push	{r4, r5, r7, lr}
 80067f6:	b094      	sub	sp, #80	; 0x50
 80067f8:	af04      	add	r7, sp, #16
 80067fa:	6078      	str	r0, [r7, #4]
  HAL_MMC_CardCSDTypeDef CSD;
  uint32_t errorstate = HAL_MMC_ERROR_NONE;
 80067fc:	2300      	movs	r3, #0
 80067fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t mmc_rca = 1;
 8006800:	2301      	movs	r3, #1
 8006802:	81fb      	strh	r3, [r7, #14]
  
  /* Check the power State */
  if(SDMMC_GetPowerState(hmmc->Instance) == 0) 
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4618      	mov	r0, r3
 800680a:	f004 ff51 	bl	800b6b0 <SDMMC_GetPowerState>
 800680e:	4603      	mov	r3, r0
 8006810:	2b00      	cmp	r3, #0
 8006812:	d102      	bne.n	800681a <MMC_InitCard+0x26>
  {
    /* Power off */
    return HAL_MMC_ERROR_REQUEST_NOT_APPLICABLE;
 8006814:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006818:	e0a4      	b.n	8006964 <MMC_InitCard+0x170>
  }
  
  /* Send CMD2 ALL_SEND_CID */
  errorstate = SDMMC_CmdSendCID(hmmc->Instance);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4618      	mov	r0, r3
 8006820:	f004 ffe5 	bl	800b7ee <SDMMC_CmdSendCID>
 8006824:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_MMC_ERROR_NONE)
 8006826:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006828:	2b00      	cmp	r3, #0
 800682a:	d001      	beq.n	8006830 <MMC_InitCard+0x3c>
  {
    return errorstate;
 800682c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800682e:	e099      	b.n	8006964 <MMC_InitCard+0x170>
  }
  else
  {
    /* Get Card identification number data */
    hmmc->CID[0] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	2100      	movs	r1, #0
 8006836:	4618      	mov	r0, r3
 8006838:	f004 ff7f 	bl	800b73a <SDMMC_GetResponse>
 800683c:	4602      	mov	r2, r0
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	671a      	str	r2, [r3, #112]	; 0x70
    hmmc->CID[1] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	2104      	movs	r1, #4
 8006848:	4618      	mov	r0, r3
 800684a:	f004 ff76 	bl	800b73a <SDMMC_GetResponse>
 800684e:	4602      	mov	r2, r0
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	675a      	str	r2, [r3, #116]	; 0x74
    hmmc->CID[2] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP3);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	2108      	movs	r1, #8
 800685a:	4618      	mov	r0, r3
 800685c:	f004 ff6d 	bl	800b73a <SDMMC_GetResponse>
 8006860:	4602      	mov	r2, r0
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	679a      	str	r2, [r3, #120]	; 0x78
    hmmc->CID[3] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP4);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	210c      	movs	r1, #12
 800686c:	4618      	mov	r0, r3
 800686e:	f004 ff64 	bl	800b73a <SDMMC_GetResponse>
 8006872:	4602      	mov	r2, r0
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	67da      	str	r2, [r3, #124]	; 0x7c
  }
  
  /* Send CMD3 SET_REL_ADDR with argument 0 */
  /* MMC Card publishes its RCA. */
  errorstate = SDMMC_CmdSetRelAdd(hmmc->Instance, &mmc_rca);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f107 020e 	add.w	r2, r7, #14
 8006880:	4611      	mov	r1, r2
 8006882:	4618      	mov	r0, r3
 8006884:	f004 fff4 	bl	800b870 <SDMMC_CmdSetRelAdd>
 8006888:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_MMC_ERROR_NONE)
 800688a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800688c:	2b00      	cmp	r3, #0
 800688e:	d001      	beq.n	8006894 <MMC_InitCard+0xa0>
  {
    return errorstate;
 8006890:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006892:	e067      	b.n	8006964 <MMC_InitCard+0x170>
  }
  
  /* Get the MMC card RCA */
  hmmc->MmcCard.RelCardAdd = mmc_rca;
 8006894:	89fb      	ldrh	r3, [r7, #14]
 8006896:	461a      	mov	r2, r3
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Send CMD9 SEND_CSD with argument as card's RCA */
  errorstate = SDMMC_CmdSendCSD(hmmc->Instance, (uint32_t)(hmmc->MmcCard.RelCardAdd << 16U));
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681a      	ldr	r2, [r3, #0]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068a4:	041b      	lsls	r3, r3, #16
 80068a6:	4619      	mov	r1, r3
 80068a8:	4610      	mov	r0, r2
 80068aa:	f004 ffc0 	bl	800b82e <SDMMC_CmdSendCSD>
 80068ae:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_MMC_ERROR_NONE)
 80068b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d001      	beq.n	80068ba <MMC_InitCard+0xc6>
  {
    return errorstate;
 80068b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068b8:	e054      	b.n	8006964 <MMC_InitCard+0x170>
  }
  else
  {
    /* Get Card Specific Data */
    hmmc->CSD[0U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	2100      	movs	r1, #0
 80068c0:	4618      	mov	r0, r3
 80068c2:	f004 ff3a 	bl	800b73a <SDMMC_GetResponse>
 80068c6:	4602      	mov	r2, r0
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	661a      	str	r2, [r3, #96]	; 0x60
    hmmc->CSD[1U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	2104      	movs	r1, #4
 80068d2:	4618      	mov	r0, r3
 80068d4:	f004 ff31 	bl	800b73a <SDMMC_GetResponse>
 80068d8:	4602      	mov	r2, r0
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	665a      	str	r2, [r3, #100]	; 0x64
    hmmc->CSD[2U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP3);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	2108      	movs	r1, #8
 80068e4:	4618      	mov	r0, r3
 80068e6:	f004 ff28 	bl	800b73a <SDMMC_GetResponse>
 80068ea:	4602      	mov	r2, r0
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	669a      	str	r2, [r3, #104]	; 0x68
    hmmc->CSD[3U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP4);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	210c      	movs	r1, #12
 80068f6:	4618      	mov	r0, r3
 80068f8:	f004 ff1f 	bl	800b73a <SDMMC_GetResponse>
 80068fc:	4602      	mov	r2, r0
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	66da      	str	r2, [r3, #108]	; 0x6c
  }
  
  /* Get the Card Class */
  hmmc->MmcCard.Class = (SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2) >> 20);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	2104      	movs	r1, #4
 8006908:	4618      	mov	r0, r3
 800690a:	f004 ff16 	bl	800b73a <SDMMC_GetResponse>
 800690e:	4603      	mov	r3, r0
 8006910:	0d1a      	lsrs	r2, r3, #20
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	649a      	str	r2, [r3, #72]	; 0x48
  
  /* Get CSD parameters */
  HAL_MMC_GetCardCSD(hmmc, &CSD);
 8006916:	f107 0310 	add.w	r3, r7, #16
 800691a:	4619      	mov	r1, r3
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f7ff fc78 	bl	8006212 <HAL_MMC_GetCardCSD>

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16));
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6819      	ldr	r1, [r3, #0]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800692a:	041b      	lsls	r3, r3, #16
 800692c:	f04f 0400 	mov.w	r4, #0
 8006930:	461a      	mov	r2, r3
 8006932:	4623      	mov	r3, r4
 8006934:	4608      	mov	r0, r1
 8006936:	f004 ff15 	bl	800b764 <SDMMC_CmdSelDesel>
 800693a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_MMC_ERROR_NONE)
 800693c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800693e:	2b00      	cmp	r3, #0
 8006940:	d001      	beq.n	8006946 <MMC_InitCard+0x152>
  {
    return errorstate;
 8006942:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006944:	e00e      	b.n	8006964 <MMC_InitCard+0x170>
  }

  /* Configure SDMMC peripheral interface */     
  SDMMC_Init(hmmc->Instance, hmmc->Init);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681d      	ldr	r5, [r3, #0]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	466c      	mov	r4, sp
 800694e:	f103 0210 	add.w	r2, r3, #16
 8006952:	ca07      	ldmia	r2, {r0, r1, r2}
 8006954:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006958:	3304      	adds	r3, #4
 800695a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800695c:	4628      	mov	r0, r5
 800695e:	f004 fe6d 	bl	800b63c <SDMMC_Init>

  /* All cards are initialized */
  return HAL_MMC_ERROR_NONE;
 8006962:	2300      	movs	r3, #0
}
 8006964:	4618      	mov	r0, r3
 8006966:	3740      	adds	r7, #64	; 0x40
 8006968:	46bd      	mov	sp, r7
 800696a:	bdb0      	pop	{r4, r5, r7, pc}

0800696c <MMC_PowerON>:
  *         in the MMC handle.
  * @param  hmmc Pointer to MMC handle
  * @retval error state
  */
static uint32_t MMC_PowerON(MMC_HandleTypeDef *hmmc)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b086      	sub	sp, #24
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 8006974:	2300      	movs	r3, #0
 8006976:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0, validvoltage = 0;
 8006978:	2300      	movs	r3, #0
 800697a:	617b      	str	r3, [r7, #20]
 800697c:	2300      	movs	r3, #0
 800697e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_MMC_ERROR_NONE;
 8006980:	2300      	movs	r3, #0
 8006982:	60fb      	str	r3, [r7, #12]
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hmmc->Instance);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4618      	mov	r0, r3
 800698a:	f004 ff10 	bl	800b7ae <SDMMC_CmdGoIdleState>
 800698e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_MMC_ERROR_NONE)
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d027      	beq.n	80069e6 <MMC_PowerON+0x7a>
  {
    return errorstate;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	e036      	b.n	8006a08 <MMC_PowerON+0x9c>
  }
  
  while(validvoltage == 0)
  {
    if(count++ == SDMMC_MAX_VOLT_TRIAL)
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	1c5a      	adds	r2, r3, #1
 800699e:	60ba      	str	r2, [r7, #8]
 80069a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d102      	bne.n	80069ae <MMC_PowerON+0x42>
    {
      return HAL_MMC_ERROR_INVALID_VOLTRANGE;
 80069a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80069ac:	e02c      	b.n	8006a08 <MMC_PowerON+0x9c>
    }
    
    /* SEND CMD1 APP_CMD with MMC_HIGH_VOLTAGE_RANGE(0xC0FF8000) as argument */
    errorstate = SDMMC_CmdOpCondition(hmmc->Instance, eMMC_HIGH_VOLTAGE_RANGE);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4917      	ldr	r1, [pc, #92]	; (8006a10 <MMC_PowerON+0xa4>)
 80069b4:	4618      	mov	r0, r3
 80069b6:	f004 ffa2 	bl	800b8fe <SDMMC_CmdOpCondition>
 80069ba:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_MMC_ERROR_NONE)
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d002      	beq.n	80069c8 <MMC_PowerON+0x5c>
    {
      return HAL_MMC_ERROR_UNSUPPORTED_FEATURE;
 80069c2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80069c6:	e01f      	b.n	8006a08 <MMC_PowerON+0x9c>
    }
    
    /* Get command response */
    response = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	2100      	movs	r1, #0
 80069ce:	4618      	mov	r0, r3
 80069d0:	f004 feb3 	bl	800b73a <SDMMC_GetResponse>
 80069d4:	6178      	str	r0, [r7, #20]
    
    /* Get operating voltage*/
    validvoltage = (((response >> 31) == 1) ? 1 : 0);
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	0fdb      	lsrs	r3, r3, #31
 80069da:	2b01      	cmp	r3, #1
 80069dc:	bf0c      	ite	eq
 80069de:	2301      	moveq	r3, #1
 80069e0:	2300      	movne	r3, #0
 80069e2:	b2db      	uxtb	r3, r3
 80069e4:	613b      	str	r3, [r7, #16]
  while(validvoltage == 0)
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d0d6      	beq.n	800699a <MMC_PowerON+0x2e>
  }
  
  /* When power routine is finished and command returns valid voltage */
  if ((response & MMC_HIGH_VOLTAGE_RANGE) == MMC_HIGH_VOLTAGE_RANGE)
 80069ec:	697a      	ldr	r2, [r7, #20]
 80069ee:	4b09      	ldr	r3, [pc, #36]	; (8006a14 <MMC_PowerON+0xa8>)
 80069f0:	4013      	ands	r3, r2
 80069f2:	4a08      	ldr	r2, [pc, #32]	; (8006a14 <MMC_PowerON+0xa8>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d103      	bne.n	8006a00 <MMC_PowerON+0x94>
  {
    /* When voltage range of the card is within 2.7V and 3.6V */
    hmmc->MmcCard.CardType = MMC_HIGH_VOLTAGE_CARD;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2200      	movs	r2, #0
 80069fc:	645a      	str	r2, [r3, #68]	; 0x44
 80069fe:	e002      	b.n	8006a06 <MMC_PowerON+0x9a>
  }
  else
  {
    /* When voltage range of the card is within 1.65V and 1.95V or 2.7V and 3.6V */
    hmmc->MmcCard.CardType = MMC_DUAL_VOLTAGE_CARD;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2201      	movs	r2, #1
 8006a04:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  return HAL_MMC_ERROR_NONE;
 8006a06:	2300      	movs	r3, #0
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	3718      	adds	r7, #24
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}
 8006a10:	c0ff8000 	.word	0xc0ff8000
 8006a14:	80ff8000 	.word	0x80ff8000

08006a18 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006a18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a1a:	b08f      	sub	sp, #60	; 0x3c
 8006a1c:	af0a      	add	r7, sp, #40	; 0x28
 8006a1e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d101      	bne.n	8006a2a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006a26:	2301      	movs	r3, #1
 8006a28:	e10a      	b.n	8006c40 <HAL_PCD_Init+0x228>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8006a30:	b2db      	uxtb	r3, r3
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d106      	bne.n	8006a44 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f7fb ff90 	bl	8002964 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2203      	movs	r2, #3
 8006a48:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4618      	mov	r0, r3
 8006a52:	f005 fa85 	bl	800bf60 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	603b      	str	r3, [r7, #0]
 8006a5c:	687e      	ldr	r6, [r7, #4]
 8006a5e:	466d      	mov	r5, sp
 8006a60:	f106 0410 	add.w	r4, r6, #16
 8006a64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006a66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006a68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006a6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006a6c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006a70:	e885 0003 	stmia.w	r5, {r0, r1}
 8006a74:	1d33      	adds	r3, r6, #4
 8006a76:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006a78:	6838      	ldr	r0, [r7, #0]
 8006a7a:	f005 f977 	bl	800bd6c <USB_CoreInit>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d005      	beq.n	8006a90 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2202      	movs	r2, #2
 8006a88:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	e0d7      	b.n	8006c40 <HAL_PCD_Init+0x228>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	2100      	movs	r1, #0
 8006a96:	4618      	mov	r0, r3
 8006a98:	f005 fa73 	bl	800bf82 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	73fb      	strb	r3, [r7, #15]
 8006aa0:	e04a      	b.n	8006b38 <HAL_PCD_Init+0x120>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006aa2:	7bfa      	ldrb	r2, [r7, #15]
 8006aa4:	6879      	ldr	r1, [r7, #4]
 8006aa6:	4613      	mov	r3, r2
 8006aa8:	00db      	lsls	r3, r3, #3
 8006aaa:	1a9b      	subs	r3, r3, r2
 8006aac:	009b      	lsls	r3, r3, #2
 8006aae:	440b      	add	r3, r1
 8006ab0:	333d      	adds	r3, #61	; 0x3d
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006ab6:	7bfa      	ldrb	r2, [r7, #15]
 8006ab8:	6879      	ldr	r1, [r7, #4]
 8006aba:	4613      	mov	r3, r2
 8006abc:	00db      	lsls	r3, r3, #3
 8006abe:	1a9b      	subs	r3, r3, r2
 8006ac0:	009b      	lsls	r3, r3, #2
 8006ac2:	440b      	add	r3, r1
 8006ac4:	333c      	adds	r3, #60	; 0x3c
 8006ac6:	7bfa      	ldrb	r2, [r7, #15]
 8006ac8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006aca:	7bfa      	ldrb	r2, [r7, #15]
 8006acc:	7bfb      	ldrb	r3, [r7, #15]
 8006ace:	b298      	uxth	r0, r3
 8006ad0:	6879      	ldr	r1, [r7, #4]
 8006ad2:	4613      	mov	r3, r2
 8006ad4:	00db      	lsls	r3, r3, #3
 8006ad6:	1a9b      	subs	r3, r3, r2
 8006ad8:	009b      	lsls	r3, r3, #2
 8006ada:	440b      	add	r3, r1
 8006adc:	3342      	adds	r3, #66	; 0x42
 8006ade:	4602      	mov	r2, r0
 8006ae0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006ae2:	7bfa      	ldrb	r2, [r7, #15]
 8006ae4:	6879      	ldr	r1, [r7, #4]
 8006ae6:	4613      	mov	r3, r2
 8006ae8:	00db      	lsls	r3, r3, #3
 8006aea:	1a9b      	subs	r3, r3, r2
 8006aec:	009b      	lsls	r3, r3, #2
 8006aee:	440b      	add	r3, r1
 8006af0:	333f      	adds	r3, #63	; 0x3f
 8006af2:	2200      	movs	r2, #0
 8006af4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006af6:	7bfa      	ldrb	r2, [r7, #15]
 8006af8:	6879      	ldr	r1, [r7, #4]
 8006afa:	4613      	mov	r3, r2
 8006afc:	00db      	lsls	r3, r3, #3
 8006afe:	1a9b      	subs	r3, r3, r2
 8006b00:	009b      	lsls	r3, r3, #2
 8006b02:	440b      	add	r3, r1
 8006b04:	3344      	adds	r3, #68	; 0x44
 8006b06:	2200      	movs	r2, #0
 8006b08:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006b0a:	7bfa      	ldrb	r2, [r7, #15]
 8006b0c:	6879      	ldr	r1, [r7, #4]
 8006b0e:	4613      	mov	r3, r2
 8006b10:	00db      	lsls	r3, r3, #3
 8006b12:	1a9b      	subs	r3, r3, r2
 8006b14:	009b      	lsls	r3, r3, #2
 8006b16:	440b      	add	r3, r1
 8006b18:	3348      	adds	r3, #72	; 0x48
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006b1e:	7bfa      	ldrb	r2, [r7, #15]
 8006b20:	6879      	ldr	r1, [r7, #4]
 8006b22:	4613      	mov	r3, r2
 8006b24:	00db      	lsls	r3, r3, #3
 8006b26:	1a9b      	subs	r3, r3, r2
 8006b28:	009b      	lsls	r3, r3, #2
 8006b2a:	440b      	add	r3, r1
 8006b2c:	3350      	adds	r3, #80	; 0x50
 8006b2e:	2200      	movs	r2, #0
 8006b30:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006b32:	7bfb      	ldrb	r3, [r7, #15]
 8006b34:	3301      	adds	r3, #1
 8006b36:	73fb      	strb	r3, [r7, #15]
 8006b38:	7bfa      	ldrb	r2, [r7, #15]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d3af      	bcc.n	8006aa2 <HAL_PCD_Init+0x8a>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006b42:	2300      	movs	r3, #0
 8006b44:	73fb      	strb	r3, [r7, #15]
 8006b46:	e044      	b.n	8006bd2 <HAL_PCD_Init+0x1ba>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006b48:	7bfa      	ldrb	r2, [r7, #15]
 8006b4a:	6879      	ldr	r1, [r7, #4]
 8006b4c:	4613      	mov	r3, r2
 8006b4e:	00db      	lsls	r3, r3, #3
 8006b50:	1a9b      	subs	r3, r3, r2
 8006b52:	009b      	lsls	r3, r3, #2
 8006b54:	440b      	add	r3, r1
 8006b56:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006b5e:	7bfa      	ldrb	r2, [r7, #15]
 8006b60:	6879      	ldr	r1, [r7, #4]
 8006b62:	4613      	mov	r3, r2
 8006b64:	00db      	lsls	r3, r3, #3
 8006b66:	1a9b      	subs	r3, r3, r2
 8006b68:	009b      	lsls	r3, r3, #2
 8006b6a:	440b      	add	r3, r1
 8006b6c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8006b70:	7bfa      	ldrb	r2, [r7, #15]
 8006b72:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006b74:	7bfa      	ldrb	r2, [r7, #15]
 8006b76:	6879      	ldr	r1, [r7, #4]
 8006b78:	4613      	mov	r3, r2
 8006b7a:	00db      	lsls	r3, r3, #3
 8006b7c:	1a9b      	subs	r3, r3, r2
 8006b7e:	009b      	lsls	r3, r3, #2
 8006b80:	440b      	add	r3, r1
 8006b82:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8006b86:	2200      	movs	r2, #0
 8006b88:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006b8a:	7bfa      	ldrb	r2, [r7, #15]
 8006b8c:	6879      	ldr	r1, [r7, #4]
 8006b8e:	4613      	mov	r3, r2
 8006b90:	00db      	lsls	r3, r3, #3
 8006b92:	1a9b      	subs	r3, r3, r2
 8006b94:	009b      	lsls	r3, r3, #2
 8006b96:	440b      	add	r3, r1
 8006b98:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006ba0:	7bfa      	ldrb	r2, [r7, #15]
 8006ba2:	6879      	ldr	r1, [r7, #4]
 8006ba4:	4613      	mov	r3, r2
 8006ba6:	00db      	lsls	r3, r3, #3
 8006ba8:	1a9b      	subs	r3, r3, r2
 8006baa:	009b      	lsls	r3, r3, #2
 8006bac:	440b      	add	r3, r1
 8006bae:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006bb6:	7bfa      	ldrb	r2, [r7, #15]
 8006bb8:	6879      	ldr	r1, [r7, #4]
 8006bba:	4613      	mov	r3, r2
 8006bbc:	00db      	lsls	r3, r3, #3
 8006bbe:	1a9b      	subs	r3, r3, r2
 8006bc0:	009b      	lsls	r3, r3, #2
 8006bc2:	440b      	add	r3, r1
 8006bc4:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006bc8:	2200      	movs	r2, #0
 8006bca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006bcc:	7bfb      	ldrb	r3, [r7, #15]
 8006bce:	3301      	adds	r3, #1
 8006bd0:	73fb      	strb	r3, [r7, #15]
 8006bd2:	7bfa      	ldrb	r2, [r7, #15]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	429a      	cmp	r2, r3
 8006bda:	d3b5      	bcc.n	8006b48 <HAL_PCD_Init+0x130>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	603b      	str	r3, [r7, #0]
 8006be2:	687e      	ldr	r6, [r7, #4]
 8006be4:	466d      	mov	r5, sp
 8006be6:	f106 0410 	add.w	r4, r6, #16
 8006bea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006bec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006bee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006bf0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006bf2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006bf6:	e885 0003 	stmia.w	r5, {r0, r1}
 8006bfa:	1d33      	adds	r3, r6, #4
 8006bfc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006bfe:	6838      	ldr	r0, [r7, #0]
 8006c00:	f005 f9ea 	bl	800bfd8 <USB_DevInit>
 8006c04:	4603      	mov	r3, r0
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d005      	beq.n	8006c16 <HAL_PCD_Init+0x1fe>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2202      	movs	r2, #2
 8006c0e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006c12:	2301      	movs	r3, #1
 8006c14:	e014      	b.n	8006c40 <HAL_PCD_Init+0x228>
  }

  hpcd->USB_Address = 0U;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2201      	movs	r2, #1
 8006c22:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c2a:	2b01      	cmp	r3, #1
 8006c2c:	d102      	bne.n	8006c34 <HAL_PCD_Init+0x21c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f000 fe4a 	bl	80078c8 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f005 fc2d 	bl	800c498 <USB_DevDisconnect>

  return HAL_OK;
 8006c3e:	2300      	movs	r3, #0
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	3714      	adds	r7, #20
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006c48 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006c48:	b590      	push	{r4, r7, lr}
 8006c4a:	b08d      	sub	sp, #52	; 0x34
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c56:	6a3b      	ldr	r3, [r7, #32]
 8006c58:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum = 0U;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4618      	mov	r0, r3
 8006c64:	f005 fcc3 	bl	800c5ee <USB_GetMode>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	f040 83bd 	bne.w	80073ea <HAL_PCD_IRQHandler+0x7a2>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4618      	mov	r0, r3
 8006c76:	f005 fc27 	bl	800c4c8 <USB_ReadInterrupts>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	f000 83b3 	beq.w	80073e8 <HAL_PCD_IRQHandler+0x7a0>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4618      	mov	r0, r3
 8006c88:	f005 fc1e 	bl	800c4c8 <USB_ReadInterrupts>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	f003 0302 	and.w	r3, r3, #2
 8006c92:	2b02      	cmp	r3, #2
 8006c94:	d107      	bne.n	8006ca6 <HAL_PCD_IRQHandler+0x5e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	695a      	ldr	r2, [r3, #20]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f002 0202 	and.w	r2, r2, #2
 8006ca4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4618      	mov	r0, r3
 8006cac:	f005 fc0c 	bl	800c4c8 <USB_ReadInterrupts>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006cb6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006cba:	d17b      	bne.n	8006db4 <HAL_PCD_IRQHandler+0x16c>
    {
      epnum = 0U;
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	f005 fc12 	bl	800c4ee <USB_ReadDevAllOutEpInterrupt>
 8006cca:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8006ccc:	e06f      	b.n	8006dae <HAL_PCD_IRQHandler+0x166>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cd0:	f003 0301 	and.w	r3, r3, #1
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d064      	beq.n	8006da2 <HAL_PCD_IRQHandler+0x15a>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cde:	b2d2      	uxtb	r2, r2
 8006ce0:	4611      	mov	r1, r2
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	f005 fc37 	bl	800c556 <USB_ReadDevOutEPInterrupt>
 8006ce8:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006cea:	69bb      	ldr	r3, [r7, #24]
 8006cec:	f003 0301 	and.w	r3, r3, #1
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d00c      	beq.n	8006d0e <HAL_PCD_IRQHandler+0xc6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf6:	015a      	lsls	r2, r3, #5
 8006cf8:	69fb      	ldr	r3, [r7, #28]
 8006cfa:	4413      	add	r3, r2
 8006cfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d00:	461a      	mov	r2, r3
 8006d02:	2301      	movs	r3, #1
 8006d04:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006d06:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f000 fc75 	bl	80075f8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006d0e:	69bb      	ldr	r3, [r7, #24]
 8006d10:	f003 0308 	and.w	r3, r3, #8
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d00c      	beq.n	8006d32 <HAL_PCD_IRQHandler+0xea>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006d18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f000 fd74 	bl	8007808 <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d22:	015a      	lsls	r2, r3, #5
 8006d24:	69fb      	ldr	r3, [r7, #28]
 8006d26:	4413      	add	r3, r2
 8006d28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d2c:	461a      	mov	r2, r3
 8006d2e:	2308      	movs	r3, #8
 8006d30:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006d32:	69bb      	ldr	r3, [r7, #24]
 8006d34:	f003 0310 	and.w	r3, r3, #16
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d008      	beq.n	8006d4e <HAL_PCD_IRQHandler+0x106>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d3e:	015a      	lsls	r2, r3, #5
 8006d40:	69fb      	ldr	r3, [r7, #28]
 8006d42:	4413      	add	r3, r2
 8006d44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d48:	461a      	mov	r2, r3
 8006d4a:	2310      	movs	r3, #16
 8006d4c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006d4e:	69bb      	ldr	r3, [r7, #24]
 8006d50:	f003 0320 	and.w	r3, r3, #32
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d015      	beq.n	8006d84 <HAL_PCD_IRQHandler+0x13c>
          {
            if (hpcd->Init.dma_enable == 1U)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	691b      	ldr	r3, [r3, #16]
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	d108      	bne.n	8006d72 <HAL_PCD_IRQHandler+0x12a>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6818      	ldr	r0, [r3, #0]
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006d6a:	461a      	mov	r2, r3
 8006d6c:	2101      	movs	r1, #1
 8006d6e:	f005 fc83 	bl	800c678 <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d74:	015a      	lsls	r2, r3, #5
 8006d76:	69fb      	ldr	r3, [r7, #28]
 8006d78:	4413      	add	r3, r2
 8006d7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d7e:	461a      	mov	r2, r3
 8006d80:	2320      	movs	r3, #32
 8006d82:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006d84:	69bb      	ldr	r3, [r7, #24]
 8006d86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d009      	beq.n	8006da2 <HAL_PCD_IRQHandler+0x15a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d90:	015a      	lsls	r2, r3, #5
 8006d92:	69fb      	ldr	r3, [r7, #28]
 8006d94:	4413      	add	r3, r2
 8006d96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d9a:	461a      	mov	r2, r3
 8006d9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006da0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8006da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da4:	3301      	adds	r3, #1
 8006da6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006daa:	085b      	lsrs	r3, r3, #1
 8006dac:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d18c      	bne.n	8006cce <HAL_PCD_IRQHandler+0x86>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4618      	mov	r0, r3
 8006dba:	f005 fb85 	bl	800c4c8 <USB_ReadInterrupts>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006dc4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006dc8:	f040 80c4 	bne.w	8006f54 <HAL_PCD_IRQHandler+0x30c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f005 fba6 	bl	800c522 <USB_ReadDevAllInEpInterrupt>
 8006dd6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8006dd8:	2300      	movs	r3, #0
 8006dda:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8006ddc:	e0b6      	b.n	8006f4c <HAL_PCD_IRQHandler+0x304>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8006dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006de0:	f003 0301 	and.w	r3, r3, #1
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	f000 80ab 	beq.w	8006f40 <HAL_PCD_IRQHandler+0x2f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006df0:	b2d2      	uxtb	r2, r2
 8006df2:	4611      	mov	r1, r2
 8006df4:	4618      	mov	r0, r3
 8006df6:	f005 fbcc 	bl	800c592 <USB_ReadDevInEPInterrupt>
 8006dfa:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006dfc:	69bb      	ldr	r3, [r7, #24]
 8006dfe:	f003 0301 	and.w	r3, r3, #1
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d05b      	beq.n	8006ebe <HAL_PCD_IRQHandler+0x276>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e08:	f003 030f 	and.w	r3, r3, #15
 8006e0c:	2201      	movs	r2, #1
 8006e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8006e12:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006e14:	69fb      	ldr	r3, [r7, #28]
 8006e16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	43db      	mvns	r3, r3
 8006e20:	69f9      	ldr	r1, [r7, #28]
 8006e22:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e26:	4013      	ands	r3, r2
 8006e28:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e2c:	015a      	lsls	r2, r3, #5
 8006e2e:	69fb      	ldr	r3, [r7, #28]
 8006e30:	4413      	add	r3, r2
 8006e32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e36:	461a      	mov	r2, r3
 8006e38:	2301      	movs	r3, #1
 8006e3a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	691b      	ldr	r3, [r3, #16]
 8006e40:	2b01      	cmp	r3, #1
 8006e42:	d11b      	bne.n	8006e7c <HAL_PCD_IRQHandler+0x234>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006e44:	6879      	ldr	r1, [r7, #4]
 8006e46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e48:	4613      	mov	r3, r2
 8006e4a:	00db      	lsls	r3, r3, #3
 8006e4c:	1a9b      	subs	r3, r3, r2
 8006e4e:	009b      	lsls	r3, r3, #2
 8006e50:	440b      	add	r3, r1
 8006e52:	3348      	adds	r3, #72	; 0x48
 8006e54:	6819      	ldr	r1, [r3, #0]
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e5a:	4613      	mov	r3, r2
 8006e5c:	00db      	lsls	r3, r3, #3
 8006e5e:	1a9b      	subs	r3, r3, r2
 8006e60:	009b      	lsls	r3, r3, #2
 8006e62:	4403      	add	r3, r0
 8006e64:	3344      	adds	r3, #68	; 0x44
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4419      	add	r1, r3
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e6e:	4613      	mov	r3, r2
 8006e70:	00db      	lsls	r3, r3, #3
 8006e72:	1a9b      	subs	r3, r3, r2
 8006e74:	009b      	lsls	r3, r3, #2
 8006e76:	4403      	add	r3, r0
 8006e78:	3348      	adds	r3, #72	; 0x48
 8006e7a:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e7e:	b2db      	uxtb	r3, r3
 8006e80:	4619      	mov	r1, r3
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f000 fac0 	bl	8007408 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	691b      	ldr	r3, [r3, #16]
 8006e8c:	2b01      	cmp	r3, #1
 8006e8e:	d116      	bne.n	8006ebe <HAL_PCD_IRQHandler+0x276>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d113      	bne.n	8006ebe <HAL_PCD_IRQHandler+0x276>
 8006e96:	6879      	ldr	r1, [r7, #4]
 8006e98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e9a:	4613      	mov	r3, r2
 8006e9c:	00db      	lsls	r3, r3, #3
 8006e9e:	1a9b      	subs	r3, r3, r2
 8006ea0:	009b      	lsls	r3, r3, #2
 8006ea2:	440b      	add	r3, r1
 8006ea4:	3350      	adds	r3, #80	; 0x50
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d108      	bne.n	8006ebe <HAL_PCD_IRQHandler+0x276>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6818      	ldr	r0, [r3, #0]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006eb6:	461a      	mov	r2, r3
 8006eb8:	2101      	movs	r1, #1
 8006eba:	f005 fbdd 	bl	800c678 <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006ebe:	69bb      	ldr	r3, [r7, #24]
 8006ec0:	f003 0308 	and.w	r3, r3, #8
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d008      	beq.n	8006eda <HAL_PCD_IRQHandler+0x292>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eca:	015a      	lsls	r2, r3, #5
 8006ecc:	69fb      	ldr	r3, [r7, #28]
 8006ece:	4413      	add	r3, r2
 8006ed0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ed4:	461a      	mov	r2, r3
 8006ed6:	2308      	movs	r3, #8
 8006ed8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006eda:	69bb      	ldr	r3, [r7, #24]
 8006edc:	f003 0310 	and.w	r3, r3, #16
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d008      	beq.n	8006ef6 <HAL_PCD_IRQHandler+0x2ae>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee6:	015a      	lsls	r2, r3, #5
 8006ee8:	69fb      	ldr	r3, [r7, #28]
 8006eea:	4413      	add	r3, r2
 8006eec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ef0:	461a      	mov	r2, r3
 8006ef2:	2310      	movs	r3, #16
 8006ef4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006ef6:	69bb      	ldr	r3, [r7, #24]
 8006ef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d008      	beq.n	8006f12 <HAL_PCD_IRQHandler+0x2ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f02:	015a      	lsls	r2, r3, #5
 8006f04:	69fb      	ldr	r3, [r7, #28]
 8006f06:	4413      	add	r3, r2
 8006f08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f0c:	461a      	mov	r2, r3
 8006f0e:	2340      	movs	r3, #64	; 0x40
 8006f10:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006f12:	69bb      	ldr	r3, [r7, #24]
 8006f14:	f003 0302 	and.w	r3, r3, #2
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d008      	beq.n	8006f2e <HAL_PCD_IRQHandler+0x2e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f1e:	015a      	lsls	r2, r3, #5
 8006f20:	69fb      	ldr	r3, [r7, #28]
 8006f22:	4413      	add	r3, r2
 8006f24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f28:	461a      	mov	r2, r3
 8006f2a:	2302      	movs	r3, #2
 8006f2c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006f2e:	69bb      	ldr	r3, [r7, #24]
 8006f30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d003      	beq.n	8006f40 <HAL_PCD_IRQHandler+0x2f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006f38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f000 face 	bl	80074dc <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f42:	3301      	adds	r3, #1
 8006f44:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f48:	085b      	lsrs	r3, r3, #1
 8006f4a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	f47f af45 	bne.w	8006dde <HAL_PCD_IRQHandler+0x196>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f005 fab5 	bl	800c4c8 <USB_ReadInterrupts>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f68:	d122      	bne.n	8006fb0 <HAL_PCD_IRQHandler+0x368>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006f6a:	69fb      	ldr	r3, [r7, #28]
 8006f6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	69fa      	ldr	r2, [r7, #28]
 8006f74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f78:	f023 0301 	bic.w	r3, r3, #1
 8006f7c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8006f84:	2b01      	cmp	r3, #1
 8006f86:	d108      	bne.n	8006f9a <HAL_PCD_IRQHandler+0x352>
      {
        hpcd->LPM_State = LPM_L0;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006f90:	2100      	movs	r1, #0
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f000 fcbc 	bl	8007910 <HAL_PCDEx_LPM_Callback>
 8006f98:	e002      	b.n	8006fa0 <HAL_PCD_IRQHandler+0x358>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f000 fa68 	bl	8007470 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	695a      	ldr	r2, [r3, #20]
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8006fae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	f005 fa87 	bl	800c4c8 <USB_ReadInterrupts>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006fc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fc4:	d112      	bne.n	8006fec <HAL_PCD_IRQHandler+0x3a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006fc6:	69fb      	ldr	r3, [r7, #28]
 8006fc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fcc:	689b      	ldr	r3, [r3, #8]
 8006fce:	f003 0301 	and.w	r3, r3, #1
 8006fd2:	2b01      	cmp	r3, #1
 8006fd4:	d102      	bne.n	8006fdc <HAL_PCD_IRQHandler+0x394>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f000 fa40 	bl	800745c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	695a      	ldr	r2, [r3, #20]
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8006fea:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	f005 fa69 	bl	800c4c8 <USB_ReadInterrupts>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ffc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007000:	d121      	bne.n	8007046 <HAL_PCD_IRQHandler+0x3fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	695a      	ldr	r2, [r3, #20]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8007010:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8007018:	2b00      	cmp	r3, #0
 800701a:	d111      	bne.n	8007040 <HAL_PCD_IRQHandler+0x3f8>
      {
        hpcd->LPM_State = LPM_L1;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2201      	movs	r2, #1
 8007020:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800702a:	089b      	lsrs	r3, r3, #2
 800702c:	f003 020f 	and.w	r2, r3, #15
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8007036:	2101      	movs	r1, #1
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f000 fc69 	bl	8007910 <HAL_PCDEx_LPM_Callback>
 800703e:	e002      	b.n	8007046 <HAL_PCD_IRQHandler+0x3fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f000 fa0b 	bl	800745c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4618      	mov	r0, r3
 800704c:	f005 fa3c 	bl	800c4c8 <USB_ReadInterrupts>
 8007050:	4603      	mov	r3, r0
 8007052:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007056:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800705a:	f040 80a7 	bne.w	80071ac <HAL_PCD_IRQHandler+0x564>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800705e:	69fb      	ldr	r3, [r7, #28]
 8007060:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007064:	685b      	ldr	r3, [r3, #4]
 8007066:	69fa      	ldr	r2, [r7, #28]
 8007068:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800706c:	f023 0301 	bic.w	r3, r3, #1
 8007070:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	2110      	movs	r1, #16
 8007078:	4618      	mov	r0, r3
 800707a:	f005 f929 	bl	800c2d0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800707e:	2300      	movs	r3, #0
 8007080:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007082:	e036      	b.n	80070f2 <HAL_PCD_IRQHandler+0x4aa>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8007084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007086:	015a      	lsls	r2, r3, #5
 8007088:	69fb      	ldr	r3, [r7, #28]
 800708a:	4413      	add	r3, r2
 800708c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007090:	461a      	mov	r2, r3
 8007092:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007096:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800709a:	015a      	lsls	r2, r3, #5
 800709c:	69fb      	ldr	r3, [r7, #28]
 800709e:	4413      	add	r3, r2
 80070a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070a8:	0151      	lsls	r1, r2, #5
 80070aa:	69fa      	ldr	r2, [r7, #28]
 80070ac:	440a      	add	r2, r1
 80070ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070b2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80070b6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80070b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ba:	015a      	lsls	r2, r3, #5
 80070bc:	69fb      	ldr	r3, [r7, #28]
 80070be:	4413      	add	r3, r2
 80070c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070c4:	461a      	mov	r2, r3
 80070c6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80070ca:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80070cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ce:	015a      	lsls	r2, r3, #5
 80070d0:	69fb      	ldr	r3, [r7, #28]
 80070d2:	4413      	add	r3, r2
 80070d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070dc:	0151      	lsls	r1, r2, #5
 80070de:	69fa      	ldr	r2, [r7, #28]
 80070e0:	440a      	add	r2, r1
 80070e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80070ea:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80070ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ee:	3301      	adds	r3, #1
 80070f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070f8:	429a      	cmp	r2, r3
 80070fa:	d3c3      	bcc.n	8007084 <HAL_PCD_IRQHandler+0x43c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80070fc:	69fb      	ldr	r3, [r7, #28]
 80070fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007102:	69db      	ldr	r3, [r3, #28]
 8007104:	69fa      	ldr	r2, [r7, #28]
 8007106:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800710a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800710e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007114:	2b00      	cmp	r3, #0
 8007116:	d016      	beq.n	8007146 <HAL_PCD_IRQHandler+0x4fe>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007118:	69fb      	ldr	r3, [r7, #28]
 800711a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800711e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007122:	69fa      	ldr	r2, [r7, #28]
 8007124:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007128:	f043 030b 	orr.w	r3, r3, #11
 800712c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007130:	69fb      	ldr	r3, [r7, #28]
 8007132:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007138:	69fa      	ldr	r2, [r7, #28]
 800713a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800713e:	f043 030b 	orr.w	r3, r3, #11
 8007142:	6453      	str	r3, [r2, #68]	; 0x44
 8007144:	e015      	b.n	8007172 <HAL_PCD_IRQHandler+0x52a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8007146:	69fb      	ldr	r3, [r7, #28]
 8007148:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800714c:	695a      	ldr	r2, [r3, #20]
 800714e:	69fb      	ldr	r3, [r7, #28]
 8007150:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007154:	4619      	mov	r1, r3
 8007156:	f242 032b 	movw	r3, #8235	; 0x202b
 800715a:	4313      	orrs	r3, r2
 800715c:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800715e:	69fb      	ldr	r3, [r7, #28]
 8007160:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007164:	691b      	ldr	r3, [r3, #16]
 8007166:	69fa      	ldr	r2, [r7, #28]
 8007168:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800716c:	f043 030b 	orr.w	r3, r3, #11
 8007170:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007172:	69fb      	ldr	r3, [r7, #28]
 8007174:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	69fa      	ldr	r2, [r7, #28]
 800717c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007180:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007184:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6818      	ldr	r0, [r3, #0]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	691b      	ldr	r3, [r3, #16]
 800718e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007196:	461a      	mov	r2, r3
 8007198:	f005 fa6e 	bl	800c678 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	695a      	ldr	r2, [r3, #20]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80071aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4618      	mov	r0, r3
 80071b2:	f005 f989 	bl	800c4c8 <USB_ReadInterrupts>
 80071b6:	4603      	mov	r3, r0
 80071b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80071bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071c0:	d12a      	bne.n	8007218 <HAL_PCD_IRQHandler+0x5d0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4618      	mov	r0, r3
 80071c8:	f005 fa20 	bl	800c60c <USB_ActivateSetup>

      if (USB_GetDevSpeed(hpcd->Instance) == USB_OTG_SPEED_HIGH)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4618      	mov	r0, r3
 80071d2:	f005 f8de 	bl	800c392 <USB_GetDevSpeed>
 80071d6:	4603      	mov	r3, r0
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d103      	bne.n	80071e4 <HAL_PCD_IRQHandler+0x59c>
      {
        hpcd->Init.speed = USB_OTG_SPEED_HIGH;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2200      	movs	r2, #0
 80071e0:	60da      	str	r2, [r3, #12]
 80071e2:	e002      	b.n	80071ea <HAL_PCD_IRQHandler+0x5a2>
      }
      else
      {
        hpcd->Init.speed = USB_OTG_SPEED_FULL;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2203      	movs	r2, #3
 80071e8:	60da      	str	r2, [r3, #12]
      }

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681c      	ldr	r4, [r3, #0]
 80071ee:	f001 f93b 	bl	8008468 <HAL_RCC_GetHCLKFreq>
 80071f2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80071f8:	b2db      	uxtb	r3, r3
 80071fa:	461a      	mov	r2, r3
 80071fc:	4620      	mov	r0, r4
 80071fe:	f004 fe0d 	bl	800be1c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f000 f920 	bl	8007448 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	695a      	ldr	r2, [r3, #20]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8007216:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4618      	mov	r0, r3
 800721e:	f005 f953 	bl	800c4c8 <USB_ReadInterrupts>
 8007222:	4603      	mov	r3, r0
 8007224:	f003 0310 	and.w	r3, r3, #16
 8007228:	2b10      	cmp	r3, #16
 800722a:	d161      	bne.n	80072f0 <HAL_PCD_IRQHandler+0x6a8>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	699a      	ldr	r2, [r3, #24]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f022 0210 	bic.w	r2, r2, #16
 800723a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800723c:	6a3b      	ldr	r3, [r7, #32]
 800723e:	6a1b      	ldr	r3, [r3, #32]
 8007240:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8007242:	693b      	ldr	r3, [r7, #16]
 8007244:	f003 020f 	and.w	r2, r3, #15
 8007248:	4613      	mov	r3, r2
 800724a:	00db      	lsls	r3, r3, #3
 800724c:	1a9b      	subs	r3, r3, r2
 800724e:	009b      	lsls	r3, r3, #2
 8007250:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007254:	687a      	ldr	r2, [r7, #4]
 8007256:	4413      	add	r3, r2
 8007258:	3304      	adds	r3, #4
 800725a:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	0c5b      	lsrs	r3, r3, #17
 8007260:	f003 030f 	and.w	r3, r3, #15
 8007264:	2b02      	cmp	r3, #2
 8007266:	d124      	bne.n	80072b2 <HAL_PCD_IRQHandler+0x66a>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8007268:	693a      	ldr	r2, [r7, #16]
 800726a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800726e:	4013      	ands	r3, r2
 8007270:	2b00      	cmp	r3, #0
 8007272:	d035      	beq.n	80072e0 <HAL_PCD_IRQHandler+0x698>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	091b      	lsrs	r3, r3, #4
 800727c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800727e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007282:	b29b      	uxth	r3, r3
 8007284:	461a      	mov	r2, r3
 8007286:	6a38      	ldr	r0, [r7, #32]
 8007288:	f005 f8dd 	bl	800c446 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	68da      	ldr	r2, [r3, #12]
 8007290:	693b      	ldr	r3, [r7, #16]
 8007292:	091b      	lsrs	r3, r3, #4
 8007294:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007298:	441a      	add	r2, r3
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	699a      	ldr	r2, [r3, #24]
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	091b      	lsrs	r3, r3, #4
 80072a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80072aa:	441a      	add	r2, r3
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	619a      	str	r2, [r3, #24]
 80072b0:	e016      	b.n	80072e0 <HAL_PCD_IRQHandler+0x698>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	0c5b      	lsrs	r3, r3, #17
 80072b6:	f003 030f 	and.w	r3, r3, #15
 80072ba:	2b06      	cmp	r3, #6
 80072bc:	d110      	bne.n	80072e0 <HAL_PCD_IRQHandler+0x698>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80072c4:	2208      	movs	r2, #8
 80072c6:	4619      	mov	r1, r3
 80072c8:	6a38      	ldr	r0, [r7, #32]
 80072ca:	f005 f8bc 	bl	800c446 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	699a      	ldr	r2, [r3, #24]
 80072d2:	693b      	ldr	r3, [r7, #16]
 80072d4:	091b      	lsrs	r3, r3, #4
 80072d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80072da:	441a      	add	r2, r3
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	699a      	ldr	r2, [r3, #24]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f042 0210 	orr.w	r2, r2, #16
 80072ee:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4618      	mov	r0, r3
 80072f6:	f005 f8e7 	bl	800c4c8 <USB_ReadInterrupts>
 80072fa:	4603      	mov	r3, r0
 80072fc:	f003 0308 	and.w	r3, r3, #8
 8007300:	2b08      	cmp	r3, #8
 8007302:	d10a      	bne.n	800731a <HAL_PCD_IRQHandler+0x6d2>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f000 f895 	bl	8007434 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	695a      	ldr	r2, [r3, #20]
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f002 0208 	and.w	r2, r2, #8
 8007318:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4618      	mov	r0, r3
 8007320:	f005 f8d2 	bl	800c4c8 <USB_ReadInterrupts>
 8007324:	4603      	mov	r3, r0
 8007326:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800732a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800732e:	d10d      	bne.n	800734c <HAL_PCD_IRQHandler+0x704>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007332:	b2db      	uxtb	r3, r3
 8007334:	4619      	mov	r1, r3
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f000 f8b0 	bl	800749c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	695a      	ldr	r2, [r3, #20]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800734a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4618      	mov	r0, r3
 8007352:	f005 f8b9 	bl	800c4c8 <USB_ReadInterrupts>
 8007356:	4603      	mov	r3, r0
 8007358:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800735c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007360:	d10d      	bne.n	800737e <HAL_PCD_IRQHandler+0x736>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007364:	b2db      	uxtb	r3, r3
 8007366:	4619      	mov	r1, r3
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f000 f88b 	bl	8007484 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	695a      	ldr	r2, [r3, #20]
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800737c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4618      	mov	r0, r3
 8007384:	f005 f8a0 	bl	800c4c8 <USB_ReadInterrupts>
 8007388:	4603      	mov	r3, r0
 800738a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800738e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007392:	d10a      	bne.n	80073aa <HAL_PCD_IRQHandler+0x762>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f000 f88d 	bl	80074b4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	695a      	ldr	r2, [r3, #20]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80073a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	4618      	mov	r0, r3
 80073b0:	f005 f88a 	bl	800c4c8 <USB_ReadInterrupts>
 80073b4:	4603      	mov	r3, r0
 80073b6:	f003 0304 	and.w	r3, r3, #4
 80073ba:	2b04      	cmp	r3, #4
 80073bc:	d115      	bne.n	80073ea <HAL_PCD_IRQHandler+0x7a2>
    {
      temp = hpcd->Instance->GOTGINT;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	685b      	ldr	r3, [r3, #4]
 80073c4:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	f003 0304 	and.w	r3, r3, #4
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d002      	beq.n	80073d6 <HAL_PCD_IRQHandler+0x78e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f000 f879 	bl	80074c8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	6859      	ldr	r1, [r3, #4]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	693a      	ldr	r2, [r7, #16]
 80073e2:	430a      	orrs	r2, r1
 80073e4:	605a      	str	r2, [r3, #4]
 80073e6:	e000      	b.n	80073ea <HAL_PCD_IRQHandler+0x7a2>
      return;
 80073e8:	bf00      	nop
    }
  }
}
 80073ea:	3734      	adds	r7, #52	; 0x34
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd90      	pop	{r4, r7, pc}

080073f0 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b083      	sub	sp, #12
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
 80073f8:	460b      	mov	r3, r1
 80073fa:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 80073fc:	bf00      	nop
 80073fe:	370c      	adds	r7, #12
 8007400:	46bd      	mov	sp, r7
 8007402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007406:	4770      	bx	lr

08007408 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8007408:	b480      	push	{r7}
 800740a:	b083      	sub	sp, #12
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
 8007410:	460b      	mov	r3, r1
 8007412:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 8007414:	bf00      	nop
 8007416:	370c      	adds	r7, #12
 8007418:	46bd      	mov	sp, r7
 800741a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741e:	4770      	bx	lr

08007420 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8007420:	b480      	push	{r7}
 8007422:	b083      	sub	sp, #12
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 8007428:	bf00      	nop
 800742a:	370c      	adds	r7, #12
 800742c:	46bd      	mov	sp, r7
 800742e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007432:	4770      	bx	lr

08007434 <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8007434:	b480      	push	{r7}
 8007436:	b083      	sub	sp, #12
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 800743c:	bf00      	nop
 800743e:	370c      	adds	r7, #12
 8007440:	46bd      	mov	sp, r7
 8007442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007446:	4770      	bx	lr

08007448 <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 8007448:	b480      	push	{r7}
 800744a:	b083      	sub	sp, #12
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 8007450:	bf00      	nop
 8007452:	370c      	adds	r7, #12
 8007454:	46bd      	mov	sp, r7
 8007456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745a:	4770      	bx	lr

0800745c <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 800745c:	b480      	push	{r7}
 800745e:	b083      	sub	sp, #12
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 8007464:	bf00      	nop
 8007466:	370c      	adds	r7, #12
 8007468:	46bd      	mov	sp, r7
 800746a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746e:	4770      	bx	lr

08007470 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8007470:	b480      	push	{r7}
 8007472:	b083      	sub	sp, #12
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 8007478:	bf00      	nop
 800747a:	370c      	adds	r7, #12
 800747c:	46bd      	mov	sp, r7
 800747e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007482:	4770      	bx	lr

08007484 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8007484:	b480      	push	{r7}
 8007486:	b083      	sub	sp, #12
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
 800748c:	460b      	mov	r3, r1
 800748e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOOUTIncompleteCallback could be implemented in the user file
   */
}
 8007490:	bf00      	nop
 8007492:	370c      	adds	r7, #12
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr

0800749c <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800749c:	b480      	push	{r7}
 800749e:	b083      	sub	sp, #12
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
 80074a4:	460b      	mov	r3, r1
 80074a6:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOINIncompleteCallback could be implemented in the user file
   */
}
 80074a8:	bf00      	nop
 80074aa:	370c      	adds	r7, #12
 80074ac:	46bd      	mov	sp, r7
 80074ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b2:	4770      	bx	lr

080074b4 <HAL_PCD_ConnectCallback>:
  * @brief  Connection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 80074b4:	b480      	push	{r7}
 80074b6:	b083      	sub	sp, #12
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ConnectCallback could be implemented in the user file
   */
}
 80074bc:	bf00      	nop
 80074be:	370c      	adds	r7, #12
 80074c0:	46bd      	mov	sp, r7
 80074c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c6:	4770      	bx	lr

080074c8 <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 80074c8:	b480      	push	{r7}
 80074ca:	b083      	sub	sp, #12
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DisconnectCallback could be implemented in the user file
   */
}
 80074d0:	bf00      	nop
 80074d2:	370c      	adds	r7, #12
 80074d4:	46bd      	mov	sp, r7
 80074d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074da:	4770      	bx	lr

080074dc <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b08a      	sub	sp, #40	; 0x28
 80074e0:	af02      	add	r7, sp, #8
 80074e2:	6078      	str	r0, [r7, #4]
 80074e4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80074f0:	683a      	ldr	r2, [r7, #0]
 80074f2:	4613      	mov	r3, r2
 80074f4:	00db      	lsls	r3, r3, #3
 80074f6:	1a9b      	subs	r3, r3, r2
 80074f8:	009b      	lsls	r3, r3, #2
 80074fa:	3338      	adds	r3, #56	; 0x38
 80074fc:	687a      	ldr	r2, [r7, #4]
 80074fe:	4413      	add	r3, r2
 8007500:	3304      	adds	r3, #4
 8007502:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	699a      	ldr	r2, [r3, #24]
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	695b      	ldr	r3, [r3, #20]
 800750c:	429a      	cmp	r2, r3
 800750e:	d901      	bls.n	8007514 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8007510:	2301      	movs	r3, #1
 8007512:	e06c      	b.n	80075ee <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	695a      	ldr	r2, [r3, #20]
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	699b      	ldr	r3, [r3, #24]
 800751c:	1ad3      	subs	r3, r2, r3
 800751e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	689b      	ldr	r3, [r3, #8]
 8007524:	69fa      	ldr	r2, [r7, #28]
 8007526:	429a      	cmp	r2, r3
 8007528:	d902      	bls.n	8007530 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	689b      	ldr	r3, [r3, #8]
 800752e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8007530:	69fb      	ldr	r3, [r7, #28]
 8007532:	3303      	adds	r3, #3
 8007534:	089b      	lsrs	r3, r3, #2
 8007536:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007538:	e02b      	b.n	8007592 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	695a      	ldr	r2, [r3, #20]
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	699b      	ldr	r3, [r3, #24]
 8007542:	1ad3      	subs	r3, r2, r3
 8007544:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	689b      	ldr	r3, [r3, #8]
 800754a:	69fa      	ldr	r2, [r7, #28]
 800754c:	429a      	cmp	r2, r3
 800754e:	d902      	bls.n	8007556 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	689b      	ldr	r3, [r3, #8]
 8007554:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007556:	69fb      	ldr	r3, [r7, #28]
 8007558:	3303      	adds	r3, #3
 800755a:	089b      	lsrs	r3, r3, #2
 800755c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	68d9      	ldr	r1, [r3, #12]
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	b2da      	uxtb	r2, r3
 8007566:	69fb      	ldr	r3, [r7, #28]
 8007568:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800756e:	b2db      	uxtb	r3, r3
 8007570:	9300      	str	r3, [sp, #0]
 8007572:	4603      	mov	r3, r0
 8007574:	6978      	ldr	r0, [r7, #20]
 8007576:	f004 ff31 	bl	800c3dc <USB_WritePacket>

    ep->xfer_buff  += len;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	68da      	ldr	r2, [r3, #12]
 800757e:	69fb      	ldr	r3, [r7, #28]
 8007580:	441a      	add	r2, r3
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	699a      	ldr	r2, [r3, #24]
 800758a:	69fb      	ldr	r3, [r7, #28]
 800758c:	441a      	add	r2, r3
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	015a      	lsls	r2, r3, #5
 8007596:	693b      	ldr	r3, [r7, #16]
 8007598:	4413      	add	r3, r2
 800759a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800759e:	699b      	ldr	r3, [r3, #24]
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	69ba      	ldr	r2, [r7, #24]
 80075a4:	429a      	cmp	r2, r3
 80075a6:	d809      	bhi.n	80075bc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	699a      	ldr	r2, [r3, #24]
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80075b0:	429a      	cmp	r2, r3
 80075b2:	d203      	bcs.n	80075bc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	695b      	ldr	r3, [r3, #20]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d1be      	bne.n	800753a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	695a      	ldr	r2, [r3, #20]
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	699b      	ldr	r3, [r3, #24]
 80075c4:	429a      	cmp	r2, r3
 80075c6:	d811      	bhi.n	80075ec <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	f003 030f 	and.w	r3, r3, #15
 80075ce:	2201      	movs	r2, #1
 80075d0:	fa02 f303 	lsl.w	r3, r2, r3
 80075d4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80075d6:	693b      	ldr	r3, [r7, #16]
 80075d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	43db      	mvns	r3, r3
 80075e2:	6939      	ldr	r1, [r7, #16]
 80075e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80075e8:	4013      	ands	r3, r2
 80075ea:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80075ec:	2300      	movs	r3, #0
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3720      	adds	r7, #32
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}
	...

080075f8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b086      	sub	sp, #24
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
 8007600:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800760c:	697b      	ldr	r3, [r7, #20]
 800760e:	333c      	adds	r3, #60	; 0x3c
 8007610:	3304      	adds	r3, #4
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	015a      	lsls	r2, r3, #5
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	4413      	add	r3, r2
 800761e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007622:	689b      	ldr	r3, [r3, #8]
 8007624:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	691b      	ldr	r3, [r3, #16]
 800762a:	2b01      	cmp	r3, #1
 800762c:	f040 80b3 	bne.w	8007796 <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	f003 0308 	and.w	r3, r3, #8
 8007636:	2b00      	cmp	r3, #0
 8007638:	d028      	beq.n	800768c <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	4a70      	ldr	r2, [pc, #448]	; (8007800 <PCD_EP_OutXfrComplete_int+0x208>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d90e      	bls.n	8007660 <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007648:	2b00      	cmp	r3, #0
 800764a:	d009      	beq.n	8007660 <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	015a      	lsls	r2, r3, #5
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	4413      	add	r3, r2
 8007654:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007658:	461a      	mov	r2, r3
 800765a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800765e:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f7ff fedd 	bl	8007420 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6818      	ldr	r0, [r3, #0]
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007670:	461a      	mov	r2, r3
 8007672:	2101      	movs	r1, #1
 8007674:	f005 f800 	bl	800c678 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	015a      	lsls	r2, r3, #5
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	4413      	add	r3, r2
 8007680:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007684:	461a      	mov	r2, r3
 8007686:	2308      	movs	r3, #8
 8007688:	6093      	str	r3, [r2, #8]
 800768a:	e0b3      	b.n	80077f4 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	f003 0320 	and.w	r3, r3, #32
 8007692:	2b00      	cmp	r3, #0
 8007694:	d009      	beq.n	80076aa <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	015a      	lsls	r2, r3, #5
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	4413      	add	r3, r2
 800769e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076a2:	461a      	mov	r2, r3
 80076a4:	2320      	movs	r3, #32
 80076a6:	6093      	str	r3, [r2, #8]
 80076a8:	e0a4      	b.n	80077f4 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	f040 809f 	bne.w	80077f4 <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	4a51      	ldr	r2, [pc, #324]	; (8007800 <PCD_EP_OutXfrComplete_int+0x208>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d90f      	bls.n	80076de <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d00a      	beq.n	80076de <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	015a      	lsls	r2, r3, #5
 80076cc:	693b      	ldr	r3, [r7, #16]
 80076ce:	4413      	add	r3, r2
 80076d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076d4:	461a      	mov	r2, r3
 80076d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076da:	6093      	str	r3, [r2, #8]
 80076dc:	e08a      	b.n	80077f4 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80076de:	6879      	ldr	r1, [r7, #4]
 80076e0:	683a      	ldr	r2, [r7, #0]
 80076e2:	4613      	mov	r3, r2
 80076e4:	00db      	lsls	r3, r3, #3
 80076e6:	1a9b      	subs	r3, r3, r2
 80076e8:	009b      	lsls	r3, r3, #2
 80076ea:	440b      	add	r3, r1
 80076ec:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80076f0:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	0159      	lsls	r1, r3, #5
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	440b      	add	r3, r1
 80076fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076fe:	691b      	ldr	r3, [r3, #16]
 8007700:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8007704:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	683a      	ldr	r2, [r7, #0]
 800770a:	4613      	mov	r3, r2
 800770c:	00db      	lsls	r3, r3, #3
 800770e:	1a9b      	subs	r3, r3, r2
 8007710:	009b      	lsls	r3, r3, #2
 8007712:	4403      	add	r3, r0
 8007714:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8007718:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800771a:	6879      	ldr	r1, [r7, #4]
 800771c:	683a      	ldr	r2, [r7, #0]
 800771e:	4613      	mov	r3, r2
 8007720:	00db      	lsls	r3, r3, #3
 8007722:	1a9b      	subs	r3, r3, r2
 8007724:	009b      	lsls	r3, r3, #2
 8007726:	440b      	add	r3, r1
 8007728:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800772c:	6819      	ldr	r1, [r3, #0]
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	683a      	ldr	r2, [r7, #0]
 8007732:	4613      	mov	r3, r2
 8007734:	00db      	lsls	r3, r3, #3
 8007736:	1a9b      	subs	r3, r3, r2
 8007738:	009b      	lsls	r3, r3, #2
 800773a:	4403      	add	r3, r0
 800773c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	4419      	add	r1, r3
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	683a      	ldr	r2, [r7, #0]
 8007748:	4613      	mov	r3, r2
 800774a:	00db      	lsls	r3, r3, #3
 800774c:	1a9b      	subs	r3, r3, r2
 800774e:	009b      	lsls	r3, r3, #2
 8007750:	4403      	add	r3, r0
 8007752:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007756:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	b2db      	uxtb	r3, r3
 800775c:	4619      	mov	r1, r3
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f7ff fe46 	bl	80073f0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d144      	bne.n	80077f4 <PCD_EP_OutXfrComplete_int+0x1fc>
 800776a:	6879      	ldr	r1, [r7, #4]
 800776c:	683a      	ldr	r2, [r7, #0]
 800776e:	4613      	mov	r3, r2
 8007770:	00db      	lsls	r3, r3, #3
 8007772:	1a9b      	subs	r3, r3, r2
 8007774:	009b      	lsls	r3, r3, #2
 8007776:	440b      	add	r3, r1
 8007778:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d138      	bne.n	80077f4 <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6818      	ldr	r0, [r3, #0]
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800778c:	461a      	mov	r2, r3
 800778e:	2101      	movs	r1, #1
 8007790:	f004 ff72 	bl	800c678 <USB_EP0_OutStart>
 8007794:	e02e      	b.n	80077f4 <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	4a1a      	ldr	r2, [pc, #104]	; (8007804 <PCD_EP_OutXfrComplete_int+0x20c>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d124      	bne.n	80077e8 <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d00a      	beq.n	80077be <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	015a      	lsls	r2, r3, #5
 80077ac:	693b      	ldr	r3, [r7, #16]
 80077ae:	4413      	add	r3, r2
 80077b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077b4:	461a      	mov	r2, r3
 80077b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077ba:	6093      	str	r3, [r2, #8]
 80077bc:	e01a      	b.n	80077f4 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	f003 0320 	and.w	r3, r3, #32
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d008      	beq.n	80077da <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	015a      	lsls	r2, r3, #5
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	4413      	add	r3, r2
 80077d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077d4:	461a      	mov	r2, r3
 80077d6:	2320      	movs	r3, #32
 80077d8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	b2db      	uxtb	r3, r3
 80077de:	4619      	mov	r1, r3
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f7ff fe05 	bl	80073f0 <HAL_PCD_DataOutStageCallback>
 80077e6:	e005      	b.n	80077f4 <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	b2db      	uxtb	r3, r3
 80077ec:	4619      	mov	r1, r3
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f7ff fdfe 	bl	80073f0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80077f4:	2300      	movs	r3, #0
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	3718      	adds	r7, #24
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}
 80077fe:	bf00      	nop
 8007800:	4f54300a 	.word	0x4f54300a
 8007804:	4f54310a 	.word	0x4f54310a

08007808 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b086      	sub	sp, #24
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
 8007810:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800781c:	697b      	ldr	r3, [r7, #20]
 800781e:	333c      	adds	r3, #60	; 0x3c
 8007820:	3304      	adds	r3, #4
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	015a      	lsls	r2, r3, #5
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	4413      	add	r3, r2
 800782e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007832:	689b      	ldr	r3, [r3, #8]
 8007834:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	691b      	ldr	r3, [r3, #16]
 800783a:	2b01      	cmp	r3, #1
 800783c:	d113      	bne.n	8007866 <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	4a1f      	ldr	r2, [pc, #124]	; (80078c0 <PCD_EP_OutSetupPacket_int+0xb8>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d922      	bls.n	800788c <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800784c:	2b00      	cmp	r3, #0
 800784e:	d01d      	beq.n	800788c <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	015a      	lsls	r2, r3, #5
 8007854:	693b      	ldr	r3, [r7, #16]
 8007856:	4413      	add	r3, r2
 8007858:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800785c:	461a      	mov	r2, r3
 800785e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007862:	6093      	str	r3, [r2, #8]
 8007864:	e012      	b.n	800788c <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	4a16      	ldr	r2, [pc, #88]	; (80078c4 <PCD_EP_OutSetupPacket_int+0xbc>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d10e      	bne.n	800788c <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8007874:	2b00      	cmp	r3, #0
 8007876:	d009      	beq.n	800788c <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	015a      	lsls	r2, r3, #5
 800787c:	693b      	ldr	r3, [r7, #16]
 800787e:	4413      	add	r3, r2
 8007880:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007884:	461a      	mov	r2, r3
 8007886:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800788a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f7ff fdc7 	bl	8007420 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	4a0a      	ldr	r2, [pc, #40]	; (80078c0 <PCD_EP_OutSetupPacket_int+0xb8>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d90c      	bls.n	80078b4 <PCD_EP_OutSetupPacket_int+0xac>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	691b      	ldr	r3, [r3, #16]
 800789e:	2b01      	cmp	r3, #1
 80078a0:	d108      	bne.n	80078b4 <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6818      	ldr	r0, [r3, #0]
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80078ac:	461a      	mov	r2, r3
 80078ae:	2101      	movs	r1, #1
 80078b0:	f004 fee2 	bl	800c678 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80078b4:	2300      	movs	r3, #0
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	3718      	adds	r7, #24
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}
 80078be:	bf00      	nop
 80078c0:	4f54300a 	.word	0x4f54300a
 80078c4:	4f54310a 	.word	0x4f54310a

080078c8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80078c8:	b480      	push	{r7}
 80078ca:	b085      	sub	sp, #20
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2201      	movs	r2, #1
 80078da:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2200      	movs	r2, #0
 80078e2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	699b      	ldr	r3, [r3, #24]
 80078ea:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80078f6:	4b05      	ldr	r3, [pc, #20]	; (800790c <HAL_PCDEx_ActivateLPM+0x44>)
 80078f8:	4313      	orrs	r3, r2
 80078fa:	68fa      	ldr	r2, [r7, #12]
 80078fc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80078fe:	2300      	movs	r3, #0
}
 8007900:	4618      	mov	r0, r3
 8007902:	3714      	adds	r7, #20
 8007904:	46bd      	mov	sp, r7
 8007906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790a:	4770      	bx	lr
 800790c:	10000003 	.word	0x10000003

08007910 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007910:	b480      	push	{r7}
 8007912:	b083      	sub	sp, #12
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
 8007918:	460b      	mov	r3, r1
 800791a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800791c:	bf00      	nop
 800791e:	370c      	adds	r7, #12
 8007920:	46bd      	mov	sp, r7
 8007922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007926:	4770      	bx	lr

08007928 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007928:	b480      	push	{r7}
 800792a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800792c:	4b05      	ldr	r3, [pc, #20]	; (8007944 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4a04      	ldr	r2, [pc, #16]	; (8007944 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007932:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007936:	6013      	str	r3, [r2, #0]
}
 8007938:	bf00      	nop
 800793a:	46bd      	mov	sp, r7
 800793c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007940:	4770      	bx	lr
 8007942:	bf00      	nop
 8007944:	40007000 	.word	0x40007000

08007948 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b082      	sub	sp, #8
 800794c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800794e:	2300      	movs	r3, #0
 8007950:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8007952:	4b23      	ldr	r3, [pc, #140]	; (80079e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8007954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007956:	4a22      	ldr	r2, [pc, #136]	; (80079e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8007958:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800795c:	6413      	str	r3, [r2, #64]	; 0x40
 800795e:	4b20      	ldr	r3, [pc, #128]	; (80079e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8007960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007966:	603b      	str	r3, [r7, #0]
 8007968:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800796a:	4b1e      	ldr	r3, [pc, #120]	; (80079e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	4a1d      	ldr	r2, [pc, #116]	; (80079e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007970:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007974:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007976:	f7fb fb33 	bl	8002fe0 <HAL_GetTick>
 800797a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800797c:	e009      	b.n	8007992 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800797e:	f7fb fb2f 	bl	8002fe0 <HAL_GetTick>
 8007982:	4602      	mov	r2, r0
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	1ad3      	subs	r3, r2, r3
 8007988:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800798c:	d901      	bls.n	8007992 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800798e:	2303      	movs	r3, #3
 8007990:	e022      	b.n	80079d8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007992:	4b14      	ldr	r3, [pc, #80]	; (80079e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007994:	685b      	ldr	r3, [r3, #4]
 8007996:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800799a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800799e:	d1ee      	bne.n	800797e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80079a0:	4b10      	ldr	r3, [pc, #64]	; (80079e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4a0f      	ldr	r2, [pc, #60]	; (80079e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80079a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079aa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80079ac:	f7fb fb18 	bl	8002fe0 <HAL_GetTick>
 80079b0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80079b2:	e009      	b.n	80079c8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80079b4:	f7fb fb14 	bl	8002fe0 <HAL_GetTick>
 80079b8:	4602      	mov	r2, r0
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	1ad3      	subs	r3, r2, r3
 80079be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80079c2:	d901      	bls.n	80079c8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80079c4:	2303      	movs	r3, #3
 80079c6:	e007      	b.n	80079d8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80079c8:	4b06      	ldr	r3, [pc, #24]	; (80079e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80079ca:	685b      	ldr	r3, [r3, #4]
 80079cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80079d4:	d1ee      	bne.n	80079b4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80079d6:	2300      	movs	r3, #0
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3708      	adds	r7, #8
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}
 80079e0:	40023800 	.word	0x40023800
 80079e4:	40007000 	.word	0x40007000

080079e8 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and creates the associated handle.
  * @param hqspi qspi handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b086      	sub	sp, #24
 80079ec:	af02      	add	r7, sp, #8
 80079ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80079f0:	2301      	movs	r3, #1
 80079f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80079f4:	f7fb faf4 	bl	8002fe0 <HAL_GetTick>
 80079f8:	60b8      	str	r0, [r7, #8]
  
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d101      	bne.n	8007a04 <HAL_QSPI_Init+0x1c>
  {
    return HAL_ERROR;
 8007a00:	2301      	movs	r3, #1
 8007a02:	e073      	b.n	8007aec <HAL_QSPI_Init+0x104>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
  
  /* Process locked */
  __HAL_LOCK(hqspi);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007a0a:	b2db      	uxtb	r3, r3
 8007a0c:	2b01      	cmp	r3, #1
 8007a0e:	d101      	bne.n	8007a14 <HAL_QSPI_Init+0x2c>
 8007a10:	2302      	movs	r3, #2
 8007a12:	e06b      	b.n	8007aec <HAL_QSPI_Init+0x104>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2201      	movs	r2, #1
 8007a18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a22:	b2db      	uxtb	r3, r3
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d10b      	bne.n	8007a40 <HAL_QSPI_Init+0x58>
  { 
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f7fa fb9d 	bl	8002170 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 8007a36:	f241 3188 	movw	r1, #5000	; 0x1388
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f000 f85e 	bl	8007afc <HAL_QSPI_SetTimeout>
  }
  
  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, ((hqspi->Init.FifoThreshold - 1) << 8));
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	689b      	ldr	r3, [r3, #8]
 8007a4e:	3b01      	subs	r3, #1
 8007a50:	021a      	lsls	r2, r3, #8
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	430a      	orrs	r2, r1
 8007a58:	601a      	str	r2, [r3, #0]

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a5e:	9300      	str	r3, [sp, #0]
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	2200      	movs	r2, #0
 8007a64:	2120      	movs	r1, #32
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f000 f856 	bl	8007b18 <QSPI_WaitFlagStateUntilTimeout>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8007a70:	7bfb      	ldrb	r3, [r7, #15]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d135      	bne.n	8007ae2 <HAL_QSPI_Init+0xfa>
  {
                
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR,(QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM), ((hqspi->Init.ClockPrescaler << 24)| hqspi->Init.SampleShifting | hqspi->Init.FlashID| hqspi->Init.DualFlash ));
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	681a      	ldr	r2, [r3, #0]
 8007a7c:	4b1d      	ldr	r3, [pc, #116]	; (8007af4 <HAL_QSPI_Init+0x10c>)
 8007a7e:	4013      	ands	r3, r2
 8007a80:	687a      	ldr	r2, [r7, #4]
 8007a82:	6852      	ldr	r2, [r2, #4]
 8007a84:	0611      	lsls	r1, r2, #24
 8007a86:	687a      	ldr	r2, [r7, #4]
 8007a88:	68d2      	ldr	r2, [r2, #12]
 8007a8a:	4311      	orrs	r1, r2
 8007a8c:	687a      	ldr	r2, [r7, #4]
 8007a8e:	69d2      	ldr	r2, [r2, #28]
 8007a90:	4311      	orrs	r1, r2
 8007a92:	687a      	ldr	r2, [r7, #4]
 8007a94:	6a12      	ldr	r2, [r2, #32]
 8007a96:	4311      	orrs	r1, r2
 8007a98:	687a      	ldr	r2, [r7, #4]
 8007a9a:	6812      	ldr	r2, [r2, #0]
 8007a9c:	430b      	orrs	r3, r1
 8007a9e:	6013      	str	r3, [r2, #0]
        
    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE), 
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	685a      	ldr	r2, [r3, #4]
 8007aa6:	4b14      	ldr	r3, [pc, #80]	; (8007af8 <HAL_QSPI_Init+0x110>)
 8007aa8:	4013      	ands	r3, r2
 8007aaa:	687a      	ldr	r2, [r7, #4]
 8007aac:	6912      	ldr	r2, [r2, #16]
 8007aae:	0411      	lsls	r1, r2, #16
 8007ab0:	687a      	ldr	r2, [r7, #4]
 8007ab2:	6952      	ldr	r2, [r2, #20]
 8007ab4:	4311      	orrs	r1, r2
 8007ab6:	687a      	ldr	r2, [r7, #4]
 8007ab8:	6992      	ldr	r2, [r2, #24]
 8007aba:	4311      	orrs	r1, r2
 8007abc:	687a      	ldr	r2, [r7, #4]
 8007abe:	6812      	ldr	r2, [r2, #0]
 8007ac0:	430b      	orrs	r3, r1
 8007ac2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << 16) | hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));
    
    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	681a      	ldr	r2, [r3, #0]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f042 0201 	orr.w	r2, r2, #1
 8007ad2:	601a      	str	r2, [r3, #0]
  
    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;  
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2201      	movs	r2, #1
 8007ade:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8007aea:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	3710      	adds	r7, #16
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}
 8007af4:	00ffff2f 	.word	0x00ffff2f
 8007af8:	ffe0f8fe 	.word	0xffe0f8fe

08007afc <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b083      	sub	sp, #12
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
 8007b04:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	683a      	ldr	r2, [r7, #0]
 8007b0a:	649a      	str	r2, [r3, #72]	; 0x48
}
 8007b0c:	bf00      	nop
 8007b0e:	370c      	adds	r7, #12
 8007b10:	46bd      	mov	sp, r7
 8007b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b16:	4770      	bx	lr

08007b18 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the time out
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag, 
                                                        FlagStatus State, uint32_t tickstart, uint32_t Timeout)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b084      	sub	sp, #16
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	60f8      	str	r0, [r7, #12]
 8007b20:	60b9      	str	r1, [r7, #8]
 8007b22:	603b      	str	r3, [r7, #0]
 8007b24:	4613      	mov	r3, r2
 8007b26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */    
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8007b28:	e01a      	b.n	8007b60 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b2a:	69bb      	ldr	r3, [r7, #24]
 8007b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b30:	d016      	beq.n	8007b60 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 8007b32:	69bb      	ldr	r3, [r7, #24]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d007      	beq.n	8007b48 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8007b38:	f7fb fa52 	bl	8002fe0 <HAL_GetTick>
 8007b3c:	4602      	mov	r2, r0
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	1ad3      	subs	r3, r2, r3
 8007b42:	69ba      	ldr	r2, [r7, #24]
 8007b44:	429a      	cmp	r2, r3
 8007b46:	d20b      	bcs.n	8007b60 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	2204      	movs	r2, #4
 8007b4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b54:	f043 0201 	orr.w	r2, r3, #1
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	e00e      	b.n	8007b7e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	689a      	ldr	r2, [r3, #8]
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	4013      	ands	r3, r2
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	bf14      	ite	ne
 8007b6e:	2301      	movne	r3, #1
 8007b70:	2300      	moveq	r3, #0
 8007b72:	b2db      	uxtb	r3, r3
 8007b74:	461a      	mov	r2, r3
 8007b76:	79fb      	ldrb	r3, [r7, #7]
 8007b78:	429a      	cmp	r2, r3
 8007b7a:	d1d6      	bne.n	8007b2a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007b7c:	2300      	movs	r3, #0
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	3710      	adds	r7, #16
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}
	...

08007b88 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b086      	sub	sp, #24
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8007b90:	2300      	movs	r3, #0
 8007b92:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d101      	bne.n	8007b9e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	e25e      	b.n	800805c <HAL_RCC_OscConfig+0x4d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f003 0301 	and.w	r3, r3, #1
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	f000 8087 	beq.w	8007cba <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007bac:	4b96      	ldr	r3, [pc, #600]	; (8007e08 <HAL_RCC_OscConfig+0x280>)
 8007bae:	689b      	ldr	r3, [r3, #8]
 8007bb0:	f003 030c 	and.w	r3, r3, #12
 8007bb4:	2b04      	cmp	r3, #4
 8007bb6:	d00c      	beq.n	8007bd2 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007bb8:	4b93      	ldr	r3, [pc, #588]	; (8007e08 <HAL_RCC_OscConfig+0x280>)
 8007bba:	689b      	ldr	r3, [r3, #8]
 8007bbc:	f003 030c 	and.w	r3, r3, #12
 8007bc0:	2b08      	cmp	r3, #8
 8007bc2:	d112      	bne.n	8007bea <HAL_RCC_OscConfig+0x62>
 8007bc4:	4b90      	ldr	r3, [pc, #576]	; (8007e08 <HAL_RCC_OscConfig+0x280>)
 8007bc6:	685b      	ldr	r3, [r3, #4]
 8007bc8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007bcc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007bd0:	d10b      	bne.n	8007bea <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007bd2:	4b8d      	ldr	r3, [pc, #564]	; (8007e08 <HAL_RCC_OscConfig+0x280>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d06c      	beq.n	8007cb8 <HAL_RCC_OscConfig+0x130>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	685b      	ldr	r3, [r3, #4]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d168      	bne.n	8007cb8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007be6:	2301      	movs	r3, #1
 8007be8:	e238      	b.n	800805c <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	685b      	ldr	r3, [r3, #4]
 8007bee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bf2:	d106      	bne.n	8007c02 <HAL_RCC_OscConfig+0x7a>
 8007bf4:	4b84      	ldr	r3, [pc, #528]	; (8007e08 <HAL_RCC_OscConfig+0x280>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	4a83      	ldr	r2, [pc, #524]	; (8007e08 <HAL_RCC_OscConfig+0x280>)
 8007bfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007bfe:	6013      	str	r3, [r2, #0]
 8007c00:	e02e      	b.n	8007c60 <HAL_RCC_OscConfig+0xd8>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	685b      	ldr	r3, [r3, #4]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d10c      	bne.n	8007c24 <HAL_RCC_OscConfig+0x9c>
 8007c0a:	4b7f      	ldr	r3, [pc, #508]	; (8007e08 <HAL_RCC_OscConfig+0x280>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	4a7e      	ldr	r2, [pc, #504]	; (8007e08 <HAL_RCC_OscConfig+0x280>)
 8007c10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c14:	6013      	str	r3, [r2, #0]
 8007c16:	4b7c      	ldr	r3, [pc, #496]	; (8007e08 <HAL_RCC_OscConfig+0x280>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	4a7b      	ldr	r2, [pc, #492]	; (8007e08 <HAL_RCC_OscConfig+0x280>)
 8007c1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007c20:	6013      	str	r3, [r2, #0]
 8007c22:	e01d      	b.n	8007c60 <HAL_RCC_OscConfig+0xd8>
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	685b      	ldr	r3, [r3, #4]
 8007c28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007c2c:	d10c      	bne.n	8007c48 <HAL_RCC_OscConfig+0xc0>
 8007c2e:	4b76      	ldr	r3, [pc, #472]	; (8007e08 <HAL_RCC_OscConfig+0x280>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	4a75      	ldr	r2, [pc, #468]	; (8007e08 <HAL_RCC_OscConfig+0x280>)
 8007c34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007c38:	6013      	str	r3, [r2, #0]
 8007c3a:	4b73      	ldr	r3, [pc, #460]	; (8007e08 <HAL_RCC_OscConfig+0x280>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4a72      	ldr	r2, [pc, #456]	; (8007e08 <HAL_RCC_OscConfig+0x280>)
 8007c40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c44:	6013      	str	r3, [r2, #0]
 8007c46:	e00b      	b.n	8007c60 <HAL_RCC_OscConfig+0xd8>
 8007c48:	4b6f      	ldr	r3, [pc, #444]	; (8007e08 <HAL_RCC_OscConfig+0x280>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4a6e      	ldr	r2, [pc, #440]	; (8007e08 <HAL_RCC_OscConfig+0x280>)
 8007c4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c52:	6013      	str	r3, [r2, #0]
 8007c54:	4b6c      	ldr	r3, [pc, #432]	; (8007e08 <HAL_RCC_OscConfig+0x280>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4a6b      	ldr	r2, [pc, #428]	; (8007e08 <HAL_RCC_OscConfig+0x280>)
 8007c5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007c5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	685b      	ldr	r3, [r3, #4]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d013      	beq.n	8007c90 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c68:	f7fb f9ba 	bl	8002fe0 <HAL_GetTick>
 8007c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c6e:	e008      	b.n	8007c82 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007c70:	f7fb f9b6 	bl	8002fe0 <HAL_GetTick>
 8007c74:	4602      	mov	r2, r0
 8007c76:	693b      	ldr	r3, [r7, #16]
 8007c78:	1ad3      	subs	r3, r2, r3
 8007c7a:	2b64      	cmp	r3, #100	; 0x64
 8007c7c:	d901      	bls.n	8007c82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007c7e:	2303      	movs	r3, #3
 8007c80:	e1ec      	b.n	800805c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c82:	4b61      	ldr	r3, [pc, #388]	; (8007e08 <HAL_RCC_OscConfig+0x280>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d0f0      	beq.n	8007c70 <HAL_RCC_OscConfig+0xe8>
 8007c8e:	e014      	b.n	8007cba <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c90:	f7fb f9a6 	bl	8002fe0 <HAL_GetTick>
 8007c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007c96:	e008      	b.n	8007caa <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007c98:	f7fb f9a2 	bl	8002fe0 <HAL_GetTick>
 8007c9c:	4602      	mov	r2, r0
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	1ad3      	subs	r3, r2, r3
 8007ca2:	2b64      	cmp	r3, #100	; 0x64
 8007ca4:	d901      	bls.n	8007caa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007ca6:	2303      	movs	r3, #3
 8007ca8:	e1d8      	b.n	800805c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007caa:	4b57      	ldr	r3, [pc, #348]	; (8007e08 <HAL_RCC_OscConfig+0x280>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d1f0      	bne.n	8007c98 <HAL_RCC_OscConfig+0x110>
 8007cb6:	e000      	b.n	8007cba <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007cb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f003 0302 	and.w	r3, r3, #2
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d069      	beq.n	8007d9a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007cc6:	4b50      	ldr	r3, [pc, #320]	; (8007e08 <HAL_RCC_OscConfig+0x280>)
 8007cc8:	689b      	ldr	r3, [r3, #8]
 8007cca:	f003 030c 	and.w	r3, r3, #12
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d00b      	beq.n	8007cea <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007cd2:	4b4d      	ldr	r3, [pc, #308]	; (8007e08 <HAL_RCC_OscConfig+0x280>)
 8007cd4:	689b      	ldr	r3, [r3, #8]
 8007cd6:	f003 030c 	and.w	r3, r3, #12
 8007cda:	2b08      	cmp	r3, #8
 8007cdc:	d11c      	bne.n	8007d18 <HAL_RCC_OscConfig+0x190>
 8007cde:	4b4a      	ldr	r3, [pc, #296]	; (8007e08 <HAL_RCC_OscConfig+0x280>)
 8007ce0:	685b      	ldr	r3, [r3, #4]
 8007ce2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d116      	bne.n	8007d18 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007cea:	4b47      	ldr	r3, [pc, #284]	; (8007e08 <HAL_RCC_OscConfig+0x280>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f003 0302 	and.w	r3, r3, #2
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d005      	beq.n	8007d02 <HAL_RCC_OscConfig+0x17a>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	68db      	ldr	r3, [r3, #12]
 8007cfa:	2b01      	cmp	r3, #1
 8007cfc:	d001      	beq.n	8007d02 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007cfe:	2301      	movs	r3, #1
 8007d00:	e1ac      	b.n	800805c <HAL_RCC_OscConfig+0x4d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d02:	4b41      	ldr	r3, [pc, #260]	; (8007e08 <HAL_RCC_OscConfig+0x280>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	691b      	ldr	r3, [r3, #16]
 8007d0e:	00db      	lsls	r3, r3, #3
 8007d10:	493d      	ldr	r1, [pc, #244]	; (8007e08 <HAL_RCC_OscConfig+0x280>)
 8007d12:	4313      	orrs	r3, r2
 8007d14:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007d16:	e040      	b.n	8007d9a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	68db      	ldr	r3, [r3, #12]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d023      	beq.n	8007d68 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007d20:	4b39      	ldr	r3, [pc, #228]	; (8007e08 <HAL_RCC_OscConfig+0x280>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	4a38      	ldr	r2, [pc, #224]	; (8007e08 <HAL_RCC_OscConfig+0x280>)
 8007d26:	f043 0301 	orr.w	r3, r3, #1
 8007d2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d2c:	f7fb f958 	bl	8002fe0 <HAL_GetTick>
 8007d30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d32:	e008      	b.n	8007d46 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007d34:	f7fb f954 	bl	8002fe0 <HAL_GetTick>
 8007d38:	4602      	mov	r2, r0
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	1ad3      	subs	r3, r2, r3
 8007d3e:	2b02      	cmp	r3, #2
 8007d40:	d901      	bls.n	8007d46 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8007d42:	2303      	movs	r3, #3
 8007d44:	e18a      	b.n	800805c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d46:	4b30      	ldr	r3, [pc, #192]	; (8007e08 <HAL_RCC_OscConfig+0x280>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f003 0302 	and.w	r3, r3, #2
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d0f0      	beq.n	8007d34 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d52:	4b2d      	ldr	r3, [pc, #180]	; (8007e08 <HAL_RCC_OscConfig+0x280>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	691b      	ldr	r3, [r3, #16]
 8007d5e:	00db      	lsls	r3, r3, #3
 8007d60:	4929      	ldr	r1, [pc, #164]	; (8007e08 <HAL_RCC_OscConfig+0x280>)
 8007d62:	4313      	orrs	r3, r2
 8007d64:	600b      	str	r3, [r1, #0]
 8007d66:	e018      	b.n	8007d9a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007d68:	4b27      	ldr	r3, [pc, #156]	; (8007e08 <HAL_RCC_OscConfig+0x280>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4a26      	ldr	r2, [pc, #152]	; (8007e08 <HAL_RCC_OscConfig+0x280>)
 8007d6e:	f023 0301 	bic.w	r3, r3, #1
 8007d72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d74:	f7fb f934 	bl	8002fe0 <HAL_GetTick>
 8007d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007d7a:	e008      	b.n	8007d8e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007d7c:	f7fb f930 	bl	8002fe0 <HAL_GetTick>
 8007d80:	4602      	mov	r2, r0
 8007d82:	693b      	ldr	r3, [r7, #16]
 8007d84:	1ad3      	subs	r3, r2, r3
 8007d86:	2b02      	cmp	r3, #2
 8007d88:	d901      	bls.n	8007d8e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007d8a:	2303      	movs	r3, #3
 8007d8c:	e166      	b.n	800805c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007d8e:	4b1e      	ldr	r3, [pc, #120]	; (8007e08 <HAL_RCC_OscConfig+0x280>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f003 0302 	and.w	r3, r3, #2
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d1f0      	bne.n	8007d7c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f003 0308 	and.w	r3, r3, #8
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d038      	beq.n	8007e18 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	695b      	ldr	r3, [r3, #20]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d019      	beq.n	8007de2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007dae:	4b16      	ldr	r3, [pc, #88]	; (8007e08 <HAL_RCC_OscConfig+0x280>)
 8007db0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007db2:	4a15      	ldr	r2, [pc, #84]	; (8007e08 <HAL_RCC_OscConfig+0x280>)
 8007db4:	f043 0301 	orr.w	r3, r3, #1
 8007db8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007dba:	f7fb f911 	bl	8002fe0 <HAL_GetTick>
 8007dbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007dc0:	e008      	b.n	8007dd4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007dc2:	f7fb f90d 	bl	8002fe0 <HAL_GetTick>
 8007dc6:	4602      	mov	r2, r0
 8007dc8:	693b      	ldr	r3, [r7, #16]
 8007dca:	1ad3      	subs	r3, r2, r3
 8007dcc:	2b02      	cmp	r3, #2
 8007dce:	d901      	bls.n	8007dd4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007dd0:	2303      	movs	r3, #3
 8007dd2:	e143      	b.n	800805c <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007dd4:	4b0c      	ldr	r3, [pc, #48]	; (8007e08 <HAL_RCC_OscConfig+0x280>)
 8007dd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007dd8:	f003 0302 	and.w	r3, r3, #2
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d0f0      	beq.n	8007dc2 <HAL_RCC_OscConfig+0x23a>
 8007de0:	e01a      	b.n	8007e18 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007de2:	4b09      	ldr	r3, [pc, #36]	; (8007e08 <HAL_RCC_OscConfig+0x280>)
 8007de4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007de6:	4a08      	ldr	r2, [pc, #32]	; (8007e08 <HAL_RCC_OscConfig+0x280>)
 8007de8:	f023 0301 	bic.w	r3, r3, #1
 8007dec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007dee:	f7fb f8f7 	bl	8002fe0 <HAL_GetTick>
 8007df2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007df4:	e00a      	b.n	8007e0c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007df6:	f7fb f8f3 	bl	8002fe0 <HAL_GetTick>
 8007dfa:	4602      	mov	r2, r0
 8007dfc:	693b      	ldr	r3, [r7, #16]
 8007dfe:	1ad3      	subs	r3, r2, r3
 8007e00:	2b02      	cmp	r3, #2
 8007e02:	d903      	bls.n	8007e0c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007e04:	2303      	movs	r3, #3
 8007e06:	e129      	b.n	800805c <HAL_RCC_OscConfig+0x4d4>
 8007e08:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007e0c:	4b95      	ldr	r3, [pc, #596]	; (8008064 <HAL_RCC_OscConfig+0x4dc>)
 8007e0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e10:	f003 0302 	and.w	r3, r3, #2
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d1ee      	bne.n	8007df6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f003 0304 	and.w	r3, r3, #4
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	f000 80a4 	beq.w	8007f6e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007e26:	4b8f      	ldr	r3, [pc, #572]	; (8008064 <HAL_RCC_OscConfig+0x4dc>)
 8007e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d10d      	bne.n	8007e4e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007e32:	4b8c      	ldr	r3, [pc, #560]	; (8008064 <HAL_RCC_OscConfig+0x4dc>)
 8007e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e36:	4a8b      	ldr	r2, [pc, #556]	; (8008064 <HAL_RCC_OscConfig+0x4dc>)
 8007e38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e3c:	6413      	str	r3, [r2, #64]	; 0x40
 8007e3e:	4b89      	ldr	r3, [pc, #548]	; (8008064 <HAL_RCC_OscConfig+0x4dc>)
 8007e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e46:	60fb      	str	r3, [r7, #12]
 8007e48:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007e4e:	4b86      	ldr	r3, [pc, #536]	; (8008068 <HAL_RCC_OscConfig+0x4e0>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d118      	bne.n	8007e8c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007e5a:	4b83      	ldr	r3, [pc, #524]	; (8008068 <HAL_RCC_OscConfig+0x4e0>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4a82      	ldr	r2, [pc, #520]	; (8008068 <HAL_RCC_OscConfig+0x4e0>)
 8007e60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007e66:	f7fb f8bb 	bl	8002fe0 <HAL_GetTick>
 8007e6a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007e6c:	e008      	b.n	8007e80 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007e6e:	f7fb f8b7 	bl	8002fe0 <HAL_GetTick>
 8007e72:	4602      	mov	r2, r0
 8007e74:	693b      	ldr	r3, [r7, #16]
 8007e76:	1ad3      	subs	r3, r2, r3
 8007e78:	2b64      	cmp	r3, #100	; 0x64
 8007e7a:	d901      	bls.n	8007e80 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007e7c:	2303      	movs	r3, #3
 8007e7e:	e0ed      	b.n	800805c <HAL_RCC_OscConfig+0x4d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007e80:	4b79      	ldr	r3, [pc, #484]	; (8008068 <HAL_RCC_OscConfig+0x4e0>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d0f0      	beq.n	8007e6e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	689b      	ldr	r3, [r3, #8]
 8007e90:	2b01      	cmp	r3, #1
 8007e92:	d106      	bne.n	8007ea2 <HAL_RCC_OscConfig+0x31a>
 8007e94:	4b73      	ldr	r3, [pc, #460]	; (8008064 <HAL_RCC_OscConfig+0x4dc>)
 8007e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e98:	4a72      	ldr	r2, [pc, #456]	; (8008064 <HAL_RCC_OscConfig+0x4dc>)
 8007e9a:	f043 0301 	orr.w	r3, r3, #1
 8007e9e:	6713      	str	r3, [r2, #112]	; 0x70
 8007ea0:	e02d      	b.n	8007efe <HAL_RCC_OscConfig+0x376>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	689b      	ldr	r3, [r3, #8]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d10c      	bne.n	8007ec4 <HAL_RCC_OscConfig+0x33c>
 8007eaa:	4b6e      	ldr	r3, [pc, #440]	; (8008064 <HAL_RCC_OscConfig+0x4dc>)
 8007eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007eae:	4a6d      	ldr	r2, [pc, #436]	; (8008064 <HAL_RCC_OscConfig+0x4dc>)
 8007eb0:	f023 0301 	bic.w	r3, r3, #1
 8007eb4:	6713      	str	r3, [r2, #112]	; 0x70
 8007eb6:	4b6b      	ldr	r3, [pc, #428]	; (8008064 <HAL_RCC_OscConfig+0x4dc>)
 8007eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007eba:	4a6a      	ldr	r2, [pc, #424]	; (8008064 <HAL_RCC_OscConfig+0x4dc>)
 8007ebc:	f023 0304 	bic.w	r3, r3, #4
 8007ec0:	6713      	str	r3, [r2, #112]	; 0x70
 8007ec2:	e01c      	b.n	8007efe <HAL_RCC_OscConfig+0x376>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	689b      	ldr	r3, [r3, #8]
 8007ec8:	2b05      	cmp	r3, #5
 8007eca:	d10c      	bne.n	8007ee6 <HAL_RCC_OscConfig+0x35e>
 8007ecc:	4b65      	ldr	r3, [pc, #404]	; (8008064 <HAL_RCC_OscConfig+0x4dc>)
 8007ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ed0:	4a64      	ldr	r2, [pc, #400]	; (8008064 <HAL_RCC_OscConfig+0x4dc>)
 8007ed2:	f043 0304 	orr.w	r3, r3, #4
 8007ed6:	6713      	str	r3, [r2, #112]	; 0x70
 8007ed8:	4b62      	ldr	r3, [pc, #392]	; (8008064 <HAL_RCC_OscConfig+0x4dc>)
 8007eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007edc:	4a61      	ldr	r2, [pc, #388]	; (8008064 <HAL_RCC_OscConfig+0x4dc>)
 8007ede:	f043 0301 	orr.w	r3, r3, #1
 8007ee2:	6713      	str	r3, [r2, #112]	; 0x70
 8007ee4:	e00b      	b.n	8007efe <HAL_RCC_OscConfig+0x376>
 8007ee6:	4b5f      	ldr	r3, [pc, #380]	; (8008064 <HAL_RCC_OscConfig+0x4dc>)
 8007ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007eea:	4a5e      	ldr	r2, [pc, #376]	; (8008064 <HAL_RCC_OscConfig+0x4dc>)
 8007eec:	f023 0301 	bic.w	r3, r3, #1
 8007ef0:	6713      	str	r3, [r2, #112]	; 0x70
 8007ef2:	4b5c      	ldr	r3, [pc, #368]	; (8008064 <HAL_RCC_OscConfig+0x4dc>)
 8007ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ef6:	4a5b      	ldr	r2, [pc, #364]	; (8008064 <HAL_RCC_OscConfig+0x4dc>)
 8007ef8:	f023 0304 	bic.w	r3, r3, #4
 8007efc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	689b      	ldr	r3, [r3, #8]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d015      	beq.n	8007f32 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f06:	f7fb f86b 	bl	8002fe0 <HAL_GetTick>
 8007f0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007f0c:	e00a      	b.n	8007f24 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007f0e:	f7fb f867 	bl	8002fe0 <HAL_GetTick>
 8007f12:	4602      	mov	r2, r0
 8007f14:	693b      	ldr	r3, [r7, #16]
 8007f16:	1ad3      	subs	r3, r2, r3
 8007f18:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d901      	bls.n	8007f24 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007f20:	2303      	movs	r3, #3
 8007f22:	e09b      	b.n	800805c <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007f24:	4b4f      	ldr	r3, [pc, #316]	; (8008064 <HAL_RCC_OscConfig+0x4dc>)
 8007f26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f28:	f003 0302 	and.w	r3, r3, #2
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d0ee      	beq.n	8007f0e <HAL_RCC_OscConfig+0x386>
 8007f30:	e014      	b.n	8007f5c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f32:	f7fb f855 	bl	8002fe0 <HAL_GetTick>
 8007f36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007f38:	e00a      	b.n	8007f50 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007f3a:	f7fb f851 	bl	8002fe0 <HAL_GetTick>
 8007f3e:	4602      	mov	r2, r0
 8007f40:	693b      	ldr	r3, [r7, #16]
 8007f42:	1ad3      	subs	r3, r2, r3
 8007f44:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d901      	bls.n	8007f50 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007f4c:	2303      	movs	r3, #3
 8007f4e:	e085      	b.n	800805c <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007f50:	4b44      	ldr	r3, [pc, #272]	; (8008064 <HAL_RCC_OscConfig+0x4dc>)
 8007f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f54:	f003 0302 	and.w	r3, r3, #2
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d1ee      	bne.n	8007f3a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007f5c:	7dfb      	ldrb	r3, [r7, #23]
 8007f5e:	2b01      	cmp	r3, #1
 8007f60:	d105      	bne.n	8007f6e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007f62:	4b40      	ldr	r3, [pc, #256]	; (8008064 <HAL_RCC_OscConfig+0x4dc>)
 8007f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f66:	4a3f      	ldr	r2, [pc, #252]	; (8008064 <HAL_RCC_OscConfig+0x4dc>)
 8007f68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007f6c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	699b      	ldr	r3, [r3, #24]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d071      	beq.n	800805a <HAL_RCC_OscConfig+0x4d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007f76:	4b3b      	ldr	r3, [pc, #236]	; (8008064 <HAL_RCC_OscConfig+0x4dc>)
 8007f78:	689b      	ldr	r3, [r3, #8]
 8007f7a:	f003 030c 	and.w	r3, r3, #12
 8007f7e:	2b08      	cmp	r3, #8
 8007f80:	d069      	beq.n	8008056 <HAL_RCC_OscConfig+0x4ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	699b      	ldr	r3, [r3, #24]
 8007f86:	2b02      	cmp	r3, #2
 8007f88:	d14b      	bne.n	8008022 <HAL_RCC_OscConfig+0x49a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f8a:	4b36      	ldr	r3, [pc, #216]	; (8008064 <HAL_RCC_OscConfig+0x4dc>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	4a35      	ldr	r2, [pc, #212]	; (8008064 <HAL_RCC_OscConfig+0x4dc>)
 8007f90:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007f94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f96:	f7fb f823 	bl	8002fe0 <HAL_GetTick>
 8007f9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f9c:	e008      	b.n	8007fb0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007f9e:	f7fb f81f 	bl	8002fe0 <HAL_GetTick>
 8007fa2:	4602      	mov	r2, r0
 8007fa4:	693b      	ldr	r3, [r7, #16]
 8007fa6:	1ad3      	subs	r3, r2, r3
 8007fa8:	2b02      	cmp	r3, #2
 8007faa:	d901      	bls.n	8007fb0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007fac:	2303      	movs	r3, #3
 8007fae:	e055      	b.n	800805c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007fb0:	4b2c      	ldr	r3, [pc, #176]	; (8008064 <HAL_RCC_OscConfig+0x4dc>)
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d1f0      	bne.n	8007f9e <HAL_RCC_OscConfig+0x416>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	69da      	ldr	r2, [r3, #28]
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6a1b      	ldr	r3, [r3, #32]
 8007fc4:	431a      	orrs	r2, r3
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fca:	019b      	lsls	r3, r3, #6
 8007fcc:	431a      	orrs	r2, r3
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fd2:	085b      	lsrs	r3, r3, #1
 8007fd4:	3b01      	subs	r3, #1
 8007fd6:	041b      	lsls	r3, r3, #16
 8007fd8:	431a      	orrs	r2, r3
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fde:	061b      	lsls	r3, r3, #24
 8007fe0:	431a      	orrs	r2, r3
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fe6:	071b      	lsls	r3, r3, #28
 8007fe8:	491e      	ldr	r1, [pc, #120]	; (8008064 <HAL_RCC_OscConfig+0x4dc>)
 8007fea:	4313      	orrs	r3, r2
 8007fec:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007fee:	4b1d      	ldr	r3, [pc, #116]	; (8008064 <HAL_RCC_OscConfig+0x4dc>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	4a1c      	ldr	r2, [pc, #112]	; (8008064 <HAL_RCC_OscConfig+0x4dc>)
 8007ff4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007ff8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ffa:	f7fa fff1 	bl	8002fe0 <HAL_GetTick>
 8007ffe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008000:	e008      	b.n	8008014 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008002:	f7fa ffed 	bl	8002fe0 <HAL_GetTick>
 8008006:	4602      	mov	r2, r0
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	1ad3      	subs	r3, r2, r3
 800800c:	2b02      	cmp	r3, #2
 800800e:	d901      	bls.n	8008014 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8008010:	2303      	movs	r3, #3
 8008012:	e023      	b.n	800805c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008014:	4b13      	ldr	r3, [pc, #76]	; (8008064 <HAL_RCC_OscConfig+0x4dc>)
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800801c:	2b00      	cmp	r3, #0
 800801e:	d0f0      	beq.n	8008002 <HAL_RCC_OscConfig+0x47a>
 8008020:	e01b      	b.n	800805a <HAL_RCC_OscConfig+0x4d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008022:	4b10      	ldr	r3, [pc, #64]	; (8008064 <HAL_RCC_OscConfig+0x4dc>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	4a0f      	ldr	r2, [pc, #60]	; (8008064 <HAL_RCC_OscConfig+0x4dc>)
 8008028:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800802c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800802e:	f7fa ffd7 	bl	8002fe0 <HAL_GetTick>
 8008032:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008034:	e008      	b.n	8008048 <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008036:	f7fa ffd3 	bl	8002fe0 <HAL_GetTick>
 800803a:	4602      	mov	r2, r0
 800803c:	693b      	ldr	r3, [r7, #16]
 800803e:	1ad3      	subs	r3, r2, r3
 8008040:	2b02      	cmp	r3, #2
 8008042:	d901      	bls.n	8008048 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8008044:	2303      	movs	r3, #3
 8008046:	e009      	b.n	800805c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008048:	4b06      	ldr	r3, [pc, #24]	; (8008064 <HAL_RCC_OscConfig+0x4dc>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008050:	2b00      	cmp	r3, #0
 8008052:	d1f0      	bne.n	8008036 <HAL_RCC_OscConfig+0x4ae>
 8008054:	e001      	b.n	800805a <HAL_RCC_OscConfig+0x4d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8008056:	2301      	movs	r3, #1
 8008058:	e000      	b.n	800805c <HAL_RCC_OscConfig+0x4d4>
    }
  }
  return HAL_OK;
 800805a:	2300      	movs	r3, #0
}
 800805c:	4618      	mov	r0, r3
 800805e:	3718      	adds	r7, #24
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}
 8008064:	40023800 	.word	0x40023800
 8008068:	40007000 	.word	0x40007000

0800806c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b084      	sub	sp, #16
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
 8008074:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8008076:	2300      	movs	r3, #0
 8008078:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d101      	bne.n	8008084 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008080:	2301      	movs	r3, #1
 8008082:	e0ce      	b.n	8008222 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008084:	4b69      	ldr	r3, [pc, #420]	; (800822c <HAL_RCC_ClockConfig+0x1c0>)
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f003 030f 	and.w	r3, r3, #15
 800808c:	683a      	ldr	r2, [r7, #0]
 800808e:	429a      	cmp	r2, r3
 8008090:	d910      	bls.n	80080b4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008092:	4b66      	ldr	r3, [pc, #408]	; (800822c <HAL_RCC_ClockConfig+0x1c0>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f023 020f 	bic.w	r2, r3, #15
 800809a:	4964      	ldr	r1, [pc, #400]	; (800822c <HAL_RCC_ClockConfig+0x1c0>)
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	4313      	orrs	r3, r2
 80080a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80080a2:	4b62      	ldr	r3, [pc, #392]	; (800822c <HAL_RCC_ClockConfig+0x1c0>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f003 030f 	and.w	r3, r3, #15
 80080aa:	683a      	ldr	r2, [r7, #0]
 80080ac:	429a      	cmp	r2, r3
 80080ae:	d001      	beq.n	80080b4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80080b0:	2301      	movs	r3, #1
 80080b2:	e0b6      	b.n	8008222 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f003 0302 	and.w	r3, r3, #2
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d020      	beq.n	8008102 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f003 0304 	and.w	r3, r3, #4
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d005      	beq.n	80080d8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80080cc:	4b58      	ldr	r3, [pc, #352]	; (8008230 <HAL_RCC_ClockConfig+0x1c4>)
 80080ce:	689b      	ldr	r3, [r3, #8]
 80080d0:	4a57      	ldr	r2, [pc, #348]	; (8008230 <HAL_RCC_ClockConfig+0x1c4>)
 80080d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80080d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f003 0308 	and.w	r3, r3, #8
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d005      	beq.n	80080f0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80080e4:	4b52      	ldr	r3, [pc, #328]	; (8008230 <HAL_RCC_ClockConfig+0x1c4>)
 80080e6:	689b      	ldr	r3, [r3, #8]
 80080e8:	4a51      	ldr	r2, [pc, #324]	; (8008230 <HAL_RCC_ClockConfig+0x1c4>)
 80080ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80080ee:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80080f0:	4b4f      	ldr	r3, [pc, #316]	; (8008230 <HAL_RCC_ClockConfig+0x1c4>)
 80080f2:	689b      	ldr	r3, [r3, #8]
 80080f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	689b      	ldr	r3, [r3, #8]
 80080fc:	494c      	ldr	r1, [pc, #304]	; (8008230 <HAL_RCC_ClockConfig+0x1c4>)
 80080fe:	4313      	orrs	r3, r2
 8008100:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f003 0301 	and.w	r3, r3, #1
 800810a:	2b00      	cmp	r3, #0
 800810c:	d040      	beq.n	8008190 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	685b      	ldr	r3, [r3, #4]
 8008112:	2b01      	cmp	r3, #1
 8008114:	d107      	bne.n	8008126 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008116:	4b46      	ldr	r3, [pc, #280]	; (8008230 <HAL_RCC_ClockConfig+0x1c4>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800811e:	2b00      	cmp	r3, #0
 8008120:	d115      	bne.n	800814e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008122:	2301      	movs	r3, #1
 8008124:	e07d      	b.n	8008222 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	685b      	ldr	r3, [r3, #4]
 800812a:	2b02      	cmp	r3, #2
 800812c:	d107      	bne.n	800813e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800812e:	4b40      	ldr	r3, [pc, #256]	; (8008230 <HAL_RCC_ClockConfig+0x1c4>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008136:	2b00      	cmp	r3, #0
 8008138:	d109      	bne.n	800814e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800813a:	2301      	movs	r3, #1
 800813c:	e071      	b.n	8008222 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800813e:	4b3c      	ldr	r3, [pc, #240]	; (8008230 <HAL_RCC_ClockConfig+0x1c4>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f003 0302 	and.w	r3, r3, #2
 8008146:	2b00      	cmp	r3, #0
 8008148:	d101      	bne.n	800814e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800814a:	2301      	movs	r3, #1
 800814c:	e069      	b.n	8008222 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800814e:	4b38      	ldr	r3, [pc, #224]	; (8008230 <HAL_RCC_ClockConfig+0x1c4>)
 8008150:	689b      	ldr	r3, [r3, #8]
 8008152:	f023 0203 	bic.w	r2, r3, #3
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	685b      	ldr	r3, [r3, #4]
 800815a:	4935      	ldr	r1, [pc, #212]	; (8008230 <HAL_RCC_ClockConfig+0x1c4>)
 800815c:	4313      	orrs	r3, r2
 800815e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008160:	f7fa ff3e 	bl	8002fe0 <HAL_GetTick>
 8008164:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008166:	e00a      	b.n	800817e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008168:	f7fa ff3a 	bl	8002fe0 <HAL_GetTick>
 800816c:	4602      	mov	r2, r0
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	1ad3      	subs	r3, r2, r3
 8008172:	f241 3288 	movw	r2, #5000	; 0x1388
 8008176:	4293      	cmp	r3, r2
 8008178:	d901      	bls.n	800817e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800817a:	2303      	movs	r3, #3
 800817c:	e051      	b.n	8008222 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800817e:	4b2c      	ldr	r3, [pc, #176]	; (8008230 <HAL_RCC_ClockConfig+0x1c4>)
 8008180:	689b      	ldr	r3, [r3, #8]
 8008182:	f003 020c 	and.w	r2, r3, #12
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	685b      	ldr	r3, [r3, #4]
 800818a:	009b      	lsls	r3, r3, #2
 800818c:	429a      	cmp	r2, r3
 800818e:	d1eb      	bne.n	8008168 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008190:	4b26      	ldr	r3, [pc, #152]	; (800822c <HAL_RCC_ClockConfig+0x1c0>)
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f003 030f 	and.w	r3, r3, #15
 8008198:	683a      	ldr	r2, [r7, #0]
 800819a:	429a      	cmp	r2, r3
 800819c:	d210      	bcs.n	80081c0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800819e:	4b23      	ldr	r3, [pc, #140]	; (800822c <HAL_RCC_ClockConfig+0x1c0>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f023 020f 	bic.w	r2, r3, #15
 80081a6:	4921      	ldr	r1, [pc, #132]	; (800822c <HAL_RCC_ClockConfig+0x1c0>)
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	4313      	orrs	r3, r2
 80081ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80081ae:	4b1f      	ldr	r3, [pc, #124]	; (800822c <HAL_RCC_ClockConfig+0x1c0>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f003 030f 	and.w	r3, r3, #15
 80081b6:	683a      	ldr	r2, [r7, #0]
 80081b8:	429a      	cmp	r2, r3
 80081ba:	d001      	beq.n	80081c0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80081bc:	2301      	movs	r3, #1
 80081be:	e030      	b.n	8008222 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f003 0304 	and.w	r3, r3, #4
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d008      	beq.n	80081de <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80081cc:	4b18      	ldr	r3, [pc, #96]	; (8008230 <HAL_RCC_ClockConfig+0x1c4>)
 80081ce:	689b      	ldr	r3, [r3, #8]
 80081d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	68db      	ldr	r3, [r3, #12]
 80081d8:	4915      	ldr	r1, [pc, #84]	; (8008230 <HAL_RCC_ClockConfig+0x1c4>)
 80081da:	4313      	orrs	r3, r2
 80081dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f003 0308 	and.w	r3, r3, #8
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d009      	beq.n	80081fe <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80081ea:	4b11      	ldr	r3, [pc, #68]	; (8008230 <HAL_RCC_ClockConfig+0x1c4>)
 80081ec:	689b      	ldr	r3, [r3, #8]
 80081ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	691b      	ldr	r3, [r3, #16]
 80081f6:	00db      	lsls	r3, r3, #3
 80081f8:	490d      	ldr	r1, [pc, #52]	; (8008230 <HAL_RCC_ClockConfig+0x1c4>)
 80081fa:	4313      	orrs	r3, r2
 80081fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80081fe:	f000 f881 	bl	8008304 <HAL_RCC_GetSysClockFreq>
 8008202:	4601      	mov	r1, r0
 8008204:	4b0a      	ldr	r3, [pc, #40]	; (8008230 <HAL_RCC_ClockConfig+0x1c4>)
 8008206:	689b      	ldr	r3, [r3, #8]
 8008208:	091b      	lsrs	r3, r3, #4
 800820a:	f003 030f 	and.w	r3, r3, #15
 800820e:	4a09      	ldr	r2, [pc, #36]	; (8008234 <HAL_RCC_ClockConfig+0x1c8>)
 8008210:	5cd3      	ldrb	r3, [r2, r3]
 8008212:	fa21 f303 	lsr.w	r3, r1, r3
 8008216:	4a08      	ldr	r2, [pc, #32]	; (8008238 <HAL_RCC_ClockConfig+0x1cc>)
 8008218:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800821a:	2000      	movs	r0, #0
 800821c:	f7fa fdda 	bl	8002dd4 <HAL_InitTick>

  return HAL_OK;
 8008220:	2300      	movs	r3, #0
}
 8008222:	4618      	mov	r0, r3
 8008224:	3710      	adds	r7, #16
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}
 800822a:	bf00      	nop
 800822c:	40023c00 	.word	0x40023c00
 8008230:	40023800 	.word	0x40023800
 8008234:	0800dbcc 	.word	0x0800dbcc
 8008238:	20000000 	.word	0x20000000

0800823c <HAL_RCC_MCOConfig>:
  *            @arg RCC_MCODIV_4: division by 4 applied to MCOx clock
  *            @arg RCC_MCODIV_5: division by 5 applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b08c      	sub	sp, #48	; 0x30
 8008240:	af00      	add	r7, sp, #0
 8008242:	60f8      	str	r0, [r7, #12]
 8008244:	60b9      	str	r1, [r7, #8]
 8008246:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d127      	bne.n	800829e <HAL_RCC_MCOConfig+0x62>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800824e:	4b2a      	ldr	r3, [pc, #168]	; (80082f8 <HAL_RCC_MCOConfig+0xbc>)
 8008250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008252:	4a29      	ldr	r2, [pc, #164]	; (80082f8 <HAL_RCC_MCOConfig+0xbc>)
 8008254:	f043 0301 	orr.w	r3, r3, #1
 8008258:	6313      	str	r3, [r2, #48]	; 0x30
 800825a:	4b27      	ldr	r3, [pc, #156]	; (80082f8 <HAL_RCC_MCOConfig+0xbc>)
 800825c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800825e:	f003 0301 	and.w	r3, r3, #1
 8008262:	61bb      	str	r3, [r7, #24]
 8008264:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8008266:	f44f 7380 	mov.w	r3, #256	; 0x100
 800826a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800826c:	2302      	movs	r3, #2
 800826e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8008270:	2303      	movs	r3, #3
 8008272:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008274:	2300      	movs	r3, #0
 8008276:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8008278:	2300      	movs	r3, #0
 800827a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800827c:	f107 031c 	add.w	r3, r7, #28
 8008280:	4619      	mov	r1, r3
 8008282:	481e      	ldr	r0, [pc, #120]	; (80082fc <HAL_RCC_MCOConfig+0xc0>)
 8008284:	f7fd f89a 	bl	80053bc <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8008288:	4b1b      	ldr	r3, [pc, #108]	; (80082f8 <HAL_RCC_MCOConfig+0xbc>)
 800828a:	689b      	ldr	r3, [r3, #8]
 800828c:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8008290:	68b9      	ldr	r1, [r7, #8]
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	430b      	orrs	r3, r1
 8008296:	4918      	ldr	r1, [pc, #96]	; (80082f8 <HAL_RCC_MCOConfig+0xbc>)
 8008298:	4313      	orrs	r3, r2
 800829a:	608b      	str	r3, [r1, #8]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[2:0] bits then Select MCO2 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3)));
  }
}
 800829c:	e027      	b.n	80082ee <HAL_RCC_MCOConfig+0xb2>
    MCO2_CLK_ENABLE();
 800829e:	4b16      	ldr	r3, [pc, #88]	; (80082f8 <HAL_RCC_MCOConfig+0xbc>)
 80082a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082a2:	4a15      	ldr	r2, [pc, #84]	; (80082f8 <HAL_RCC_MCOConfig+0xbc>)
 80082a4:	f043 0304 	orr.w	r3, r3, #4
 80082a8:	6313      	str	r3, [r2, #48]	; 0x30
 80082aa:	4b13      	ldr	r3, [pc, #76]	; (80082f8 <HAL_RCC_MCOConfig+0xbc>)
 80082ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082ae:	f003 0304 	and.w	r3, r3, #4
 80082b2:	617b      	str	r3, [r7, #20]
 80082b4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 80082b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80082ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80082bc:	2302      	movs	r3, #2
 80082be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80082c0:	2303      	movs	r3, #3
 80082c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082c4:	2300      	movs	r3, #0
 80082c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80082c8:	2300      	movs	r3, #0
 80082ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80082cc:	f107 031c 	add.w	r3, r7, #28
 80082d0:	4619      	mov	r1, r3
 80082d2:	480b      	ldr	r0, [pc, #44]	; (8008300 <HAL_RCC_MCOConfig+0xc4>)
 80082d4:	f7fd f872 	bl	80053bc <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3)));
 80082d8:	4b07      	ldr	r3, [pc, #28]	; (80082f8 <HAL_RCC_MCOConfig+0xbc>)
 80082da:	689b      	ldr	r3, [r3, #8]
 80082dc:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	00d9      	lsls	r1, r3, #3
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	430b      	orrs	r3, r1
 80082e8:	4903      	ldr	r1, [pc, #12]	; (80082f8 <HAL_RCC_MCOConfig+0xbc>)
 80082ea:	4313      	orrs	r3, r2
 80082ec:	608b      	str	r3, [r1, #8]
}
 80082ee:	bf00      	nop
 80082f0:	3730      	adds	r7, #48	; 0x30
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bd80      	pop	{r7, pc}
 80082f6:	bf00      	nop
 80082f8:	40023800 	.word	0x40023800
 80082fc:	40020000 	.word	0x40020000
 8008300:	40020800 	.word	0x40020800

08008304 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008306:	b085      	sub	sp, #20
 8008308:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800830a:	2300      	movs	r3, #0
 800830c:	607b      	str	r3, [r7, #4]
 800830e:	2300      	movs	r3, #0
 8008310:	60fb      	str	r3, [r7, #12]
 8008312:	2300      	movs	r3, #0
 8008314:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8008316:	2300      	movs	r3, #0
 8008318:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800831a:	4b50      	ldr	r3, [pc, #320]	; (800845c <HAL_RCC_GetSysClockFreq+0x158>)
 800831c:	689b      	ldr	r3, [r3, #8]
 800831e:	f003 030c 	and.w	r3, r3, #12
 8008322:	2b04      	cmp	r3, #4
 8008324:	d007      	beq.n	8008336 <HAL_RCC_GetSysClockFreq+0x32>
 8008326:	2b08      	cmp	r3, #8
 8008328:	d008      	beq.n	800833c <HAL_RCC_GetSysClockFreq+0x38>
 800832a:	2b00      	cmp	r3, #0
 800832c:	f040 808d 	bne.w	800844a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008330:	4b4b      	ldr	r3, [pc, #300]	; (8008460 <HAL_RCC_GetSysClockFreq+0x15c>)
 8008332:	60bb      	str	r3, [r7, #8]
       break;
 8008334:	e08c      	b.n	8008450 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008336:	4b4b      	ldr	r3, [pc, #300]	; (8008464 <HAL_RCC_GetSysClockFreq+0x160>)
 8008338:	60bb      	str	r3, [r7, #8]
      break;
 800833a:	e089      	b.n	8008450 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800833c:	4b47      	ldr	r3, [pc, #284]	; (800845c <HAL_RCC_GetSysClockFreq+0x158>)
 800833e:	685b      	ldr	r3, [r3, #4]
 8008340:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008344:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8008346:	4b45      	ldr	r3, [pc, #276]	; (800845c <HAL_RCC_GetSysClockFreq+0x158>)
 8008348:	685b      	ldr	r3, [r3, #4]
 800834a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800834e:	2b00      	cmp	r3, #0
 8008350:	d023      	beq.n	800839a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008352:	4b42      	ldr	r3, [pc, #264]	; (800845c <HAL_RCC_GetSysClockFreq+0x158>)
 8008354:	685b      	ldr	r3, [r3, #4]
 8008356:	099b      	lsrs	r3, r3, #6
 8008358:	f04f 0400 	mov.w	r4, #0
 800835c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008360:	f04f 0200 	mov.w	r2, #0
 8008364:	ea03 0501 	and.w	r5, r3, r1
 8008368:	ea04 0602 	and.w	r6, r4, r2
 800836c:	4a3d      	ldr	r2, [pc, #244]	; (8008464 <HAL_RCC_GetSysClockFreq+0x160>)
 800836e:	fb02 f106 	mul.w	r1, r2, r6
 8008372:	2200      	movs	r2, #0
 8008374:	fb02 f205 	mul.w	r2, r2, r5
 8008378:	440a      	add	r2, r1
 800837a:	493a      	ldr	r1, [pc, #232]	; (8008464 <HAL_RCC_GetSysClockFreq+0x160>)
 800837c:	fba5 0101 	umull	r0, r1, r5, r1
 8008380:	1853      	adds	r3, r2, r1
 8008382:	4619      	mov	r1, r3
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f04f 0400 	mov.w	r4, #0
 800838a:	461a      	mov	r2, r3
 800838c:	4623      	mov	r3, r4
 800838e:	f7f7 ff57 	bl	8000240 <__aeabi_uldivmod>
 8008392:	4603      	mov	r3, r0
 8008394:	460c      	mov	r4, r1
 8008396:	60fb      	str	r3, [r7, #12]
 8008398:	e049      	b.n	800842e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800839a:	4b30      	ldr	r3, [pc, #192]	; (800845c <HAL_RCC_GetSysClockFreq+0x158>)
 800839c:	685b      	ldr	r3, [r3, #4]
 800839e:	099b      	lsrs	r3, r3, #6
 80083a0:	f04f 0400 	mov.w	r4, #0
 80083a4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80083a8:	f04f 0200 	mov.w	r2, #0
 80083ac:	ea03 0501 	and.w	r5, r3, r1
 80083b0:	ea04 0602 	and.w	r6, r4, r2
 80083b4:	4629      	mov	r1, r5
 80083b6:	4632      	mov	r2, r6
 80083b8:	f04f 0300 	mov.w	r3, #0
 80083bc:	f04f 0400 	mov.w	r4, #0
 80083c0:	0154      	lsls	r4, r2, #5
 80083c2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80083c6:	014b      	lsls	r3, r1, #5
 80083c8:	4619      	mov	r1, r3
 80083ca:	4622      	mov	r2, r4
 80083cc:	1b49      	subs	r1, r1, r5
 80083ce:	eb62 0206 	sbc.w	r2, r2, r6
 80083d2:	f04f 0300 	mov.w	r3, #0
 80083d6:	f04f 0400 	mov.w	r4, #0
 80083da:	0194      	lsls	r4, r2, #6
 80083dc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80083e0:	018b      	lsls	r3, r1, #6
 80083e2:	1a5b      	subs	r3, r3, r1
 80083e4:	eb64 0402 	sbc.w	r4, r4, r2
 80083e8:	f04f 0100 	mov.w	r1, #0
 80083ec:	f04f 0200 	mov.w	r2, #0
 80083f0:	00e2      	lsls	r2, r4, #3
 80083f2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80083f6:	00d9      	lsls	r1, r3, #3
 80083f8:	460b      	mov	r3, r1
 80083fa:	4614      	mov	r4, r2
 80083fc:	195b      	adds	r3, r3, r5
 80083fe:	eb44 0406 	adc.w	r4, r4, r6
 8008402:	f04f 0100 	mov.w	r1, #0
 8008406:	f04f 0200 	mov.w	r2, #0
 800840a:	02a2      	lsls	r2, r4, #10
 800840c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8008410:	0299      	lsls	r1, r3, #10
 8008412:	460b      	mov	r3, r1
 8008414:	4614      	mov	r4, r2
 8008416:	4618      	mov	r0, r3
 8008418:	4621      	mov	r1, r4
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	f04f 0400 	mov.w	r4, #0
 8008420:	461a      	mov	r2, r3
 8008422:	4623      	mov	r3, r4
 8008424:	f7f7 ff0c 	bl	8000240 <__aeabi_uldivmod>
 8008428:	4603      	mov	r3, r0
 800842a:	460c      	mov	r4, r1
 800842c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 800842e:	4b0b      	ldr	r3, [pc, #44]	; (800845c <HAL_RCC_GetSysClockFreq+0x158>)
 8008430:	685b      	ldr	r3, [r3, #4]
 8008432:	0c1b      	lsrs	r3, r3, #16
 8008434:	f003 0303 	and.w	r3, r3, #3
 8008438:	3301      	adds	r3, #1
 800843a:	005b      	lsls	r3, r3, #1
 800843c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800843e:	68fa      	ldr	r2, [r7, #12]
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	fbb2 f3f3 	udiv	r3, r2, r3
 8008446:	60bb      	str	r3, [r7, #8]
      break;
 8008448:	e002      	b.n	8008450 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800844a:	4b05      	ldr	r3, [pc, #20]	; (8008460 <HAL_RCC_GetSysClockFreq+0x15c>)
 800844c:	60bb      	str	r3, [r7, #8]
      break;
 800844e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008450:	68bb      	ldr	r3, [r7, #8]
}
 8008452:	4618      	mov	r0, r3
 8008454:	3714      	adds	r7, #20
 8008456:	46bd      	mov	sp, r7
 8008458:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800845a:	bf00      	nop
 800845c:	40023800 	.word	0x40023800
 8008460:	00f42400 	.word	0x00f42400
 8008464:	017d7840 	.word	0x017d7840

08008468 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008468:	b480      	push	{r7}
 800846a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800846c:	4b03      	ldr	r3, [pc, #12]	; (800847c <HAL_RCC_GetHCLKFreq+0x14>)
 800846e:	681b      	ldr	r3, [r3, #0]
}
 8008470:	4618      	mov	r0, r3
 8008472:	46bd      	mov	sp, r7
 8008474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008478:	4770      	bx	lr
 800847a:	bf00      	nop
 800847c:	20000000 	.word	0x20000000

08008480 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008484:	f7ff fff0 	bl	8008468 <HAL_RCC_GetHCLKFreq>
 8008488:	4601      	mov	r1, r0
 800848a:	4b05      	ldr	r3, [pc, #20]	; (80084a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800848c:	689b      	ldr	r3, [r3, #8]
 800848e:	0a9b      	lsrs	r3, r3, #10
 8008490:	f003 0307 	and.w	r3, r3, #7
 8008494:	4a03      	ldr	r2, [pc, #12]	; (80084a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008496:	5cd3      	ldrb	r3, [r2, r3]
 8008498:	fa21 f303 	lsr.w	r3, r1, r3
}
 800849c:	4618      	mov	r0, r3
 800849e:	bd80      	pop	{r7, pc}
 80084a0:	40023800 	.word	0x40023800
 80084a4:	0800dbdc 	.word	0x0800dbdc

080084a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80084ac:	f7ff ffdc 	bl	8008468 <HAL_RCC_GetHCLKFreq>
 80084b0:	4601      	mov	r1, r0
 80084b2:	4b05      	ldr	r3, [pc, #20]	; (80084c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80084b4:	689b      	ldr	r3, [r3, #8]
 80084b6:	0b5b      	lsrs	r3, r3, #13
 80084b8:	f003 0307 	and.w	r3, r3, #7
 80084bc:	4a03      	ldr	r2, [pc, #12]	; (80084cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80084be:	5cd3      	ldrb	r3, [r2, r3]
 80084c0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	bd80      	pop	{r7, pc}
 80084c8:	40023800 	.word	0x40023800
 80084cc:	0800dbdc 	.word	0x0800dbdc

080084d0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80084d0:	b480      	push	{r7}
 80084d2:	b083      	sub	sp, #12
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
 80084d8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	220f      	movs	r2, #15
 80084de:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80084e0:	4b12      	ldr	r3, [pc, #72]	; (800852c <HAL_RCC_GetClockConfig+0x5c>)
 80084e2:	689b      	ldr	r3, [r3, #8]
 80084e4:	f003 0203 	and.w	r2, r3, #3
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80084ec:	4b0f      	ldr	r3, [pc, #60]	; (800852c <HAL_RCC_GetClockConfig+0x5c>)
 80084ee:	689b      	ldr	r3, [r3, #8]
 80084f0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80084f8:	4b0c      	ldr	r3, [pc, #48]	; (800852c <HAL_RCC_GetClockConfig+0x5c>)
 80084fa:	689b      	ldr	r3, [r3, #8]
 80084fc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8008504:	4b09      	ldr	r3, [pc, #36]	; (800852c <HAL_RCC_GetClockConfig+0x5c>)
 8008506:	689b      	ldr	r3, [r3, #8]
 8008508:	08db      	lsrs	r3, r3, #3
 800850a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008512:	4b07      	ldr	r3, [pc, #28]	; (8008530 <HAL_RCC_GetClockConfig+0x60>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f003 020f 	and.w	r2, r3, #15
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	601a      	str	r2, [r3, #0]
}
 800851e:	bf00      	nop
 8008520:	370c      	adds	r7, #12
 8008522:	46bd      	mov	sp, r7
 8008524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008528:	4770      	bx	lr
 800852a:	bf00      	nop
 800852c:	40023800 	.word	0x40023800
 8008530:	40023c00 	.word	0x40023c00

08008534 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b088      	sub	sp, #32
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800853c:	2300      	movs	r3, #0
 800853e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8008540:	2300      	movs	r3, #0
 8008542:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8008544:	2300      	movs	r3, #0
 8008546:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8008548:	2300      	movs	r3, #0
 800854a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800854c:	2300      	movs	r3, #0
 800854e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f003 0301 	and.w	r3, r3, #1
 8008558:	2b00      	cmp	r3, #0
 800855a:	d012      	beq.n	8008582 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800855c:	4b69      	ldr	r3, [pc, #420]	; (8008704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800855e:	689b      	ldr	r3, [r3, #8]
 8008560:	4a68      	ldr	r2, [pc, #416]	; (8008704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008562:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008566:	6093      	str	r3, [r2, #8]
 8008568:	4b66      	ldr	r3, [pc, #408]	; (8008704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800856a:	689a      	ldr	r2, [r3, #8]
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008570:	4964      	ldr	r1, [pc, #400]	; (8008704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008572:	4313      	orrs	r3, r2
 8008574:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800857a:	2b00      	cmp	r3, #0
 800857c:	d101      	bne.n	8008582 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800857e:	2301      	movs	r3, #1
 8008580:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800858a:	2b00      	cmp	r3, #0
 800858c:	d017      	beq.n	80085be <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800858e:	4b5d      	ldr	r3, [pc, #372]	; (8008704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008590:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008594:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800859c:	4959      	ldr	r1, [pc, #356]	; (8008704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800859e:	4313      	orrs	r3, r2
 80085a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80085ac:	d101      	bne.n	80085b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80085ae:	2301      	movs	r3, #1
 80085b0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d101      	bne.n	80085be <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80085ba:	2301      	movs	r3, #1
 80085bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d017      	beq.n	80085fa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80085ca:	4b4e      	ldr	r3, [pc, #312]	; (8008704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80085cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085d0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085d8:	494a      	ldr	r1, [pc, #296]	; (8008704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80085da:	4313      	orrs	r3, r2
 80085dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80085e8:	d101      	bne.n	80085ee <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80085ea:	2301      	movs	r3, #1
 80085ec:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d101      	bne.n	80085fa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80085f6:	2301      	movs	r3, #1
 80085f8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008602:	2b00      	cmp	r3, #0
 8008604:	d001      	beq.n	800860a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8008606:	2301      	movs	r3, #1
 8008608:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f003 0320 	and.w	r3, r3, #32
 8008612:	2b00      	cmp	r3, #0
 8008614:	f000 808b 	beq.w	800872e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008618:	4b3a      	ldr	r3, [pc, #232]	; (8008704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800861a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800861c:	4a39      	ldr	r2, [pc, #228]	; (8008704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800861e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008622:	6413      	str	r3, [r2, #64]	; 0x40
 8008624:	4b37      	ldr	r3, [pc, #220]	; (8008704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008628:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800862c:	60bb      	str	r3, [r7, #8]
 800862e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008630:	4b35      	ldr	r3, [pc, #212]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	4a34      	ldr	r2, [pc, #208]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008636:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800863a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800863c:	f7fa fcd0 	bl	8002fe0 <HAL_GetTick>
 8008640:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008642:	e008      	b.n	8008656 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008644:	f7fa fccc 	bl	8002fe0 <HAL_GetTick>
 8008648:	4602      	mov	r2, r0
 800864a:	697b      	ldr	r3, [r7, #20]
 800864c:	1ad3      	subs	r3, r2, r3
 800864e:	2b64      	cmp	r3, #100	; 0x64
 8008650:	d901      	bls.n	8008656 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8008652:	2303      	movs	r3, #3
 8008654:	e38d      	b.n	8008d72 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008656:	4b2c      	ldr	r3, [pc, #176]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800865e:	2b00      	cmp	r3, #0
 8008660:	d0f0      	beq.n	8008644 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008662:	4b28      	ldr	r3, [pc, #160]	; (8008704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008666:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800866a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800866c:	693b      	ldr	r3, [r7, #16]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d035      	beq.n	80086de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008676:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800867a:	693a      	ldr	r2, [r7, #16]
 800867c:	429a      	cmp	r2, r3
 800867e:	d02e      	beq.n	80086de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008680:	4b20      	ldr	r3, [pc, #128]	; (8008704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008684:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008688:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800868a:	4b1e      	ldr	r3, [pc, #120]	; (8008704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800868c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800868e:	4a1d      	ldr	r2, [pc, #116]	; (8008704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008690:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008694:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008696:	4b1b      	ldr	r3, [pc, #108]	; (8008704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800869a:	4a1a      	ldr	r2, [pc, #104]	; (8008704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800869c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80086a0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80086a2:	4a18      	ldr	r2, [pc, #96]	; (8008704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80086a4:	693b      	ldr	r3, [r7, #16]
 80086a6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80086a8:	4b16      	ldr	r3, [pc, #88]	; (8008704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80086aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086ac:	f003 0301 	and.w	r3, r3, #1
 80086b0:	2b01      	cmp	r3, #1
 80086b2:	d114      	bne.n	80086de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086b4:	f7fa fc94 	bl	8002fe0 <HAL_GetTick>
 80086b8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80086ba:	e00a      	b.n	80086d2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80086bc:	f7fa fc90 	bl	8002fe0 <HAL_GetTick>
 80086c0:	4602      	mov	r2, r0
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	1ad3      	subs	r3, r2, r3
 80086c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80086ca:	4293      	cmp	r3, r2
 80086cc:	d901      	bls.n	80086d2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80086ce:	2303      	movs	r3, #3
 80086d0:	e34f      	b.n	8008d72 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80086d2:	4b0c      	ldr	r3, [pc, #48]	; (8008704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80086d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086d6:	f003 0302 	and.w	r3, r3, #2
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d0ee      	beq.n	80086bc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80086e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80086ea:	d111      	bne.n	8008710 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80086ec:	4b05      	ldr	r3, [pc, #20]	; (8008704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80086ee:	689b      	ldr	r3, [r3, #8]
 80086f0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80086f8:	4b04      	ldr	r3, [pc, #16]	; (800870c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80086fa:	400b      	ands	r3, r1
 80086fc:	4901      	ldr	r1, [pc, #4]	; (8008704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80086fe:	4313      	orrs	r3, r2
 8008700:	608b      	str	r3, [r1, #8]
 8008702:	e00b      	b.n	800871c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8008704:	40023800 	.word	0x40023800
 8008708:	40007000 	.word	0x40007000
 800870c:	0ffffcff 	.word	0x0ffffcff
 8008710:	4bb3      	ldr	r3, [pc, #716]	; (80089e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008712:	689b      	ldr	r3, [r3, #8]
 8008714:	4ab2      	ldr	r2, [pc, #712]	; (80089e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008716:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800871a:	6093      	str	r3, [r2, #8]
 800871c:	4bb0      	ldr	r3, [pc, #704]	; (80089e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800871e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008724:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008728:	49ad      	ldr	r1, [pc, #692]	; (80089e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800872a:	4313      	orrs	r3, r2
 800872c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f003 0310 	and.w	r3, r3, #16
 8008736:	2b00      	cmp	r3, #0
 8008738:	d010      	beq.n	800875c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800873a:	4ba9      	ldr	r3, [pc, #676]	; (80089e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800873c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008740:	4aa7      	ldr	r2, [pc, #668]	; (80089e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008742:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008746:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800874a:	4ba5      	ldr	r3, [pc, #660]	; (80089e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800874c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008754:	49a2      	ldr	r1, [pc, #648]	; (80089e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008756:	4313      	orrs	r3, r2
 8008758:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008764:	2b00      	cmp	r3, #0
 8008766:	d00a      	beq.n	800877e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008768:	4b9d      	ldr	r3, [pc, #628]	; (80089e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800876a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800876e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008776:	499a      	ldr	r1, [pc, #616]	; (80089e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008778:	4313      	orrs	r3, r2
 800877a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008786:	2b00      	cmp	r3, #0
 8008788:	d00a      	beq.n	80087a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800878a:	4b95      	ldr	r3, [pc, #596]	; (80089e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800878c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008790:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008798:	4991      	ldr	r1, [pc, #580]	; (80089e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800879a:	4313      	orrs	r3, r2
 800879c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d00a      	beq.n	80087c2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80087ac:	4b8c      	ldr	r3, [pc, #560]	; (80089e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80087ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087ba:	4989      	ldr	r1, [pc, #548]	; (80089e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80087bc:	4313      	orrs	r3, r2
 80087be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d00a      	beq.n	80087e4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80087ce:	4b84      	ldr	r3, [pc, #528]	; (80089e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80087d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087d4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087dc:	4980      	ldr	r1, [pc, #512]	; (80089e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80087de:	4313      	orrs	r3, r2
 80087e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d00a      	beq.n	8008806 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80087f0:	4b7b      	ldr	r3, [pc, #492]	; (80089e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80087f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087f6:	f023 0203 	bic.w	r2, r3, #3
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087fe:	4978      	ldr	r1, [pc, #480]	; (80089e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008800:	4313      	orrs	r3, r2
 8008802:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800880e:	2b00      	cmp	r3, #0
 8008810:	d00a      	beq.n	8008828 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008812:	4b73      	ldr	r3, [pc, #460]	; (80089e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008814:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008818:	f023 020c 	bic.w	r2, r3, #12
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008820:	496f      	ldr	r1, [pc, #444]	; (80089e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008822:	4313      	orrs	r3, r2
 8008824:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008830:	2b00      	cmp	r3, #0
 8008832:	d00a      	beq.n	800884a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008834:	4b6a      	ldr	r3, [pc, #424]	; (80089e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008836:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800883a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008842:	4967      	ldr	r1, [pc, #412]	; (80089e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008844:	4313      	orrs	r3, r2
 8008846:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008852:	2b00      	cmp	r3, #0
 8008854:	d00a      	beq.n	800886c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008856:	4b62      	ldr	r3, [pc, #392]	; (80089e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008858:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800885c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008864:	495e      	ldr	r1, [pc, #376]	; (80089e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008866:	4313      	orrs	r3, r2
 8008868:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008874:	2b00      	cmp	r3, #0
 8008876:	d00a      	beq.n	800888e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008878:	4b59      	ldr	r3, [pc, #356]	; (80089e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800887a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800887e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008886:	4956      	ldr	r1, [pc, #344]	; (80089e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008888:	4313      	orrs	r3, r2
 800888a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008896:	2b00      	cmp	r3, #0
 8008898:	d00a      	beq.n	80088b0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800889a:	4b51      	ldr	r3, [pc, #324]	; (80089e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800889c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088a0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088a8:	494d      	ldr	r1, [pc, #308]	; (80089e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80088aa:	4313      	orrs	r3, r2
 80088ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d00a      	beq.n	80088d2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80088bc:	4b48      	ldr	r3, [pc, #288]	; (80089e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80088be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088c2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088ca:	4945      	ldr	r1, [pc, #276]	; (80089e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80088cc:	4313      	orrs	r3, r2
 80088ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d00a      	beq.n	80088f4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80088de:	4b40      	ldr	r3, [pc, #256]	; (80089e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80088e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088e4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088ec:	493c      	ldr	r1, [pc, #240]	; (80089e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80088ee:	4313      	orrs	r3, r2
 80088f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d00a      	beq.n	8008916 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008900:	4b37      	ldr	r3, [pc, #220]	; (80089e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008906:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800890e:	4934      	ldr	r1, [pc, #208]	; (80089e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008910:	4313      	orrs	r3, r2
 8008912:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800891e:	2b00      	cmp	r3, #0
 8008920:	d011      	beq.n	8008946 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8008922:	4b2f      	ldr	r3, [pc, #188]	; (80089e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008924:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008928:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008930:	492b      	ldr	r1, [pc, #172]	; (80089e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008932:	4313      	orrs	r3, r2
 8008934:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800893c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008940:	d101      	bne.n	8008946 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8008942:	2301      	movs	r3, #1
 8008944:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f003 0308 	and.w	r3, r3, #8
 800894e:	2b00      	cmp	r3, #0
 8008950:	d001      	beq.n	8008956 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8008952:	2301      	movs	r3, #1
 8008954:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800895e:	2b00      	cmp	r3, #0
 8008960:	d00a      	beq.n	8008978 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008962:	4b1f      	ldr	r3, [pc, #124]	; (80089e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008964:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008968:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008970:	491b      	ldr	r1, [pc, #108]	; (80089e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008972:	4313      	orrs	r3, r2
 8008974:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008980:	2b00      	cmp	r3, #0
 8008982:	d00b      	beq.n	800899c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008984:	4b16      	ldr	r3, [pc, #88]	; (80089e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008986:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800898a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008994:	4912      	ldr	r1, [pc, #72]	; (80089e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008996:	4313      	orrs	r3, r2
 8008998:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d00b      	beq.n	80089c0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80089a8:	4b0d      	ldr	r3, [pc, #52]	; (80089e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80089aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089ae:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80089b8:	4909      	ldr	r1, [pc, #36]	; (80089e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80089ba:	4313      	orrs	r3, r2
 80089bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d00f      	beq.n	80089ec <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80089cc:	4b04      	ldr	r3, [pc, #16]	; (80089e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80089ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80089d2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089dc:	e002      	b.n	80089e4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80089de:	bf00      	nop
 80089e0:	40023800 	.word	0x40023800
 80089e4:	4985      	ldr	r1, [pc, #532]	; (8008bfc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80089e6:	4313      	orrs	r3, r2
 80089e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d00b      	beq.n	8008a10 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80089f8:	4b80      	ldr	r3, [pc, #512]	; (8008bfc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80089fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80089fe:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a08:	497c      	ldr	r1, [pc, #496]	; (8008bfc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008a0a:	4313      	orrs	r3, r2
 8008a0c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8008a10:	69fb      	ldr	r3, [r7, #28]
 8008a12:	2b01      	cmp	r3, #1
 8008a14:	d005      	beq.n	8008a22 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008a1e:	f040 80d6 	bne.w	8008bce <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008a22:	4b76      	ldr	r3, [pc, #472]	; (8008bfc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	4a75      	ldr	r2, [pc, #468]	; (8008bfc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008a28:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008a2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a2e:	f7fa fad7 	bl	8002fe0 <HAL_GetTick>
 8008a32:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008a34:	e008      	b.n	8008a48 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008a36:	f7fa fad3 	bl	8002fe0 <HAL_GetTick>
 8008a3a:	4602      	mov	r2, r0
 8008a3c:	697b      	ldr	r3, [r7, #20]
 8008a3e:	1ad3      	subs	r3, r2, r3
 8008a40:	2b64      	cmp	r3, #100	; 0x64
 8008a42:	d901      	bls.n	8008a48 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008a44:	2303      	movs	r3, #3
 8008a46:	e194      	b.n	8008d72 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008a48:	4b6c      	ldr	r3, [pc, #432]	; (8008bfc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d1f0      	bne.n	8008a36 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f003 0301 	and.w	r3, r3, #1
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d021      	beq.n	8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d11d      	bne.n	8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008a68:	4b64      	ldr	r3, [pc, #400]	; (8008bfc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008a6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a6e:	0c1b      	lsrs	r3, r3, #16
 8008a70:	f003 0303 	and.w	r3, r3, #3
 8008a74:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008a76:	4b61      	ldr	r3, [pc, #388]	; (8008bfc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008a78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a7c:	0e1b      	lsrs	r3, r3, #24
 8008a7e:	f003 030f 	and.w	r3, r3, #15
 8008a82:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	685b      	ldr	r3, [r3, #4]
 8008a88:	019a      	lsls	r2, r3, #6
 8008a8a:	693b      	ldr	r3, [r7, #16]
 8008a8c:	041b      	lsls	r3, r3, #16
 8008a8e:	431a      	orrs	r2, r3
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	061b      	lsls	r3, r3, #24
 8008a94:	431a      	orrs	r2, r3
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	689b      	ldr	r3, [r3, #8]
 8008a9a:	071b      	lsls	r3, r3, #28
 8008a9c:	4957      	ldr	r1, [pc, #348]	; (8008bfc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008a9e:	4313      	orrs	r3, r2
 8008aa0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d004      	beq.n	8008aba <HAL_RCCEx_PeriphCLKConfig+0x586>
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ab4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008ab8:	d00a      	beq.n	8008ad0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d02e      	beq.n	8008b24 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008ace:	d129      	bne.n	8008b24 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008ad0:	4b4a      	ldr	r3, [pc, #296]	; (8008bfc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008ad2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ad6:	0c1b      	lsrs	r3, r3, #16
 8008ad8:	f003 0303 	and.w	r3, r3, #3
 8008adc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008ade:	4b47      	ldr	r3, [pc, #284]	; (8008bfc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008ae0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ae4:	0f1b      	lsrs	r3, r3, #28
 8008ae6:	f003 0307 	and.w	r3, r3, #7
 8008aea:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	685b      	ldr	r3, [r3, #4]
 8008af0:	019a      	lsls	r2, r3, #6
 8008af2:	693b      	ldr	r3, [r7, #16]
 8008af4:	041b      	lsls	r3, r3, #16
 8008af6:	431a      	orrs	r2, r3
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	68db      	ldr	r3, [r3, #12]
 8008afc:	061b      	lsls	r3, r3, #24
 8008afe:	431a      	orrs	r2, r3
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	071b      	lsls	r3, r3, #28
 8008b04:	493d      	ldr	r1, [pc, #244]	; (8008bfc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008b06:	4313      	orrs	r3, r2
 8008b08:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008b0c:	4b3b      	ldr	r3, [pc, #236]	; (8008bfc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008b0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b12:	f023 021f 	bic.w	r2, r3, #31
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b1a:	3b01      	subs	r3, #1
 8008b1c:	4937      	ldr	r1, [pc, #220]	; (8008bfc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008b1e:	4313      	orrs	r3, r2
 8008b20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d01d      	beq.n	8008b6c <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008b30:	4b32      	ldr	r3, [pc, #200]	; (8008bfc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008b32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b36:	0e1b      	lsrs	r3, r3, #24
 8008b38:	f003 030f 	and.w	r3, r3, #15
 8008b3c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008b3e:	4b2f      	ldr	r3, [pc, #188]	; (8008bfc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008b40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b44:	0f1b      	lsrs	r3, r3, #28
 8008b46:	f003 0307 	and.w	r3, r3, #7
 8008b4a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	685b      	ldr	r3, [r3, #4]
 8008b50:	019a      	lsls	r2, r3, #6
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	691b      	ldr	r3, [r3, #16]
 8008b56:	041b      	lsls	r3, r3, #16
 8008b58:	431a      	orrs	r2, r3
 8008b5a:	693b      	ldr	r3, [r7, #16]
 8008b5c:	061b      	lsls	r3, r3, #24
 8008b5e:	431a      	orrs	r2, r3
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	071b      	lsls	r3, r3, #28
 8008b64:	4925      	ldr	r1, [pc, #148]	; (8008bfc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008b66:	4313      	orrs	r3, r2
 8008b68:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d011      	beq.n	8008b9c <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	685b      	ldr	r3, [r3, #4]
 8008b7c:	019a      	lsls	r2, r3, #6
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	691b      	ldr	r3, [r3, #16]
 8008b82:	041b      	lsls	r3, r3, #16
 8008b84:	431a      	orrs	r2, r3
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	68db      	ldr	r3, [r3, #12]
 8008b8a:	061b      	lsls	r3, r3, #24
 8008b8c:	431a      	orrs	r2, r3
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	689b      	ldr	r3, [r3, #8]
 8008b92:	071b      	lsls	r3, r3, #28
 8008b94:	4919      	ldr	r1, [pc, #100]	; (8008bfc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008b96:	4313      	orrs	r3, r2
 8008b98:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008b9c:	4b17      	ldr	r3, [pc, #92]	; (8008bfc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	4a16      	ldr	r2, [pc, #88]	; (8008bfc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008ba2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008ba6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008ba8:	f7fa fa1a 	bl	8002fe0 <HAL_GetTick>
 8008bac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008bae:	e008      	b.n	8008bc2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008bb0:	f7fa fa16 	bl	8002fe0 <HAL_GetTick>
 8008bb4:	4602      	mov	r2, r0
 8008bb6:	697b      	ldr	r3, [r7, #20]
 8008bb8:	1ad3      	subs	r3, r2, r3
 8008bba:	2b64      	cmp	r3, #100	; 0x64
 8008bbc:	d901      	bls.n	8008bc2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008bbe:	2303      	movs	r3, #3
 8008bc0:	e0d7      	b.n	8008d72 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008bc2:	4b0e      	ldr	r3, [pc, #56]	; (8008bfc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d0f0      	beq.n	8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8008bce:	69bb      	ldr	r3, [r7, #24]
 8008bd0:	2b01      	cmp	r3, #1
 8008bd2:	f040 80cd 	bne.w	8008d70 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008bd6:	4b09      	ldr	r3, [pc, #36]	; (8008bfc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	4a08      	ldr	r2, [pc, #32]	; (8008bfc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008bdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008be0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008be2:	f7fa f9fd 	bl	8002fe0 <HAL_GetTick>
 8008be6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008be8:	e00a      	b.n	8008c00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008bea:	f7fa f9f9 	bl	8002fe0 <HAL_GetTick>
 8008bee:	4602      	mov	r2, r0
 8008bf0:	697b      	ldr	r3, [r7, #20]
 8008bf2:	1ad3      	subs	r3, r2, r3
 8008bf4:	2b64      	cmp	r3, #100	; 0x64
 8008bf6:	d903      	bls.n	8008c00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008bf8:	2303      	movs	r3, #3
 8008bfa:	e0ba      	b.n	8008d72 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8008bfc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008c00:	4b5e      	ldr	r3, [pc, #376]	; (8008d7c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008c08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c0c:	d0ed      	beq.n	8008bea <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d003      	beq.n	8008c22 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d009      	beq.n	8008c36 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d02e      	beq.n	8008c8c <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d12a      	bne.n	8008c8c <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008c36:	4b51      	ldr	r3, [pc, #324]	; (8008d7c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c3c:	0c1b      	lsrs	r3, r3, #16
 8008c3e:	f003 0303 	and.w	r3, r3, #3
 8008c42:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008c44:	4b4d      	ldr	r3, [pc, #308]	; (8008d7c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c4a:	0f1b      	lsrs	r3, r3, #28
 8008c4c:	f003 0307 	and.w	r3, r3, #7
 8008c50:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	695b      	ldr	r3, [r3, #20]
 8008c56:	019a      	lsls	r2, r3, #6
 8008c58:	693b      	ldr	r3, [r7, #16]
 8008c5a:	041b      	lsls	r3, r3, #16
 8008c5c:	431a      	orrs	r2, r3
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	699b      	ldr	r3, [r3, #24]
 8008c62:	061b      	lsls	r3, r3, #24
 8008c64:	431a      	orrs	r2, r3
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	071b      	lsls	r3, r3, #28
 8008c6a:	4944      	ldr	r1, [pc, #272]	; (8008d7c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008c6c:	4313      	orrs	r3, r2
 8008c6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008c72:	4b42      	ldr	r3, [pc, #264]	; (8008d7c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008c74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c78:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c80:	3b01      	subs	r3, #1
 8008c82:	021b      	lsls	r3, r3, #8
 8008c84:	493d      	ldr	r1, [pc, #244]	; (8008d7c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008c86:	4313      	orrs	r3, r2
 8008c88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d022      	beq.n	8008cde <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008c9c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008ca0:	d11d      	bne.n	8008cde <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008ca2:	4b36      	ldr	r3, [pc, #216]	; (8008d7c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ca8:	0e1b      	lsrs	r3, r3, #24
 8008caa:	f003 030f 	and.w	r3, r3, #15
 8008cae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008cb0:	4b32      	ldr	r3, [pc, #200]	; (8008d7c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cb6:	0f1b      	lsrs	r3, r3, #28
 8008cb8:	f003 0307 	and.w	r3, r3, #7
 8008cbc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	695b      	ldr	r3, [r3, #20]
 8008cc2:	019a      	lsls	r2, r3, #6
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	6a1b      	ldr	r3, [r3, #32]
 8008cc8:	041b      	lsls	r3, r3, #16
 8008cca:	431a      	orrs	r2, r3
 8008ccc:	693b      	ldr	r3, [r7, #16]
 8008cce:	061b      	lsls	r3, r3, #24
 8008cd0:	431a      	orrs	r2, r3
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	071b      	lsls	r3, r3, #28
 8008cd6:	4929      	ldr	r1, [pc, #164]	; (8008d7c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008cd8:	4313      	orrs	r3, r2
 8008cda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f003 0308 	and.w	r3, r3, #8
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d028      	beq.n	8008d3c <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008cea:	4b24      	ldr	r3, [pc, #144]	; (8008d7c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cf0:	0e1b      	lsrs	r3, r3, #24
 8008cf2:	f003 030f 	and.w	r3, r3, #15
 8008cf6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008cf8:	4b20      	ldr	r3, [pc, #128]	; (8008d7c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cfe:	0c1b      	lsrs	r3, r3, #16
 8008d00:	f003 0303 	and.w	r3, r3, #3
 8008d04:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	695b      	ldr	r3, [r3, #20]
 8008d0a:	019a      	lsls	r2, r3, #6
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	041b      	lsls	r3, r3, #16
 8008d10:	431a      	orrs	r2, r3
 8008d12:	693b      	ldr	r3, [r7, #16]
 8008d14:	061b      	lsls	r3, r3, #24
 8008d16:	431a      	orrs	r2, r3
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	69db      	ldr	r3, [r3, #28]
 8008d1c:	071b      	lsls	r3, r3, #28
 8008d1e:	4917      	ldr	r1, [pc, #92]	; (8008d7c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008d20:	4313      	orrs	r3, r2
 8008d22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008d26:	4b15      	ldr	r3, [pc, #84]	; (8008d7c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008d28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d2c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d34:	4911      	ldr	r1, [pc, #68]	; (8008d7c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008d36:	4313      	orrs	r3, r2
 8008d38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008d3c:	4b0f      	ldr	r3, [pc, #60]	; (8008d7c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	4a0e      	ldr	r2, [pc, #56]	; (8008d7c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008d42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d48:	f7fa f94a 	bl	8002fe0 <HAL_GetTick>
 8008d4c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008d4e:	e008      	b.n	8008d62 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008d50:	f7fa f946 	bl	8002fe0 <HAL_GetTick>
 8008d54:	4602      	mov	r2, r0
 8008d56:	697b      	ldr	r3, [r7, #20]
 8008d58:	1ad3      	subs	r3, r2, r3
 8008d5a:	2b64      	cmp	r3, #100	; 0x64
 8008d5c:	d901      	bls.n	8008d62 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008d5e:	2303      	movs	r3, #3
 8008d60:	e007      	b.n	8008d72 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008d62:	4b06      	ldr	r3, [pc, #24]	; (8008d7c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008d6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d6e:	d1ef      	bne.n	8008d50 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8008d70:	2300      	movs	r3, #0
}
 8008d72:	4618      	mov	r0, r3
 8008d74:	3720      	adds	r7, #32
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bd80      	pop	{r7, pc}
 8008d7a:	bf00      	nop
 8008d7c:	40023800 	.word	0x40023800

08008d80 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008d80:	b480      	push	{r7}
 8008d82:	b087      	sub	sp, #28
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8008d88:	2300      	movs	r3, #0
 8008d8a:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8008d90:	2300      	movs	r3, #0
 8008d92:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8008d94:	2300      	movs	r3, #0
 8008d96:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008d9e:	f040 8099 	bne.w	8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
  {
    saiclocksource = RCC->DCKCFGR1;
 8008da2:	4ba0      	ldr	r3, [pc, #640]	; (8009024 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008da4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008da8:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8008daa:	68bb      	ldr	r3, [r7, #8]
 8008dac:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8008db0:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8008db2:	68bb      	ldr	r3, [r7, #8]
 8008db4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008db8:	d045      	beq.n	8008e46 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
 8008dba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008dbe:	d802      	bhi.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d007      	beq.n	8008dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8008dc4:	e087      	b.n	8008ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
    switch (saiclocksource)
 8008dc6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008dca:	d074      	beq.n	8008eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x136>
 8008dcc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008dd0:	d074      	beq.n	8008ebc <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 8008dd2:	e080      	b.n	8008ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008dd4:	4b93      	ldr	r3, [pc, #588]	; (8009024 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008dd6:	685b      	ldr	r3, [r3, #4]
 8008dd8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d108      	bne.n	8008df2 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008de0:	4b90      	ldr	r3, [pc, #576]	; (8009024 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008de2:	685b      	ldr	r3, [r3, #4]
 8008de4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008de8:	4a8f      	ldr	r2, [pc, #572]	; (8009028 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8008dea:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dee:	613b      	str	r3, [r7, #16]
 8008df0:	e007      	b.n	8008e02 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008df2:	4b8c      	ldr	r3, [pc, #560]	; (8009024 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008df4:	685b      	ldr	r3, [r3, #4]
 8008df6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008dfa:	4a8c      	ldr	r2, [pc, #560]	; (800902c <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>)
 8008dfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e00:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8008e02:	4b88      	ldr	r3, [pc, #544]	; (8009024 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e08:	0e1b      	lsrs	r3, r3, #24
 8008e0a:	f003 030f 	and.w	r3, r3, #15
 8008e0e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8008e10:	4b84      	ldr	r3, [pc, #528]	; (8009024 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e16:	099b      	lsrs	r3, r3, #6
 8008e18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e1c:	693a      	ldr	r2, [r7, #16]
 8008e1e:	fb02 f203 	mul.w	r2, r2, r3
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e28:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8008e2a:	4b7e      	ldr	r3, [pc, #504]	; (8009024 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008e2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e30:	0a1b      	lsrs	r3, r3, #8
 8008e32:	f003 031f 	and.w	r3, r3, #31
 8008e36:	3301      	adds	r3, #1
 8008e38:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008e3a:	697a      	ldr	r2, [r7, #20]
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e42:	617b      	str	r3, [r7, #20]
        break;
 8008e44:	e047      	b.n	8008ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008e46:	4b77      	ldr	r3, [pc, #476]	; (8009024 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008e48:	685b      	ldr	r3, [r3, #4]
 8008e4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d108      	bne.n	8008e64 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008e52:	4b74      	ldr	r3, [pc, #464]	; (8009024 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008e54:	685b      	ldr	r3, [r3, #4]
 8008e56:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008e5a:	4a73      	ldr	r2, [pc, #460]	; (8009028 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8008e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e60:	613b      	str	r3, [r7, #16]
 8008e62:	e007      	b.n	8008e74 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008e64:	4b6f      	ldr	r3, [pc, #444]	; (8009024 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008e66:	685b      	ldr	r3, [r3, #4]
 8008e68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008e6c:	4a6f      	ldr	r2, [pc, #444]	; (800902c <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>)
 8008e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e72:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8008e74:	4b6b      	ldr	r3, [pc, #428]	; (8009024 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008e76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e7a:	0e1b      	lsrs	r3, r3, #24
 8008e7c:	f003 030f 	and.w	r3, r3, #15
 8008e80:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8008e82:	4b68      	ldr	r3, [pc, #416]	; (8009024 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008e84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e88:	099b      	lsrs	r3, r3, #6
 8008e8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e8e:	693a      	ldr	r2, [r7, #16]
 8008e90:	fb02 f203 	mul.w	r2, r2, r3
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e9a:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8008e9c:	4b61      	ldr	r3, [pc, #388]	; (8009024 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008e9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008ea2:	f003 031f 	and.w	r3, r3, #31
 8008ea6:	3301      	adds	r3, #1
 8008ea8:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008eaa:	697a      	ldr	r2, [r7, #20]
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8008eb2:	617b      	str	r3, [r7, #20]
        break;
 8008eb4:	e00f      	b.n	8008ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
        frequency = EXTERNAL_CLOCK_VALUE;
 8008eb6:	4b5e      	ldr	r3, [pc, #376]	; (8009030 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 8008eb8:	617b      	str	r3, [r7, #20]
        break;
 8008eba:	e00c      	b.n	8008ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008ebc:	4b59      	ldr	r3, [pc, #356]	; (8009024 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008ebe:	685b      	ldr	r3, [r3, #4]
 8008ec0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d102      	bne.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x14e>
          frequency = HSI_VALUE;
 8008ec8:	4b57      	ldr	r3, [pc, #348]	; (8009028 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8008eca:	617b      	str	r3, [r7, #20]
        break;
 8008ecc:	e003      	b.n	8008ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
          frequency = HSE_VALUE;
 8008ece:	4b57      	ldr	r3, [pc, #348]	; (800902c <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>)
 8008ed0:	617b      	str	r3, [r7, #20]
        break;
 8008ed2:	e000      	b.n	8008ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      }
    }
  }
 8008ed4:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008edc:	f040 8099 	bne.w	8009012 <HAL_RCCEx_GetPeriphCLKFreq+0x292>
  {
    saiclocksource = RCC->DCKCFGR1;
 8008ee0:	4b50      	ldr	r3, [pc, #320]	; (8009024 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008ee2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008ee6:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8008ee8:	68bb      	ldr	r3, [r7, #8]
 8008eea:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8008eee:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008ef6:	d045      	beq.n	8008f84 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
 8008ef8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008efc:	d802      	bhi.n	8008f04 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d007      	beq.n	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x192>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8008f02:	e087      	b.n	8009014 <HAL_RCCEx_GetPeriphCLKFreq+0x294>
    switch (saiclocksource)
 8008f04:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008f08:	d074      	beq.n	8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8008f0a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008f0e:	d074      	beq.n	8008ffa <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
        break;
 8008f10:	e080      	b.n	8009014 <HAL_RCCEx_GetPeriphCLKFreq+0x294>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008f12:	4b44      	ldr	r3, [pc, #272]	; (8009024 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008f14:	685b      	ldr	r3, [r3, #4]
 8008f16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d108      	bne.n	8008f30 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008f1e:	4b41      	ldr	r3, [pc, #260]	; (8009024 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008f20:	685b      	ldr	r3, [r3, #4]
 8008f22:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008f26:	4a40      	ldr	r2, [pc, #256]	; (8009028 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8008f28:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f2c:	613b      	str	r3, [r7, #16]
 8008f2e:	e007      	b.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008f30:	4b3c      	ldr	r3, [pc, #240]	; (8009024 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008f32:	685b      	ldr	r3, [r3, #4]
 8008f34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008f38:	4a3c      	ldr	r2, [pc, #240]	; (800902c <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>)
 8008f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f3e:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8008f40:	4b38      	ldr	r3, [pc, #224]	; (8009024 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f46:	0e1b      	lsrs	r3, r3, #24
 8008f48:	f003 030f 	and.w	r3, r3, #15
 8008f4c:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8008f4e:	4b35      	ldr	r3, [pc, #212]	; (8009024 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f54:	099b      	lsrs	r3, r3, #6
 8008f56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f5a:	693a      	ldr	r2, [r7, #16]
 8008f5c:	fb02 f203 	mul.w	r2, r2, r3
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f66:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8008f68:	4b2e      	ldr	r3, [pc, #184]	; (8009024 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008f6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f6e:	0a1b      	lsrs	r3, r3, #8
 8008f70:	f003 031f 	and.w	r3, r3, #31
 8008f74:	3301      	adds	r3, #1
 8008f76:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008f78:	697a      	ldr	r2, [r7, #20]
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f80:	617b      	str	r3, [r7, #20]
        break;
 8008f82:	e047      	b.n	8009014 <HAL_RCCEx_GetPeriphCLKFreq+0x294>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008f84:	4b27      	ldr	r3, [pc, #156]	; (8009024 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008f86:	685b      	ldr	r3, [r3, #4]
 8008f88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d108      	bne.n	8008fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x222>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008f90:	4b24      	ldr	r3, [pc, #144]	; (8009024 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008f92:	685b      	ldr	r3, [r3, #4]
 8008f94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008f98:	4a23      	ldr	r2, [pc, #140]	; (8009028 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8008f9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f9e:	613b      	str	r3, [r7, #16]
 8008fa0:	e007      	b.n	8008fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x232>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008fa2:	4b20      	ldr	r3, [pc, #128]	; (8009024 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008fa4:	685b      	ldr	r3, [r3, #4]
 8008fa6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008faa:	4a20      	ldr	r2, [pc, #128]	; (800902c <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>)
 8008fac:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fb0:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8008fb2:	4b1c      	ldr	r3, [pc, #112]	; (8009024 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008fb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008fb8:	0e1b      	lsrs	r3, r3, #24
 8008fba:	f003 030f 	and.w	r3, r3, #15
 8008fbe:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8008fc0:	4b18      	ldr	r3, [pc, #96]	; (8009024 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008fc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008fc6:	099b      	lsrs	r3, r3, #6
 8008fc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fcc:	693a      	ldr	r2, [r7, #16]
 8008fce:	fb02 f203 	mul.w	r2, r2, r3
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fd8:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8008fda:	4b12      	ldr	r3, [pc, #72]	; (8009024 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008fdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008fe0:	f003 031f 	and.w	r3, r3, #31
 8008fe4:	3301      	adds	r3, #1
 8008fe6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008fe8:	697a      	ldr	r2, [r7, #20]
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ff0:	617b      	str	r3, [r7, #20]
        break;
 8008ff2:	e00f      	b.n	8009014 <HAL_RCCEx_GetPeriphCLKFreq+0x294>
        frequency = EXTERNAL_CLOCK_VALUE;
 8008ff4:	4b0e      	ldr	r3, [pc, #56]	; (8009030 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 8008ff6:	617b      	str	r3, [r7, #20]
        break;
 8008ff8:	e00c      	b.n	8009014 <HAL_RCCEx_GetPeriphCLKFreq+0x294>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008ffa:	4b0a      	ldr	r3, [pc, #40]	; (8009024 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008ffc:	685b      	ldr	r3, [r3, #4]
 8008ffe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009002:	2b00      	cmp	r3, #0
 8009004:	d102      	bne.n	800900c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
          frequency = HSI_VALUE;
 8009006:	4b08      	ldr	r3, [pc, #32]	; (8009028 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8009008:	617b      	str	r3, [r7, #20]
        break;
 800900a:	e003      	b.n	8009014 <HAL_RCCEx_GetPeriphCLKFreq+0x294>
          frequency = HSE_VALUE;
 800900c:	4b07      	ldr	r3, [pc, #28]	; (800902c <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>)
 800900e:	617b      	str	r3, [r7, #20]
        break;
 8009010:	e000      	b.n	8009014 <HAL_RCCEx_GetPeriphCLKFreq+0x294>
      }
    }
  }
 8009012:	bf00      	nop

  return frequency;
 8009014:	697b      	ldr	r3, [r7, #20]
}
 8009016:	4618      	mov	r0, r3
 8009018:	371c      	adds	r7, #28
 800901a:	46bd      	mov	sp, r7
 800901c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009020:	4770      	bx	lr
 8009022:	bf00      	nop
 8009024:	40023800 	.word	0x40023800
 8009028:	00f42400 	.word	0x00f42400
 800902c:	017d7840 	.word	0x017d7840
 8009030:	00bb8000 	.word	0x00bb8000

08009034 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b082      	sub	sp, #8
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d101      	bne.n	8009046 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8009042:	2301      	movs	r3, #1
 8009044:	e06b      	b.n	800911e <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	7f5b      	ldrb	r3, [r3, #29]
 800904a:	b2db      	uxtb	r3, r3
 800904c:	2b00      	cmp	r3, #0
 800904e:	d105      	bne.n	800905c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2200      	movs	r2, #0
 8009054:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	f7f9 f93a 	bl	80022d0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2202      	movs	r2, #2
 8009060:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	22ca      	movs	r2, #202	; 0xca
 8009068:	625a      	str	r2, [r3, #36]	; 0x24
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	2253      	movs	r2, #83	; 0x53
 8009070:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8009072:	6878      	ldr	r0, [r7, #4]
 8009074:	f000 fb00 	bl	8009678 <RTC_EnterInitMode>
 8009078:	4603      	mov	r3, r0
 800907a:	2b00      	cmp	r3, #0
 800907c:	d008      	beq.n	8009090 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	22ff      	movs	r2, #255	; 0xff
 8009084:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	2204      	movs	r2, #4
 800908a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800908c:	2301      	movs	r3, #1
 800908e:	e046      	b.n	800911e <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	6899      	ldr	r1, [r3, #8]
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681a      	ldr	r2, [r3, #0]
 800909a:	4b23      	ldr	r3, [pc, #140]	; (8009128 <HAL_RTC_Init+0xf4>)
 800909c:	400b      	ands	r3, r1
 800909e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	6899      	ldr	r1, [r3, #8]
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	685a      	ldr	r2, [r3, #4]
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	691b      	ldr	r3, [r3, #16]
 80090ae:	431a      	orrs	r2, r3
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	695b      	ldr	r3, [r3, #20]
 80090b4:	431a      	orrs	r2, r3
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	430a      	orrs	r2, r1
 80090bc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	687a      	ldr	r2, [r7, #4]
 80090c4:	68d2      	ldr	r2, [r2, #12]
 80090c6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	6919      	ldr	r1, [r3, #16]
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	689b      	ldr	r3, [r3, #8]
 80090d2:	041a      	lsls	r2, r3, #16
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	430a      	orrs	r2, r1
 80090da:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	68da      	ldr	r2, [r3, #12]
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80090ea:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f022 0208 	bic.w	r2, r2, #8
 80090fa:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	699a      	ldr	r2, [r3, #24]
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	430a      	orrs	r2, r1
 800910c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	22ff      	movs	r2, #255	; 0xff
 8009114:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2201      	movs	r2, #1
 800911a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800911c:	2300      	movs	r3, #0
  }
}
 800911e:	4618      	mov	r0, r3
 8009120:	3708      	adds	r7, #8
 8009122:	46bd      	mov	sp, r7
 8009124:	bd80      	pop	{r7, pc}
 8009126:	bf00      	nop
 8009128:	ff8fffbf 	.word	0xff8fffbf

0800912c <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800912c:	b590      	push	{r4, r7, lr}
 800912e:	b087      	sub	sp, #28
 8009130:	af00      	add	r7, sp, #0
 8009132:	60f8      	str	r0, [r7, #12]
 8009134:	60b9      	str	r1, [r7, #8]
 8009136:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8009138:	2300      	movs	r3, #0
 800913a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	7f1b      	ldrb	r3, [r3, #28]
 8009140:	2b01      	cmp	r3, #1
 8009142:	d101      	bne.n	8009148 <HAL_RTC_SetTime+0x1c>
 8009144:	2302      	movs	r3, #2
 8009146:	e0a8      	b.n	800929a <HAL_RTC_SetTime+0x16e>
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	2201      	movs	r2, #1
 800914c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	2202      	movs	r2, #2
 8009152:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d126      	bne.n	80091a8 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	689b      	ldr	r3, [r3, #8]
 8009160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009164:	2b00      	cmp	r3, #0
 8009166:	d102      	bne.n	800916e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	2200      	movs	r2, #0
 800916c:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800916e:	68bb      	ldr	r3, [r7, #8]
 8009170:	781b      	ldrb	r3, [r3, #0]
 8009172:	4618      	mov	r0, r3
 8009174:	f000 faac 	bl	80096d0 <RTC_ByteToBcd2>
 8009178:	4603      	mov	r3, r0
 800917a:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800917c:	68bb      	ldr	r3, [r7, #8]
 800917e:	785b      	ldrb	r3, [r3, #1]
 8009180:	4618      	mov	r0, r3
 8009182:	f000 faa5 	bl	80096d0 <RTC_ByteToBcd2>
 8009186:	4603      	mov	r3, r0
 8009188:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800918a:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800918c:	68bb      	ldr	r3, [r7, #8]
 800918e:	789b      	ldrb	r3, [r3, #2]
 8009190:	4618      	mov	r0, r3
 8009192:	f000 fa9d 	bl	80096d0 <RTC_ByteToBcd2>
 8009196:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8009198:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	7b1b      	ldrb	r3, [r3, #12]
 80091a0:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80091a2:	4313      	orrs	r3, r2
 80091a4:	617b      	str	r3, [r7, #20]
 80091a6:	e018      	b.n	80091da <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	689b      	ldr	r3, [r3, #8]
 80091ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d102      	bne.n	80091bc <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	2200      	movs	r2, #0
 80091ba:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	781b      	ldrb	r3, [r3, #0]
 80091c0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	785b      	ldrb	r3, [r3, #1]
 80091c6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80091c8:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80091ca:	68ba      	ldr	r2, [r7, #8]
 80091cc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 80091ce:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	7b1b      	ldrb	r3, [r3, #12]
 80091d4:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80091d6:	4313      	orrs	r3, r2
 80091d8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	22ca      	movs	r2, #202	; 0xca
 80091e0:	625a      	str	r2, [r3, #36]	; 0x24
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	2253      	movs	r2, #83	; 0x53
 80091e8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80091ea:	68f8      	ldr	r0, [r7, #12]
 80091ec:	f000 fa44 	bl	8009678 <RTC_EnterInitMode>
 80091f0:	4603      	mov	r3, r0
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d00b      	beq.n	800920e <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	22ff      	movs	r2, #255	; 0xff
 80091fc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	2204      	movs	r2, #4
 8009202:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	2200      	movs	r2, #0
 8009208:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800920a:	2301      	movs	r3, #1
 800920c:	e045      	b.n	800929a <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	681a      	ldr	r2, [r3, #0]
 8009212:	6979      	ldr	r1, [r7, #20]
 8009214:	4b23      	ldr	r3, [pc, #140]	; (80092a4 <HAL_RTC_SetTime+0x178>)
 8009216:	400b      	ands	r3, r1
 8009218:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	689a      	ldr	r2, [r3, #8]
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009228:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	6899      	ldr	r1, [r3, #8]
 8009230:	68bb      	ldr	r3, [r7, #8]
 8009232:	691a      	ldr	r2, [r3, #16]
 8009234:	68bb      	ldr	r3, [r7, #8]
 8009236:	695b      	ldr	r3, [r3, #20]
 8009238:	431a      	orrs	r2, r3
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	430a      	orrs	r2, r1
 8009240:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	68da      	ldr	r2, [r3, #12]
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009250:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	689b      	ldr	r3, [r3, #8]
 8009258:	f003 0320 	and.w	r3, r3, #32
 800925c:	2b00      	cmp	r3, #0
 800925e:	d111      	bne.n	8009284 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009260:	68f8      	ldr	r0, [r7, #12]
 8009262:	f000 f9e1 	bl	8009628 <HAL_RTC_WaitForSynchro>
 8009266:	4603      	mov	r3, r0
 8009268:	2b00      	cmp	r3, #0
 800926a:	d00b      	beq.n	8009284 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	22ff      	movs	r2, #255	; 0xff
 8009272:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	2204      	movs	r2, #4
 8009278:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	2200      	movs	r2, #0
 800927e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8009280:	2301      	movs	r3, #1
 8009282:	e00a      	b.n	800929a <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	22ff      	movs	r2, #255	; 0xff
 800928a:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	2201      	movs	r2, #1
 8009290:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	2200      	movs	r2, #0
 8009296:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8009298:	2300      	movs	r3, #0
  }
}
 800929a:	4618      	mov	r0, r3
 800929c:	371c      	adds	r7, #28
 800929e:	46bd      	mov	sp, r7
 80092a0:	bd90      	pop	{r4, r7, pc}
 80092a2:	bf00      	nop
 80092a4:	007f7f7f 	.word	0x007f7f7f

080092a8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80092a8:	b590      	push	{r4, r7, lr}
 80092aa:	b087      	sub	sp, #28
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	60f8      	str	r0, [r7, #12]
 80092b0:	60b9      	str	r1, [r7, #8]
 80092b2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 80092b4:	2300      	movs	r3, #0
 80092b6:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	7f1b      	ldrb	r3, [r3, #28]
 80092bc:	2b01      	cmp	r3, #1
 80092be:	d101      	bne.n	80092c4 <HAL_RTC_SetDate+0x1c>
 80092c0:	2302      	movs	r3, #2
 80092c2:	e092      	b.n	80093ea <HAL_RTC_SetDate+0x142>
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	2201      	movs	r2, #1
 80092c8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	2202      	movs	r2, #2
 80092ce:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d10e      	bne.n	80092f4 <HAL_RTC_SetDate+0x4c>
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	785b      	ldrb	r3, [r3, #1]
 80092da:	f003 0310 	and.w	r3, r3, #16
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d008      	beq.n	80092f4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80092e2:	68bb      	ldr	r3, [r7, #8]
 80092e4:	785b      	ldrb	r3, [r3, #1]
 80092e6:	f023 0310 	bic.w	r3, r3, #16
 80092ea:	b2db      	uxtb	r3, r3
 80092ec:	330a      	adds	r3, #10
 80092ee:	b2da      	uxtb	r2, r3
 80092f0:	68bb      	ldr	r3, [r7, #8]
 80092f2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d11c      	bne.n	8009334 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	78db      	ldrb	r3, [r3, #3]
 80092fe:	4618      	mov	r0, r3
 8009300:	f000 f9e6 	bl	80096d0 <RTC_ByteToBcd2>
 8009304:	4603      	mov	r3, r0
 8009306:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	785b      	ldrb	r3, [r3, #1]
 800930c:	4618      	mov	r0, r3
 800930e:	f000 f9df 	bl	80096d0 <RTC_ByteToBcd2>
 8009312:	4603      	mov	r3, r0
 8009314:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8009316:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	789b      	ldrb	r3, [r3, #2]
 800931c:	4618      	mov	r0, r3
 800931e:	f000 f9d7 	bl	80096d0 <RTC_ByteToBcd2>
 8009322:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8009324:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8009328:	68bb      	ldr	r3, [r7, #8]
 800932a:	781b      	ldrb	r3, [r3, #0]
 800932c:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800932e:	4313      	orrs	r3, r2
 8009330:	617b      	str	r3, [r7, #20]
 8009332:	e00e      	b.n	8009352 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	78db      	ldrb	r3, [r3, #3]
 8009338:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 800933a:	68bb      	ldr	r3, [r7, #8]
 800933c:	785b      	ldrb	r3, [r3, #1]
 800933e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8009340:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8009342:	68ba      	ldr	r2, [r7, #8]
 8009344:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8009346:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8009348:	68bb      	ldr	r3, [r7, #8]
 800934a:	781b      	ldrb	r3, [r3, #0]
 800934c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800934e:	4313      	orrs	r3, r2
 8009350:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	22ca      	movs	r2, #202	; 0xca
 8009358:	625a      	str	r2, [r3, #36]	; 0x24
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	2253      	movs	r2, #83	; 0x53
 8009360:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8009362:	68f8      	ldr	r0, [r7, #12]
 8009364:	f000 f988 	bl	8009678 <RTC_EnterInitMode>
 8009368:	4603      	mov	r3, r0
 800936a:	2b00      	cmp	r3, #0
 800936c:	d00b      	beq.n	8009386 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	22ff      	movs	r2, #255	; 0xff
 8009374:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	2204      	movs	r2, #4
 800937a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	2200      	movs	r2, #0
 8009380:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8009382:	2301      	movs	r3, #1
 8009384:	e031      	b.n	80093ea <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	681a      	ldr	r2, [r3, #0]
 800938a:	6979      	ldr	r1, [r7, #20]
 800938c:	4b19      	ldr	r3, [pc, #100]	; (80093f4 <HAL_RTC_SetDate+0x14c>)
 800938e:	400b      	ands	r3, r1
 8009390:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	68da      	ldr	r2, [r3, #12]
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80093a0:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	689b      	ldr	r3, [r3, #8]
 80093a8:	f003 0320 	and.w	r3, r3, #32
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d111      	bne.n	80093d4 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80093b0:	68f8      	ldr	r0, [r7, #12]
 80093b2:	f000 f939 	bl	8009628 <HAL_RTC_WaitForSynchro>
 80093b6:	4603      	mov	r3, r0
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d00b      	beq.n	80093d4 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	22ff      	movs	r2, #255	; 0xff
 80093c2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	2204      	movs	r2, #4
 80093c8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	2200      	movs	r2, #0
 80093ce:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80093d0:	2301      	movs	r3, #1
 80093d2:	e00a      	b.n	80093ea <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	22ff      	movs	r2, #255	; 0xff
 80093da:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	2201      	movs	r2, #1
 80093e0:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	2200      	movs	r2, #0
 80093e6:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80093e8:	2300      	movs	r3, #0
  }
}
 80093ea:	4618      	mov	r0, r3
 80093ec:	371c      	adds	r7, #28
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bd90      	pop	{r4, r7, pc}
 80093f2:	bf00      	nop
 80093f4:	00ffff3f 	.word	0x00ffff3f

080093f8 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80093f8:	b590      	push	{r4, r7, lr}
 80093fa:	b089      	sub	sp, #36	; 0x24
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	60f8      	str	r0, [r7, #12]
 8009400:	60b9      	str	r1, [r7, #8]
 8009402:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8009404:	2300      	movs	r3, #0
 8009406:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 8009408:	2300      	movs	r3, #0
 800940a:	61fb      	str	r3, [r7, #28]
 800940c:	2300      	movs	r3, #0
 800940e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	7f1b      	ldrb	r3, [r3, #28]
 8009414:	2b01      	cmp	r3, #1
 8009416:	d101      	bne.n	800941c <HAL_RTC_SetAlarm+0x24>
 8009418:	2302      	movs	r3, #2
 800941a:	e101      	b.n	8009620 <HAL_RTC_SetAlarm+0x228>
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	2201      	movs	r2, #1
 8009420:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	2202      	movs	r2, #2
 8009426:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d137      	bne.n	800949e <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	689b      	ldr	r3, [r3, #8]
 8009434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009438:	2b00      	cmp	r3, #0
 800943a:	d102      	bne.n	8009442 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800943c:	68bb      	ldr	r3, [r7, #8]
 800943e:	2200      	movs	r2, #0
 8009440:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8009442:	68bb      	ldr	r3, [r7, #8]
 8009444:	781b      	ldrb	r3, [r3, #0]
 8009446:	4618      	mov	r0, r3
 8009448:	f000 f942 	bl	80096d0 <RTC_ByteToBcd2>
 800944c:	4603      	mov	r3, r0
 800944e:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8009450:	68bb      	ldr	r3, [r7, #8]
 8009452:	785b      	ldrb	r3, [r3, #1]
 8009454:	4618      	mov	r0, r3
 8009456:	f000 f93b 	bl	80096d0 <RTC_ByteToBcd2>
 800945a:	4603      	mov	r3, r0
 800945c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800945e:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8009460:	68bb      	ldr	r3, [r7, #8]
 8009462:	789b      	ldrb	r3, [r3, #2]
 8009464:	4618      	mov	r0, r3
 8009466:	f000 f933 	bl	80096d0 <RTC_ByteToBcd2>
 800946a:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800946c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	7b1b      	ldrb	r3, [r3, #12]
 8009474:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8009476:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800947a:	68bb      	ldr	r3, [r7, #8]
 800947c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009480:	4618      	mov	r0, r3
 8009482:	f000 f925 	bl	80096d0 <RTC_ByteToBcd2>
 8009486:	4603      	mov	r3, r0
 8009488:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800948a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800948e:	68bb      	ldr	r3, [r7, #8]
 8009490:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8009492:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8009498:	4313      	orrs	r3, r2
 800949a:	61fb      	str	r3, [r7, #28]
 800949c:	e023      	b.n	80094e6 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	689b      	ldr	r3, [r3, #8]
 80094a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d102      	bne.n	80094b2 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	2200      	movs	r2, #0
 80094b0:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80094b2:	68bb      	ldr	r3, [r7, #8]
 80094b4:	781b      	ldrb	r3, [r3, #0]
 80094b6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 80094b8:	68bb      	ldr	r3, [r7, #8]
 80094ba:	785b      	ldrb	r3, [r3, #1]
 80094bc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80094be:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80094c0:	68ba      	ldr	r2, [r7, #8]
 80094c2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 80094c4:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80094c6:	68bb      	ldr	r3, [r7, #8]
 80094c8:	7b1b      	ldrb	r3, [r3, #12]
 80094ca:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80094cc:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 80094ce:	68bb      	ldr	r3, [r7, #8]
 80094d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80094d4:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80094d6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80094d8:	68bb      	ldr	r3, [r7, #8]
 80094da:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 80094dc:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80094de:	68bb      	ldr	r3, [r7, #8]
 80094e0:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80094e2:	4313      	orrs	r3, r2
 80094e4:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80094e6:	68bb      	ldr	r3, [r7, #8]
 80094e8:	685a      	ldr	r2, [r3, #4]
 80094ea:	68bb      	ldr	r3, [r7, #8]
 80094ec:	69db      	ldr	r3, [r3, #28]
 80094ee:	4313      	orrs	r3, r2
 80094f0:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	22ca      	movs	r2, #202	; 0xca
 80094f8:	625a      	str	r2, [r3, #36]	; 0x24
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	2253      	movs	r2, #83	; 0x53
 8009500:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8009502:	68bb      	ldr	r3, [r7, #8]
 8009504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009506:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800950a:	d13f      	bne.n	800958c <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	689a      	ldr	r2, [r3, #8]
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800951a:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	689a      	ldr	r2, [r3, #8]
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800952a:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800952c:	f7f9 fd58 	bl	8002fe0 <HAL_GetTick>
 8009530:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8009532:	e013      	b.n	800955c <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009534:	f7f9 fd54 	bl	8002fe0 <HAL_GetTick>
 8009538:	4602      	mov	r2, r0
 800953a:	69bb      	ldr	r3, [r7, #24]
 800953c:	1ad3      	subs	r3, r2, r3
 800953e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009542:	d90b      	bls.n	800955c <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	22ff      	movs	r2, #255	; 0xff
 800954a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	2203      	movs	r2, #3
 8009550:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	2200      	movs	r2, #0
 8009556:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8009558:	2303      	movs	r3, #3
 800955a:	e061      	b.n	8009620 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	68db      	ldr	r3, [r3, #12]
 8009562:	f003 0301 	and.w	r3, r3, #1
 8009566:	2b00      	cmp	r3, #0
 8009568:	d0e4      	beq.n	8009534 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	69fa      	ldr	r2, [r7, #28]
 8009570:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	697a      	ldr	r2, [r7, #20]
 8009578:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	689a      	ldr	r2, [r3, #8]
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009588:	609a      	str	r2, [r3, #8]
 800958a:	e03e      	b.n	800960a <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	689a      	ldr	r2, [r3, #8]
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800959a:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	689a      	ldr	r2, [r3, #8]
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80095aa:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 80095ac:	f7f9 fd18 	bl	8002fe0 <HAL_GetTick>
 80095b0:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 80095b2:	e013      	b.n	80095dc <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80095b4:	f7f9 fd14 	bl	8002fe0 <HAL_GetTick>
 80095b8:	4602      	mov	r2, r0
 80095ba:	69bb      	ldr	r3, [r7, #24]
 80095bc:	1ad3      	subs	r3, r2, r3
 80095be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80095c2:	d90b      	bls.n	80095dc <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	22ff      	movs	r2, #255	; 0xff
 80095ca:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	2203      	movs	r2, #3
 80095d0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	2200      	movs	r2, #0
 80095d6:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80095d8:	2303      	movs	r3, #3
 80095da:	e021      	b.n	8009620 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	68db      	ldr	r3, [r3, #12]
 80095e2:	f003 0302 	and.w	r3, r3, #2
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d0e4      	beq.n	80095b4 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	69fa      	ldr	r2, [r7, #28]
 80095f0:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	697a      	ldr	r2, [r7, #20]
 80095f8:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	689a      	ldr	r2, [r3, #8]
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009608:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	22ff      	movs	r2, #255	; 0xff
 8009610:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	2201      	movs	r2, #1
 8009616:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	2200      	movs	r2, #0
 800961c:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800961e:	2300      	movs	r3, #0
}
 8009620:	4618      	mov	r0, r3
 8009622:	3724      	adds	r7, #36	; 0x24
 8009624:	46bd      	mov	sp, r7
 8009626:	bd90      	pop	{r4, r7, pc}

08009628 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b084      	sub	sp, #16
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8009630:	2300      	movs	r3, #0
 8009632:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	68da      	ldr	r2, [r3, #12]
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009642:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009644:	f7f9 fccc 	bl	8002fe0 <HAL_GetTick>
 8009648:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800964a:	e009      	b.n	8009660 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800964c:	f7f9 fcc8 	bl	8002fe0 <HAL_GetTick>
 8009650:	4602      	mov	r2, r0
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	1ad3      	subs	r3, r2, r3
 8009656:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800965a:	d901      	bls.n	8009660 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800965c:	2303      	movs	r3, #3
 800965e:	e007      	b.n	8009670 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	68db      	ldr	r3, [r3, #12]
 8009666:	f003 0320 	and.w	r3, r3, #32
 800966a:	2b00      	cmp	r3, #0
 800966c:	d0ee      	beq.n	800964c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800966e:	2300      	movs	r3, #0
}
 8009670:	4618      	mov	r0, r3
 8009672:	3710      	adds	r7, #16
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}

08009678 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b084      	sub	sp, #16
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8009680:	2300      	movs	r3, #0
 8009682:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	68db      	ldr	r3, [r3, #12]
 800968a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800968e:	2b00      	cmp	r3, #0
 8009690:	d119      	bne.n	80096c6 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	f04f 32ff 	mov.w	r2, #4294967295
 800969a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800969c:	f7f9 fca0 	bl	8002fe0 <HAL_GetTick>
 80096a0:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80096a2:	e009      	b.n	80096b8 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80096a4:	f7f9 fc9c 	bl	8002fe0 <HAL_GetTick>
 80096a8:	4602      	mov	r2, r0
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	1ad3      	subs	r3, r2, r3
 80096ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80096b2:	d901      	bls.n	80096b8 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80096b4:	2303      	movs	r3, #3
 80096b6:	e007      	b.n	80096c8 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	68db      	ldr	r3, [r3, #12]
 80096be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d0ee      	beq.n	80096a4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80096c6:	2300      	movs	r3, #0
}
 80096c8:	4618      	mov	r0, r3
 80096ca:	3710      	adds	r7, #16
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bd80      	pop	{r7, pc}

080096d0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80096d0:	b480      	push	{r7}
 80096d2:	b085      	sub	sp, #20
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	4603      	mov	r3, r0
 80096d8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 80096da:	2300      	movs	r3, #0
 80096dc:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 80096de:	e005      	b.n	80096ec <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	3301      	adds	r3, #1
 80096e4:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 80096e6:	79fb      	ldrb	r3, [r7, #7]
 80096e8:	3b0a      	subs	r3, #10
 80096ea:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 80096ec:	79fb      	ldrb	r3, [r7, #7]
 80096ee:	2b09      	cmp	r3, #9
 80096f0:	d8f6      	bhi.n	80096e0 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	b2db      	uxtb	r3, r3
 80096f6:	011b      	lsls	r3, r3, #4
 80096f8:	b2da      	uxtb	r2, r3
 80096fa:	79fb      	ldrb	r3, [r7, #7]
 80096fc:	4313      	orrs	r3, r2
 80096fe:	b2db      	uxtb	r3, r3
}
 8009700:	4618      	mov	r0, r3
 8009702:	3714      	adds	r7, #20
 8009704:	46bd      	mov	sp, r7
 8009706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970a:	4770      	bx	lr

0800970c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b088      	sub	sp, #32
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8009714:	2300      	movs	r3, #0
 8009716:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8009718:	2300      	movs	r3, #0
 800971a:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800971c:	2300      	movs	r3, #0
 800971e:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d101      	bne.n	800972a <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8009726:	2301      	movs	r3, #1
 8009728:	e149      	b.n	80099be <HAL_SAI_Init+0x2b2>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if(hsai->State == HAL_SAI_STATE_RESET)
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8009730:	b2db      	uxtb	r3, r3
 8009732:	2b00      	cmp	r3, #0
 8009734:	d106      	bne.n	8009744 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2200      	movs	r2, #0
 800973a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800973e:	6878      	ldr	r0, [r7, #4]
 8009740:	f7f9 fa9e 	bl	8002c80 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2202      	movs	r2, #2
 8009748:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800974c:	6878      	ldr	r0, [r7, #4]
 800974e:	f000 f94f 	bl	80099f0 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch(hsai->Init.SynchroExt)
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	68db      	ldr	r3, [r3, #12]
 8009756:	2b01      	cmp	r3, #1
 8009758:	d007      	beq.n	800976a <HAL_SAI_Init+0x5e>
 800975a:	2b01      	cmp	r3, #1
 800975c:	d302      	bcc.n	8009764 <HAL_SAI_Init+0x58>
 800975e:	2b02      	cmp	r3, #2
 8009760:	d006      	beq.n	8009770 <HAL_SAI_Init+0x64>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
  default:
    break;
 8009762:	e008      	b.n	8009776 <HAL_SAI_Init+0x6a>
      tmpregisterGCR = 0;
 8009764:	2300      	movs	r3, #0
 8009766:	61fb      	str	r3, [r7, #28]
      break;
 8009768:	e005      	b.n	8009776 <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800976a:	2310      	movs	r3, #16
 800976c:	61fb      	str	r3, [r7, #28]
      break;
 800976e:	e002      	b.n	8009776 <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8009770:	2320      	movs	r3, #32
 8009772:	61fb      	str	r3, [r7, #28]
      break;
 8009774:	bf00      	nop
  }

  switch(hsai->Init.Synchro)
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	689b      	ldr	r3, [r3, #8]
 800977a:	2b03      	cmp	r3, #3
 800977c:	d81d      	bhi.n	80097ba <HAL_SAI_Init+0xae>
 800977e:	a201      	add	r2, pc, #4	; (adr r2, 8009784 <HAL_SAI_Init+0x78>)
 8009780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009784:	08009795 	.word	0x08009795
 8009788:	0800979b 	.word	0x0800979b
 800978c:	080097a3 	.word	0x080097a3
 8009790:	080097ab 	.word	0x080097ab
  {
    case SAI_ASYNCHRONOUS :
      {
        syncen_bits = 0;
 8009794:	2300      	movs	r3, #0
 8009796:	617b      	str	r3, [r7, #20]
      }
      break;
 8009798:	e010      	b.n	80097bc <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS :
      {
        syncen_bits = SAI_xCR1_SYNCEN_0;
 800979a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800979e:	617b      	str	r3, [r7, #20]
      }
      break;
 80097a0:	e00c      	b.n	80097bc <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 80097a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80097a6:	617b      	str	r3, [r7, #20]
      }
      break;
 80097a8:	e008      	b.n	80097bc <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 80097aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80097ae:	617b      	str	r3, [r7, #20]
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 80097b0:	69fb      	ldr	r3, [r7, #28]
 80097b2:	f043 0301 	orr.w	r3, r3, #1
 80097b6:	61fb      	str	r3, [r7, #28]
      }
      break;
 80097b8:	e000      	b.n	80097bc <HAL_SAI_Init+0xb0>
  default:
    break;
 80097ba:	bf00      	nop
  }

  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	4a81      	ldr	r2, [pc, #516]	; (80099c8 <HAL_SAI_Init+0x2bc>)
 80097c2:	4293      	cmp	r3, r2
 80097c4:	d004      	beq.n	80097d0 <HAL_SAI_Init+0xc4>
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	4a80      	ldr	r2, [pc, #512]	; (80099cc <HAL_SAI_Init+0x2c0>)
 80097cc:	4293      	cmp	r3, r2
 80097ce:	d103      	bne.n	80097d8 <HAL_SAI_Init+0xcc>
  {
    SAI1->GCR = tmpregisterGCR;
 80097d0:	4a7f      	ldr	r2, [pc, #508]	; (80099d0 <HAL_SAI_Init+0x2c4>)
 80097d2:	69fb      	ldr	r3, [r7, #28]
 80097d4:	6013      	str	r3, [r2, #0]
 80097d6:	e002      	b.n	80097de <HAL_SAI_Init+0xd2>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 80097d8:	4a7e      	ldr	r2, [pc, #504]	; (80099d4 <HAL_SAI_Init+0x2c8>)
 80097da:	69fb      	ldr	r3, [r7, #28]
 80097dc:	6013      	str	r3, [r2, #0]
  }

  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	69db      	ldr	r3, [r3, #28]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d043      	beq.n	800986e <HAL_SAI_Init+0x162>
  {
    uint32_t freq = 0;
 80097e6:	2300      	movs	r3, #0
 80097e8:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	4a76      	ldr	r2, [pc, #472]	; (80099c8 <HAL_SAI_Init+0x2bc>)
 80097f0:	4293      	cmp	r3, r2
 80097f2:	d004      	beq.n	80097fe <HAL_SAI_Init+0xf2>
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	4a74      	ldr	r2, [pc, #464]	; (80099cc <HAL_SAI_Init+0x2c0>)
 80097fa:	4293      	cmp	r3, r2
 80097fc:	d104      	bne.n	8009808 <HAL_SAI_Init+0xfc>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80097fe:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8009802:	f7ff fabd 	bl	8008d80 <HAL_RCCEx_GetPeriphCLKFreq>
 8009806:	6138      	str	r0, [r7, #16]
    }
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	4a72      	ldr	r2, [pc, #456]	; (80099d8 <HAL_SAI_Init+0x2cc>)
 800980e:	4293      	cmp	r3, r2
 8009810:	d004      	beq.n	800981c <HAL_SAI_Init+0x110>
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	4a71      	ldr	r2, [pc, #452]	; (80099dc <HAL_SAI_Init+0x2d0>)
 8009818:	4293      	cmp	r3, r2
 800981a:	d104      	bne.n	8009826 <HAL_SAI_Init+0x11a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800981c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8009820:	f7ff faae 	bl	8008d80 <HAL_RCCEx_GetPeriphCLKFreq>
 8009824:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8009826:	693a      	ldr	r2, [r7, #16]
 8009828:	4613      	mov	r3, r2
 800982a:	009b      	lsls	r3, r3, #2
 800982c:	4413      	add	r3, r2
 800982e:	005b      	lsls	r3, r3, #1
 8009830:	461a      	mov	r2, r3
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	69db      	ldr	r3, [r3, #28]
 8009836:	025b      	lsls	r3, r3, #9
 8009838:	fbb2 f3f3 	udiv	r3, r2, r3
 800983c:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	4a67      	ldr	r2, [pc, #412]	; (80099e0 <HAL_SAI_Init+0x2d4>)
 8009842:	fba2 2303 	umull	r2, r3, r2, r3
 8009846:	08da      	lsrs	r2, r3, #3
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if((tmpval % 10) > 8)
 800984c:	68f9      	ldr	r1, [r7, #12]
 800984e:	4b64      	ldr	r3, [pc, #400]	; (80099e0 <HAL_SAI_Init+0x2d4>)
 8009850:	fba3 2301 	umull	r2, r3, r3, r1
 8009854:	08da      	lsrs	r2, r3, #3
 8009856:	4613      	mov	r3, r2
 8009858:	009b      	lsls	r3, r3, #2
 800985a:	4413      	add	r3, r2
 800985c:	005b      	lsls	r3, r3, #1
 800985e:	1aca      	subs	r2, r1, r3
 8009860:	2a08      	cmp	r2, #8
 8009862:	d904      	bls.n	800986e <HAL_SAI_Init+0x162>
    {
      hsai->Init.Mckdiv+= 1;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	6a1b      	ldr	r3, [r3, #32]
 8009868:	1c5a      	adds	r2, r3, #1
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	621a      	str	r2, [r3, #32]
    }
  }

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	685b      	ldr	r3, [r3, #4]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d003      	beq.n	800987e <HAL_SAI_Init+0x172>
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	685b      	ldr	r3, [r3, #4]
 800987a:	2b02      	cmp	r3, #2
 800987c:	d109      	bne.n	8009892 <HAL_SAI_Init+0x186>
  { /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009882:	2b01      	cmp	r3, #1
 8009884:	d101      	bne.n	800988a <HAL_SAI_Init+0x17e>
 8009886:	2300      	movs	r3, #0
 8009888:	e001      	b.n	800988e <HAL_SAI_Init+0x182>
 800988a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800988e:	61bb      	str	r3, [r7, #24]
 8009890:	e008      	b.n	80098a4 <HAL_SAI_Init+0x198>
  }
  else
  { /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009896:	2b01      	cmp	r3, #1
 8009898:	d102      	bne.n	80098a0 <HAL_SAI_Init+0x194>
 800989a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800989e:	e000      	b.n	80098a2 <HAL_SAI_Init+0x196>
 80098a0:	2300      	movs	r3, #0
 80098a2:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	6819      	ldr	r1, [r3, #0]
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681a      	ldr	r2, [r3, #0]
 80098ae:	4b4d      	ldr	r3, [pc, #308]	; (80099e4 <HAL_SAI_Init+0x2d8>)
 80098b0:	400b      	ands	r3, r1
 80098b2:	6013      	str	r3, [r2, #0]
                         SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
                         SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                         SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	6819      	ldr	r1, [r3, #0]
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	685a      	ldr	r2, [r3, #4]
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098c2:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80098c8:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098ce:	431a      	orrs	r2, r3
 80098d0:	69bb      	ldr	r3, [r7, #24]
 80098d2:	431a      	orrs	r2, r3
                        ckstr_bits | syncen_bits |                               \
 80098d4:	697b      	ldr	r3, [r7, #20]
 80098d6:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 80098dc:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	691b      	ldr	r3, [r3, #16]
 80098e2:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	695b      	ldr	r3, [r3, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80098e8:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	6a1b      	ldr	r3, [r3, #32]
 80098ee:	051b      	lsls	r3, r3, #20
 80098f0:	431a      	orrs	r2, r3
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	430a      	orrs	r2, r1
 80098f8:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	6859      	ldr	r1, [r3, #4]
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681a      	ldr	r2, [r3, #0]
 8009904:	4b38      	ldr	r3, [pc, #224]	; (80099e8 <HAL_SAI_Init+0x2dc>)
 8009906:	400b      	ands	r3, r1
 8009908:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	6859      	ldr	r1, [r3, #4]
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	699a      	ldr	r2, [r3, #24]
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009918:	431a      	orrs	r2, r3
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800991e:	431a      	orrs	r2, r3
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	430a      	orrs	r2, r1
 8009926:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	6899      	ldr	r1, [r3, #8]
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681a      	ldr	r2, [r3, #0]
 8009932:	4b2e      	ldr	r3, [pc, #184]	; (80099ec <HAL_SAI_Init+0x2e0>)
 8009934:	400b      	ands	r3, r1
 8009936:	6093      	str	r3, [r2, #8]
                           SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	6899      	ldr	r1, [r3, #8]
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009942:	1e5a      	subs	r2, r3, #1
                          hsai->FrameInit.FSOffset |
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8009948:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSDefinition |
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 800994e:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSPolarity   |
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 8009954:	431a      	orrs	r2, r3
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800995a:	3b01      	subs	r3, #1
 800995c:	021b      	lsls	r3, r3, #8
                          hsai->FrameInit.FSPolarity   |
 800995e:	431a      	orrs	r2, r3
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	430a      	orrs	r2, r1
 8009966:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	68d9      	ldr	r1, [r3, #12]
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681a      	ldr	r2, [r3, #0]
 8009972:	f24f 0320 	movw	r3, #61472	; 0xf020
 8009976:	400b      	ands	r3, r1
 8009978:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN ));

  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	68d9      	ldr	r1, [r3, #12]
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009988:	431a      	orrs	r2, r3
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800998e:	041b      	lsls	r3, r3, #16
 8009990:	431a      	orrs	r2, r3
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009996:	3b01      	subs	r3, #1
 8009998:	021b      	lsls	r3, r3, #8
 800999a:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	430a      	orrs	r2, r1
 80099a2:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2200      	movs	r2, #0
 80099a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2201      	movs	r2, #1
 80099b0:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2200      	movs	r2, #0
 80099b8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80099bc:	2300      	movs	r3, #0
}
 80099be:	4618      	mov	r0, r3
 80099c0:	3720      	adds	r7, #32
 80099c2:	46bd      	mov	sp, r7
 80099c4:	bd80      	pop	{r7, pc}
 80099c6:	bf00      	nop
 80099c8:	40015804 	.word	0x40015804
 80099cc:	40015824 	.word	0x40015824
 80099d0:	40015800 	.word	0x40015800
 80099d4:	40015c00 	.word	0x40015c00
 80099d8:	40015c04 	.word	0x40015c04
 80099dc:	40015c24 	.word	0x40015c24
 80099e0:	cccccccd 	.word	0xcccccccd
 80099e4:	ff05c010 	.word	0xff05c010
 80099e8:	ffff1ff0 	.word	0xffff1ff0
 80099ec:	fff88000 	.word	0xfff88000

080099f0 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80099f0:	b490      	push	{r4, r7}
 80099f2:	b084      	sub	sp, #16
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 80099f8:	4b16      	ldr	r3, [pc, #88]	; (8009a54 <SAI_Disable+0x64>)
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	4a16      	ldr	r2, [pc, #88]	; (8009a58 <SAI_Disable+0x68>)
 80099fe:	fba2 2303 	umull	r2, r3, r2, r3
 8009a02:	0b1b      	lsrs	r3, r3, #12
 8009a04:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 8009a06:	2300      	movs	r3, #0
 8009a08:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	681a      	ldr	r2, [r3, #0]
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009a18:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8009a1a:	4623      	mov	r3, r4
 8009a1c:	1e5c      	subs	r4, r3, #1
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d10a      	bne.n	8009a38 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009a28:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8009a32:	2303      	movs	r3, #3
 8009a34:	73fb      	strb	r3, [r7, #15]
      break;
 8009a36:	e006      	b.n	8009a46 <SAI_Disable+0x56>
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d1e9      	bne.n	8009a1a <SAI_Disable+0x2a>

  return status;
 8009a46:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a48:	4618      	mov	r0, r3
 8009a4a:	3710      	adds	r7, #16
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	bc90      	pop	{r4, r7}
 8009a50:	4770      	bx	lr
 8009a52:	bf00      	nop
 8009a54:	20000000 	.word	0x20000000
 8009a58:	95cbec1b 	.word	0x95cbec1b

08009a5c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b082      	sub	sp, #8
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
 8009a64:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d101      	bne.n	8009a70 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8009a6c:	2301      	movs	r3, #1
 8009a6e:	e025      	b.n	8009abc <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009a76:	b2db      	uxtb	r3, r3
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d106      	bne.n	8009a8a <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2200      	movs	r2, #0
 8009a80:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8009a84:	6878      	ldr	r0, [r7, #4]
 8009a86:	f7f9 f8f1 	bl	8002c6c <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	2202      	movs	r2, #2
 8009a8e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681a      	ldr	r2, [r3, #0]
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	3304      	adds	r3, #4
 8009a9a:	4619      	mov	r1, r3
 8009a9c:	4610      	mov	r0, r2
 8009a9e:	f001 fcdb 	bl	800b458 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	6818      	ldr	r0, [r3, #0]
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	685b      	ldr	r3, [r3, #4]
 8009aaa:	461a      	mov	r2, r3
 8009aac:	6839      	ldr	r1, [r7, #0]
 8009aae:	f001 fd45 	bl	800b53c <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	2201      	movs	r2, #1
 8009ab6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8009aba:	2300      	movs	r3, #0
}
 8009abc:	4618      	mov	r0, r3
 8009abe:	3708      	adds	r7, #8
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	bd80      	pop	{r7, pc}

08009ac4 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b084      	sub	sp, #16
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d101      	bne.n	8009ad6 <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 8009ad2:	2301      	movs	r3, #1
 8009ad4:	e04c      	b.n	8009b70 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009adc:	b2db      	uxtb	r3, r3
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d106      	bne.n	8009af0 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 8009aea:	6878      	ldr	r0, [r7, #4]
 8009aec:	f7f8 fc8a 	bl	8002404 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2202      	movs	r2, #2
 8009af4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	681a      	ldr	r2, [r3, #0]
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	f022 0203 	bic.w	r2, r2, #3
 8009b06:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8009b10:	68fa      	ldr	r2, [r7, #12]
 8009b12:	4b19      	ldr	r3, [pc, #100]	; (8009b78 <HAL_SPDIFRX_Init+0xb4>)
 8009b14:	4013      	ands	r3, r2
 8009b16:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 8009b20:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 8009b26:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 8009b2c:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 8009b32:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 8009b38:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 8009b3e:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 8009b44:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 8009b4a:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 8009b50:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 8009b52:	68fa      	ldr	r2, [r7, #12]
 8009b54:	4313      	orrs	r3, r2
 8009b56:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	68fa      	ldr	r2, [r7, #12]
 8009b5e:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2200      	movs	r2, #0
 8009b64:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2201      	movs	r2, #1
 8009b6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 8009b6e:	2300      	movs	r3, #0
}
 8009b70:	4618      	mov	r0, r3
 8009b72:	3710      	adds	r7, #16
 8009b74:	46bd      	mov	sp, r7
 8009b76:	bd80      	pop	{r7, pc}
 8009b78:	fff88407 	.word	0xfff88407

08009b7c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b084      	sub	sp, #16
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d101      	bne.n	8009b8e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009b8a:	2301      	movs	r3, #1
 8009b8c:	e084      	b.n	8009c98 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	2200      	movs	r2, #0
 8009b92:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009b9a:	b2db      	uxtb	r3, r3
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d106      	bne.n	8009bae <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009ba8:	6878      	ldr	r0, [r7, #4]
 8009baa:	f7f8 fc6d 	bl	8002488 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	2202      	movs	r2, #2
 8009bb2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	681a      	ldr	r2, [r3, #0]
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009bc4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	68db      	ldr	r3, [r3, #12]
 8009bca:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009bce:	d902      	bls.n	8009bd6 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	60fb      	str	r3, [r7, #12]
 8009bd4:	e002      	b.n	8009bdc <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009bd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009bda:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	68db      	ldr	r3, [r3, #12]
 8009be0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8009be4:	d007      	beq.n	8009bf6 <HAL_SPI_Init+0x7a>
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	68db      	ldr	r3, [r3, #12]
 8009bea:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009bee:	d002      	beq.n	8009bf6 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d10b      	bne.n	8009c16 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	68db      	ldr	r3, [r3, #12]
 8009c02:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009c06:	d903      	bls.n	8009c10 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2202      	movs	r2, #2
 8009c0c:	631a      	str	r2, [r3, #48]	; 0x30
 8009c0e:	e002      	b.n	8009c16 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	2201      	movs	r2, #1
 8009c14:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	685a      	ldr	r2, [r3, #4]
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	689b      	ldr	r3, [r3, #8]
 8009c1e:	431a      	orrs	r2, r3
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	691b      	ldr	r3, [r3, #16]
 8009c24:	431a      	orrs	r2, r3
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	695b      	ldr	r3, [r3, #20]
 8009c2a:	431a      	orrs	r2, r3
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	699b      	ldr	r3, [r3, #24]
 8009c30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009c34:	431a      	orrs	r2, r3
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	69db      	ldr	r3, [r3, #28]
 8009c3a:	431a      	orrs	r2, r3
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	6a1b      	ldr	r3, [r3, #32]
 8009c40:	ea42 0103 	orr.w	r1, r2, r3
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	430a      	orrs	r2, r1
 8009c4e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	699b      	ldr	r3, [r3, #24]
 8009c54:	0c1b      	lsrs	r3, r3, #16
 8009c56:	f003 0204 	and.w	r2, r3, #4
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c5e:	431a      	orrs	r2, r3
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c64:	431a      	orrs	r2, r3
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	68db      	ldr	r3, [r3, #12]
 8009c6a:	ea42 0103 	orr.w	r1, r2, r3
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	68fa      	ldr	r2, [r7, #12]
 8009c74:	430a      	orrs	r2, r1
 8009c76:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	69da      	ldr	r2, [r3, #28]
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009c86:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2201      	movs	r2, #1
 8009c92:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8009c96:	2300      	movs	r3, #0
}
 8009c98:	4618      	mov	r0, r3
 8009c9a:	3710      	adds	r7, #16
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	bd80      	pop	{r7, pc}

08009ca0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b082      	sub	sp, #8
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d101      	bne.n	8009cb2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009cae:	2301      	movs	r3, #1
 8009cb0:	e01d      	b.n	8009cee <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009cb8:	b2db      	uxtb	r3, r3
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d106      	bne.n	8009ccc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009cc6:	6878      	ldr	r0, [r7, #4]
 8009cc8:	f7f8 fc52 	bl	8002570 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2202      	movs	r2, #2
 8009cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681a      	ldr	r2, [r3, #0]
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	3304      	adds	r3, #4
 8009cdc:	4619      	mov	r1, r3
 8009cde:	4610      	mov	r0, r2
 8009ce0:	f000 fb78 	bl	800a3d4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2201      	movs	r2, #1
 8009ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009cec:	2300      	movs	r3, #0
}
 8009cee:	4618      	mov	r0, r3
 8009cf0:	3708      	adds	r7, #8
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	bd80      	pop	{r7, pc}
	...

08009cf8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009cf8:	b480      	push	{r7}
 8009cfa:	b085      	sub	sp, #20
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	68da      	ldr	r2, [r3, #12]
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	f042 0201 	orr.w	r2, r2, #1
 8009d0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	689a      	ldr	r2, [r3, #8]
 8009d16:	4b0c      	ldr	r3, [pc, #48]	; (8009d48 <HAL_TIM_Base_Start_IT+0x50>)
 8009d18:	4013      	ands	r3, r2
 8009d1a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	2b06      	cmp	r3, #6
 8009d20:	d00b      	beq.n	8009d3a <HAL_TIM_Base_Start_IT+0x42>
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d28:	d007      	beq.n	8009d3a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	681a      	ldr	r2, [r3, #0]
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	f042 0201 	orr.w	r2, r2, #1
 8009d38:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009d3a:	2300      	movs	r3, #0
}
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	3714      	adds	r7, #20
 8009d40:	46bd      	mov	sp, r7
 8009d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d46:	4770      	bx	lr
 8009d48:	00010007 	.word	0x00010007

08009d4c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b082      	sub	sp, #8
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d101      	bne.n	8009d5e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009d5a:	2301      	movs	r3, #1
 8009d5c:	e01d      	b.n	8009d9a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d64:	b2db      	uxtb	r3, r3
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d106      	bne.n	8009d78 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009d72:	6878      	ldr	r0, [r7, #4]
 8009d74:	f7f8 fc44 	bl	8002600 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2202      	movs	r2, #2
 8009d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681a      	ldr	r2, [r3, #0]
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	3304      	adds	r3, #4
 8009d88:	4619      	mov	r1, r3
 8009d8a:	4610      	mov	r0, r2
 8009d8c:	f000 fb22 	bl	800a3d4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	2201      	movs	r2, #1
 8009d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009d98:	2300      	movs	r3, #0
}
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	3708      	adds	r7, #8
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	bd80      	pop	{r7, pc}

08009da2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009da2:	b580      	push	{r7, lr}
 8009da4:	b082      	sub	sp, #8
 8009da6:	af00      	add	r7, sp, #0
 8009da8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	691b      	ldr	r3, [r3, #16]
 8009db0:	f003 0302 	and.w	r3, r3, #2
 8009db4:	2b02      	cmp	r3, #2
 8009db6:	d122      	bne.n	8009dfe <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	68db      	ldr	r3, [r3, #12]
 8009dbe:	f003 0302 	and.w	r3, r3, #2
 8009dc2:	2b02      	cmp	r3, #2
 8009dc4:	d11b      	bne.n	8009dfe <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	f06f 0202 	mvn.w	r2, #2
 8009dce:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	2201      	movs	r2, #1
 8009dd4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	699b      	ldr	r3, [r3, #24]
 8009ddc:	f003 0303 	and.w	r3, r3, #3
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d003      	beq.n	8009dec <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009de4:	6878      	ldr	r0, [r7, #4]
 8009de6:	f000 fad7 	bl	800a398 <HAL_TIM_IC_CaptureCallback>
 8009dea:	e005      	b.n	8009df8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009dec:	6878      	ldr	r0, [r7, #4]
 8009dee:	f000 fac9 	bl	800a384 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009df2:	6878      	ldr	r0, [r7, #4]
 8009df4:	f000 fada 	bl	800a3ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	691b      	ldr	r3, [r3, #16]
 8009e04:	f003 0304 	and.w	r3, r3, #4
 8009e08:	2b04      	cmp	r3, #4
 8009e0a:	d122      	bne.n	8009e52 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	68db      	ldr	r3, [r3, #12]
 8009e12:	f003 0304 	and.w	r3, r3, #4
 8009e16:	2b04      	cmp	r3, #4
 8009e18:	d11b      	bne.n	8009e52 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	f06f 0204 	mvn.w	r2, #4
 8009e22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2202      	movs	r2, #2
 8009e28:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	699b      	ldr	r3, [r3, #24]
 8009e30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d003      	beq.n	8009e40 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009e38:	6878      	ldr	r0, [r7, #4]
 8009e3a:	f000 faad 	bl	800a398 <HAL_TIM_IC_CaptureCallback>
 8009e3e:	e005      	b.n	8009e4c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e40:	6878      	ldr	r0, [r7, #4]
 8009e42:	f000 fa9f 	bl	800a384 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e46:	6878      	ldr	r0, [r7, #4]
 8009e48:	f000 fab0 	bl	800a3ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	2200      	movs	r2, #0
 8009e50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	691b      	ldr	r3, [r3, #16]
 8009e58:	f003 0308 	and.w	r3, r3, #8
 8009e5c:	2b08      	cmp	r3, #8
 8009e5e:	d122      	bne.n	8009ea6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	68db      	ldr	r3, [r3, #12]
 8009e66:	f003 0308 	and.w	r3, r3, #8
 8009e6a:	2b08      	cmp	r3, #8
 8009e6c:	d11b      	bne.n	8009ea6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	f06f 0208 	mvn.w	r2, #8
 8009e76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2204      	movs	r2, #4
 8009e7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	69db      	ldr	r3, [r3, #28]
 8009e84:	f003 0303 	and.w	r3, r3, #3
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d003      	beq.n	8009e94 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009e8c:	6878      	ldr	r0, [r7, #4]
 8009e8e:	f000 fa83 	bl	800a398 <HAL_TIM_IC_CaptureCallback>
 8009e92:	e005      	b.n	8009ea0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e94:	6878      	ldr	r0, [r7, #4]
 8009e96:	f000 fa75 	bl	800a384 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e9a:	6878      	ldr	r0, [r7, #4]
 8009e9c:	f000 fa86 	bl	800a3ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	691b      	ldr	r3, [r3, #16]
 8009eac:	f003 0310 	and.w	r3, r3, #16
 8009eb0:	2b10      	cmp	r3, #16
 8009eb2:	d122      	bne.n	8009efa <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	68db      	ldr	r3, [r3, #12]
 8009eba:	f003 0310 	and.w	r3, r3, #16
 8009ebe:	2b10      	cmp	r3, #16
 8009ec0:	d11b      	bne.n	8009efa <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	f06f 0210 	mvn.w	r2, #16
 8009eca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2208      	movs	r2, #8
 8009ed0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	69db      	ldr	r3, [r3, #28]
 8009ed8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d003      	beq.n	8009ee8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009ee0:	6878      	ldr	r0, [r7, #4]
 8009ee2:	f000 fa59 	bl	800a398 <HAL_TIM_IC_CaptureCallback>
 8009ee6:	e005      	b.n	8009ef4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	f000 fa4b 	bl	800a384 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009eee:	6878      	ldr	r0, [r7, #4]
 8009ef0:	f000 fa5c 	bl	800a3ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	691b      	ldr	r3, [r3, #16]
 8009f00:	f003 0301 	and.w	r3, r3, #1
 8009f04:	2b01      	cmp	r3, #1
 8009f06:	d10e      	bne.n	8009f26 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	68db      	ldr	r3, [r3, #12]
 8009f0e:	f003 0301 	and.w	r3, r3, #1
 8009f12:	2b01      	cmp	r3, #1
 8009f14:	d107      	bne.n	8009f26 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	f06f 0201 	mvn.w	r2, #1
 8009f1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009f20:	6878      	ldr	r0, [r7, #4]
 8009f22:	f7f7 fe2b 	bl	8001b7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	691b      	ldr	r3, [r3, #16]
 8009f2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f30:	2b80      	cmp	r3, #128	; 0x80
 8009f32:	d10e      	bne.n	8009f52 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	68db      	ldr	r3, [r3, #12]
 8009f3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f3e:	2b80      	cmp	r3, #128	; 0x80
 8009f40:	d107      	bne.n	8009f52 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009f4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009f4c:	6878      	ldr	r0, [r7, #4]
 8009f4e:	f000 fe3f 	bl	800abd0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	691b      	ldr	r3, [r3, #16]
 8009f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f60:	d10e      	bne.n	8009f80 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	68db      	ldr	r3, [r3, #12]
 8009f68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f6c:	2b80      	cmp	r3, #128	; 0x80
 8009f6e:	d107      	bne.n	8009f80 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009f78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009f7a:	6878      	ldr	r0, [r7, #4]
 8009f7c:	f000 fe32 	bl	800abe4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	691b      	ldr	r3, [r3, #16]
 8009f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f8a:	2b40      	cmp	r3, #64	; 0x40
 8009f8c:	d10e      	bne.n	8009fac <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	68db      	ldr	r3, [r3, #12]
 8009f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f98:	2b40      	cmp	r3, #64	; 0x40
 8009f9a:	d107      	bne.n	8009fac <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009fa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009fa6:	6878      	ldr	r0, [r7, #4]
 8009fa8:	f000 fa0a 	bl	800a3c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	691b      	ldr	r3, [r3, #16]
 8009fb2:	f003 0320 	and.w	r3, r3, #32
 8009fb6:	2b20      	cmp	r3, #32
 8009fb8:	d10e      	bne.n	8009fd8 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	68db      	ldr	r3, [r3, #12]
 8009fc0:	f003 0320 	and.w	r3, r3, #32
 8009fc4:	2b20      	cmp	r3, #32
 8009fc6:	d107      	bne.n	8009fd8 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	f06f 0220 	mvn.w	r2, #32
 8009fd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009fd2:	6878      	ldr	r0, [r7, #4]
 8009fd4:	f000 fdf2 	bl	800abbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009fd8:	bf00      	nop
 8009fda:	3708      	adds	r7, #8
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	bd80      	pop	{r7, pc}

08009fe0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b084      	sub	sp, #16
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	60f8      	str	r0, [r7, #12]
 8009fe8:	60b9      	str	r1, [r7, #8]
 8009fea:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ff2:	2b01      	cmp	r3, #1
 8009ff4:	d101      	bne.n	8009ffa <HAL_TIM_PWM_ConfigChannel+0x1a>
 8009ff6:	2302      	movs	r3, #2
 8009ff8:	e105      	b.n	800a206 <HAL_TIM_PWM_ConfigChannel+0x226>
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	2201      	movs	r2, #1
 8009ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	2202      	movs	r2, #2
 800a006:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	2b14      	cmp	r3, #20
 800a00e:	f200 80f0 	bhi.w	800a1f2 <HAL_TIM_PWM_ConfigChannel+0x212>
 800a012:	a201      	add	r2, pc, #4	; (adr r2, 800a018 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800a014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a018:	0800a06d 	.word	0x0800a06d
 800a01c:	0800a1f3 	.word	0x0800a1f3
 800a020:	0800a1f3 	.word	0x0800a1f3
 800a024:	0800a1f3 	.word	0x0800a1f3
 800a028:	0800a0ad 	.word	0x0800a0ad
 800a02c:	0800a1f3 	.word	0x0800a1f3
 800a030:	0800a1f3 	.word	0x0800a1f3
 800a034:	0800a1f3 	.word	0x0800a1f3
 800a038:	0800a0ef 	.word	0x0800a0ef
 800a03c:	0800a1f3 	.word	0x0800a1f3
 800a040:	0800a1f3 	.word	0x0800a1f3
 800a044:	0800a1f3 	.word	0x0800a1f3
 800a048:	0800a12f 	.word	0x0800a12f
 800a04c:	0800a1f3 	.word	0x0800a1f3
 800a050:	0800a1f3 	.word	0x0800a1f3
 800a054:	0800a1f3 	.word	0x0800a1f3
 800a058:	0800a171 	.word	0x0800a171
 800a05c:	0800a1f3 	.word	0x0800a1f3
 800a060:	0800a1f3 	.word	0x0800a1f3
 800a064:	0800a1f3 	.word	0x0800a1f3
 800a068:	0800a1b1 	.word	0x0800a1b1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	68b9      	ldr	r1, [r7, #8]
 800a072:	4618      	mov	r0, r3
 800a074:	f000 fa4e 	bl	800a514 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	699a      	ldr	r2, [r3, #24]
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	f042 0208 	orr.w	r2, r2, #8
 800a086:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	699a      	ldr	r2, [r3, #24]
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	f022 0204 	bic.w	r2, r2, #4
 800a096:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	6999      	ldr	r1, [r3, #24]
 800a09e:	68bb      	ldr	r3, [r7, #8]
 800a0a0:	691a      	ldr	r2, [r3, #16]
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	430a      	orrs	r2, r1
 800a0a8:	619a      	str	r2, [r3, #24]
      break;
 800a0aa:	e0a3      	b.n	800a1f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	68b9      	ldr	r1, [r7, #8]
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	f000 faa0 	bl	800a5f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	699a      	ldr	r2, [r3, #24]
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a0c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	699a      	ldr	r2, [r3, #24]
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a0d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	6999      	ldr	r1, [r3, #24]
 800a0de:	68bb      	ldr	r3, [r7, #8]
 800a0e0:	691b      	ldr	r3, [r3, #16]
 800a0e2:	021a      	lsls	r2, r3, #8
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	430a      	orrs	r2, r1
 800a0ea:	619a      	str	r2, [r3, #24]
      break;
 800a0ec:	e082      	b.n	800a1f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	68b9      	ldr	r1, [r7, #8]
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	f000 faf7 	bl	800a6e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	69da      	ldr	r2, [r3, #28]
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	f042 0208 	orr.w	r2, r2, #8
 800a108:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	69da      	ldr	r2, [r3, #28]
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	f022 0204 	bic.w	r2, r2, #4
 800a118:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	69d9      	ldr	r1, [r3, #28]
 800a120:	68bb      	ldr	r3, [r7, #8]
 800a122:	691a      	ldr	r2, [r3, #16]
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	430a      	orrs	r2, r1
 800a12a:	61da      	str	r2, [r3, #28]
      break;
 800a12c:	e062      	b.n	800a1f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	68b9      	ldr	r1, [r7, #8]
 800a134:	4618      	mov	r0, r3
 800a136:	f000 fb4d 	bl	800a7d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	69da      	ldr	r2, [r3, #28]
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a148:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	69da      	ldr	r2, [r3, #28]
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a158:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	69d9      	ldr	r1, [r3, #28]
 800a160:	68bb      	ldr	r3, [r7, #8]
 800a162:	691b      	ldr	r3, [r3, #16]
 800a164:	021a      	lsls	r2, r3, #8
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	430a      	orrs	r2, r1
 800a16c:	61da      	str	r2, [r3, #28]
      break;
 800a16e:	e041      	b.n	800a1f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	68b9      	ldr	r1, [r7, #8]
 800a176:	4618      	mov	r0, r3
 800a178:	f000 fb84 	bl	800a884 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	f042 0208 	orr.w	r2, r2, #8
 800a18a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	f022 0204 	bic.w	r2, r2, #4
 800a19a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a1a2:	68bb      	ldr	r3, [r7, #8]
 800a1a4:	691a      	ldr	r2, [r3, #16]
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	430a      	orrs	r2, r1
 800a1ac:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a1ae:	e021      	b.n	800a1f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	68b9      	ldr	r1, [r7, #8]
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	f000 fbb6 	bl	800a928 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a1ca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a1da:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a1e2:	68bb      	ldr	r3, [r7, #8]
 800a1e4:	691b      	ldr	r3, [r3, #16]
 800a1e6:	021a      	lsls	r2, r3, #8
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	430a      	orrs	r2, r1
 800a1ee:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a1f0:	e000      	b.n	800a1f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800a1f2:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	2201      	movs	r2, #1
 800a1f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	2200      	movs	r2, #0
 800a200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a204:	2300      	movs	r3, #0
}
 800a206:	4618      	mov	r0, r3
 800a208:	3710      	adds	r7, #16
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bd80      	pop	{r7, pc}
 800a20e:	bf00      	nop

0800a210 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b084      	sub	sp, #16
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
 800a218:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a220:	2b01      	cmp	r3, #1
 800a222:	d101      	bne.n	800a228 <HAL_TIM_ConfigClockSource+0x18>
 800a224:	2302      	movs	r3, #2
 800a226:	e0a6      	b.n	800a376 <HAL_TIM_ConfigClockSource+0x166>
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2201      	movs	r2, #1
 800a22c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2202      	movs	r2, #2
 800a234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	689b      	ldr	r3, [r3, #8]
 800a23e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a240:	68fa      	ldr	r2, [r7, #12]
 800a242:	4b4f      	ldr	r3, [pc, #316]	; (800a380 <HAL_TIM_ConfigClockSource+0x170>)
 800a244:	4013      	ands	r3, r2
 800a246:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a24e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	68fa      	ldr	r2, [r7, #12]
 800a256:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a258:	683b      	ldr	r3, [r7, #0]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	2b40      	cmp	r3, #64	; 0x40
 800a25e:	d067      	beq.n	800a330 <HAL_TIM_ConfigClockSource+0x120>
 800a260:	2b40      	cmp	r3, #64	; 0x40
 800a262:	d80b      	bhi.n	800a27c <HAL_TIM_ConfigClockSource+0x6c>
 800a264:	2b10      	cmp	r3, #16
 800a266:	d073      	beq.n	800a350 <HAL_TIM_ConfigClockSource+0x140>
 800a268:	2b10      	cmp	r3, #16
 800a26a:	d802      	bhi.n	800a272 <HAL_TIM_ConfigClockSource+0x62>
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d06f      	beq.n	800a350 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800a270:	e078      	b.n	800a364 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800a272:	2b20      	cmp	r3, #32
 800a274:	d06c      	beq.n	800a350 <HAL_TIM_ConfigClockSource+0x140>
 800a276:	2b30      	cmp	r3, #48	; 0x30
 800a278:	d06a      	beq.n	800a350 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800a27a:	e073      	b.n	800a364 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800a27c:	2b70      	cmp	r3, #112	; 0x70
 800a27e:	d00d      	beq.n	800a29c <HAL_TIM_ConfigClockSource+0x8c>
 800a280:	2b70      	cmp	r3, #112	; 0x70
 800a282:	d804      	bhi.n	800a28e <HAL_TIM_ConfigClockSource+0x7e>
 800a284:	2b50      	cmp	r3, #80	; 0x50
 800a286:	d033      	beq.n	800a2f0 <HAL_TIM_ConfigClockSource+0xe0>
 800a288:	2b60      	cmp	r3, #96	; 0x60
 800a28a:	d041      	beq.n	800a310 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800a28c:	e06a      	b.n	800a364 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800a28e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a292:	d066      	beq.n	800a362 <HAL_TIM_ConfigClockSource+0x152>
 800a294:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a298:	d017      	beq.n	800a2ca <HAL_TIM_ConfigClockSource+0xba>
      break;
 800a29a:	e063      	b.n	800a364 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	6818      	ldr	r0, [r3, #0]
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	6899      	ldr	r1, [r3, #8]
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	685a      	ldr	r2, [r3, #4]
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	68db      	ldr	r3, [r3, #12]
 800a2ac:	f000 fc0a 	bl	800aac4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	689b      	ldr	r3, [r3, #8]
 800a2b6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a2be:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	68fa      	ldr	r2, [r7, #12]
 800a2c6:	609a      	str	r2, [r3, #8]
      break;
 800a2c8:	e04c      	b.n	800a364 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	6818      	ldr	r0, [r3, #0]
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	6899      	ldr	r1, [r3, #8]
 800a2d2:	683b      	ldr	r3, [r7, #0]
 800a2d4:	685a      	ldr	r2, [r3, #4]
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	68db      	ldr	r3, [r3, #12]
 800a2da:	f000 fbf3 	bl	800aac4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	689a      	ldr	r2, [r3, #8]
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a2ec:	609a      	str	r2, [r3, #8]
      break;
 800a2ee:	e039      	b.n	800a364 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	6818      	ldr	r0, [r3, #0]
 800a2f4:	683b      	ldr	r3, [r7, #0]
 800a2f6:	6859      	ldr	r1, [r3, #4]
 800a2f8:	683b      	ldr	r3, [r7, #0]
 800a2fa:	68db      	ldr	r3, [r3, #12]
 800a2fc:	461a      	mov	r2, r3
 800a2fe:	f000 fb67 	bl	800a9d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	2150      	movs	r1, #80	; 0x50
 800a308:	4618      	mov	r0, r3
 800a30a:	f000 fbc0 	bl	800aa8e <TIM_ITRx_SetConfig>
      break;
 800a30e:	e029      	b.n	800a364 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	6818      	ldr	r0, [r3, #0]
 800a314:	683b      	ldr	r3, [r7, #0]
 800a316:	6859      	ldr	r1, [r3, #4]
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	68db      	ldr	r3, [r3, #12]
 800a31c:	461a      	mov	r2, r3
 800a31e:	f000 fb86 	bl	800aa2e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	2160      	movs	r1, #96	; 0x60
 800a328:	4618      	mov	r0, r3
 800a32a:	f000 fbb0 	bl	800aa8e <TIM_ITRx_SetConfig>
      break;
 800a32e:	e019      	b.n	800a364 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	6818      	ldr	r0, [r3, #0]
 800a334:	683b      	ldr	r3, [r7, #0]
 800a336:	6859      	ldr	r1, [r3, #4]
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	68db      	ldr	r3, [r3, #12]
 800a33c:	461a      	mov	r2, r3
 800a33e:	f000 fb47 	bl	800a9d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	2140      	movs	r1, #64	; 0x40
 800a348:	4618      	mov	r0, r3
 800a34a:	f000 fba0 	bl	800aa8e <TIM_ITRx_SetConfig>
      break;
 800a34e:	e009      	b.n	800a364 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681a      	ldr	r2, [r3, #0]
 800a354:	683b      	ldr	r3, [r7, #0]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	4619      	mov	r1, r3
 800a35a:	4610      	mov	r0, r2
 800a35c:	f000 fb97 	bl	800aa8e <TIM_ITRx_SetConfig>
      break;
 800a360:	e000      	b.n	800a364 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800a362:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	2201      	movs	r2, #1
 800a368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	2200      	movs	r2, #0
 800a370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a374:	2300      	movs	r3, #0
}
 800a376:	4618      	mov	r0, r3
 800a378:	3710      	adds	r7, #16
 800a37a:	46bd      	mov	sp, r7
 800a37c:	bd80      	pop	{r7, pc}
 800a37e:	bf00      	nop
 800a380:	fffeff88 	.word	0xfffeff88

0800a384 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a384:	b480      	push	{r7}
 800a386:	b083      	sub	sp, #12
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a38c:	bf00      	nop
 800a38e:	370c      	adds	r7, #12
 800a390:	46bd      	mov	sp, r7
 800a392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a396:	4770      	bx	lr

0800a398 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a398:	b480      	push	{r7}
 800a39a:	b083      	sub	sp, #12
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a3a0:	bf00      	nop
 800a3a2:	370c      	adds	r7, #12
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3aa:	4770      	bx	lr

0800a3ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a3ac:	b480      	push	{r7}
 800a3ae:	b083      	sub	sp, #12
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a3b4:	bf00      	nop
 800a3b6:	370c      	adds	r7, #12
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3be:	4770      	bx	lr

0800a3c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a3c0:	b480      	push	{r7}
 800a3c2:	b083      	sub	sp, #12
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a3c8:	bf00      	nop
 800a3ca:	370c      	adds	r7, #12
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d2:	4770      	bx	lr

0800a3d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a3d4:	b480      	push	{r7}
 800a3d6:	b085      	sub	sp, #20
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
 800a3dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	4a40      	ldr	r2, [pc, #256]	; (800a4e8 <TIM_Base_SetConfig+0x114>)
 800a3e8:	4293      	cmp	r3, r2
 800a3ea:	d013      	beq.n	800a414 <TIM_Base_SetConfig+0x40>
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a3f2:	d00f      	beq.n	800a414 <TIM_Base_SetConfig+0x40>
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	4a3d      	ldr	r2, [pc, #244]	; (800a4ec <TIM_Base_SetConfig+0x118>)
 800a3f8:	4293      	cmp	r3, r2
 800a3fa:	d00b      	beq.n	800a414 <TIM_Base_SetConfig+0x40>
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	4a3c      	ldr	r2, [pc, #240]	; (800a4f0 <TIM_Base_SetConfig+0x11c>)
 800a400:	4293      	cmp	r3, r2
 800a402:	d007      	beq.n	800a414 <TIM_Base_SetConfig+0x40>
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	4a3b      	ldr	r2, [pc, #236]	; (800a4f4 <TIM_Base_SetConfig+0x120>)
 800a408:	4293      	cmp	r3, r2
 800a40a:	d003      	beq.n	800a414 <TIM_Base_SetConfig+0x40>
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	4a3a      	ldr	r2, [pc, #232]	; (800a4f8 <TIM_Base_SetConfig+0x124>)
 800a410:	4293      	cmp	r3, r2
 800a412:	d108      	bne.n	800a426 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a41a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	685b      	ldr	r3, [r3, #4]
 800a420:	68fa      	ldr	r2, [r7, #12]
 800a422:	4313      	orrs	r3, r2
 800a424:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	4a2f      	ldr	r2, [pc, #188]	; (800a4e8 <TIM_Base_SetConfig+0x114>)
 800a42a:	4293      	cmp	r3, r2
 800a42c:	d02b      	beq.n	800a486 <TIM_Base_SetConfig+0xb2>
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a434:	d027      	beq.n	800a486 <TIM_Base_SetConfig+0xb2>
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	4a2c      	ldr	r2, [pc, #176]	; (800a4ec <TIM_Base_SetConfig+0x118>)
 800a43a:	4293      	cmp	r3, r2
 800a43c:	d023      	beq.n	800a486 <TIM_Base_SetConfig+0xb2>
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	4a2b      	ldr	r2, [pc, #172]	; (800a4f0 <TIM_Base_SetConfig+0x11c>)
 800a442:	4293      	cmp	r3, r2
 800a444:	d01f      	beq.n	800a486 <TIM_Base_SetConfig+0xb2>
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	4a2a      	ldr	r2, [pc, #168]	; (800a4f4 <TIM_Base_SetConfig+0x120>)
 800a44a:	4293      	cmp	r3, r2
 800a44c:	d01b      	beq.n	800a486 <TIM_Base_SetConfig+0xb2>
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	4a29      	ldr	r2, [pc, #164]	; (800a4f8 <TIM_Base_SetConfig+0x124>)
 800a452:	4293      	cmp	r3, r2
 800a454:	d017      	beq.n	800a486 <TIM_Base_SetConfig+0xb2>
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	4a28      	ldr	r2, [pc, #160]	; (800a4fc <TIM_Base_SetConfig+0x128>)
 800a45a:	4293      	cmp	r3, r2
 800a45c:	d013      	beq.n	800a486 <TIM_Base_SetConfig+0xb2>
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	4a27      	ldr	r2, [pc, #156]	; (800a500 <TIM_Base_SetConfig+0x12c>)
 800a462:	4293      	cmp	r3, r2
 800a464:	d00f      	beq.n	800a486 <TIM_Base_SetConfig+0xb2>
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	4a26      	ldr	r2, [pc, #152]	; (800a504 <TIM_Base_SetConfig+0x130>)
 800a46a:	4293      	cmp	r3, r2
 800a46c:	d00b      	beq.n	800a486 <TIM_Base_SetConfig+0xb2>
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	4a25      	ldr	r2, [pc, #148]	; (800a508 <TIM_Base_SetConfig+0x134>)
 800a472:	4293      	cmp	r3, r2
 800a474:	d007      	beq.n	800a486 <TIM_Base_SetConfig+0xb2>
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	4a24      	ldr	r2, [pc, #144]	; (800a50c <TIM_Base_SetConfig+0x138>)
 800a47a:	4293      	cmp	r3, r2
 800a47c:	d003      	beq.n	800a486 <TIM_Base_SetConfig+0xb2>
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	4a23      	ldr	r2, [pc, #140]	; (800a510 <TIM_Base_SetConfig+0x13c>)
 800a482:	4293      	cmp	r3, r2
 800a484:	d108      	bne.n	800a498 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a48c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a48e:	683b      	ldr	r3, [r7, #0]
 800a490:	68db      	ldr	r3, [r3, #12]
 800a492:	68fa      	ldr	r2, [r7, #12]
 800a494:	4313      	orrs	r3, r2
 800a496:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a49e:	683b      	ldr	r3, [r7, #0]
 800a4a0:	695b      	ldr	r3, [r3, #20]
 800a4a2:	4313      	orrs	r3, r2
 800a4a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	68fa      	ldr	r2, [r7, #12]
 800a4aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a4ac:	683b      	ldr	r3, [r7, #0]
 800a4ae:	689a      	ldr	r2, [r3, #8]
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a4b4:	683b      	ldr	r3, [r7, #0]
 800a4b6:	681a      	ldr	r2, [r3, #0]
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	4a0a      	ldr	r2, [pc, #40]	; (800a4e8 <TIM_Base_SetConfig+0x114>)
 800a4c0:	4293      	cmp	r3, r2
 800a4c2:	d003      	beq.n	800a4cc <TIM_Base_SetConfig+0xf8>
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	4a0c      	ldr	r2, [pc, #48]	; (800a4f8 <TIM_Base_SetConfig+0x124>)
 800a4c8:	4293      	cmp	r3, r2
 800a4ca:	d103      	bne.n	800a4d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a4cc:	683b      	ldr	r3, [r7, #0]
 800a4ce:	691a      	ldr	r2, [r3, #16]
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2201      	movs	r2, #1
 800a4d8:	615a      	str	r2, [r3, #20]
}
 800a4da:	bf00      	nop
 800a4dc:	3714      	adds	r7, #20
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e4:	4770      	bx	lr
 800a4e6:	bf00      	nop
 800a4e8:	40010000 	.word	0x40010000
 800a4ec:	40000400 	.word	0x40000400
 800a4f0:	40000800 	.word	0x40000800
 800a4f4:	40000c00 	.word	0x40000c00
 800a4f8:	40010400 	.word	0x40010400
 800a4fc:	40014000 	.word	0x40014000
 800a500:	40014400 	.word	0x40014400
 800a504:	40014800 	.word	0x40014800
 800a508:	40001800 	.word	0x40001800
 800a50c:	40001c00 	.word	0x40001c00
 800a510:	40002000 	.word	0x40002000

0800a514 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a514:	b480      	push	{r7}
 800a516:	b087      	sub	sp, #28
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
 800a51c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	6a1b      	ldr	r3, [r3, #32]
 800a522:	f023 0201 	bic.w	r2, r3, #1
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	6a1b      	ldr	r3, [r3, #32]
 800a52e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	685b      	ldr	r3, [r3, #4]
 800a534:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	699b      	ldr	r3, [r3, #24]
 800a53a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a53c:	68fa      	ldr	r2, [r7, #12]
 800a53e:	4b2b      	ldr	r3, [pc, #172]	; (800a5ec <TIM_OC1_SetConfig+0xd8>)
 800a540:	4013      	ands	r3, r2
 800a542:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	f023 0303 	bic.w	r3, r3, #3
 800a54a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a54c:	683b      	ldr	r3, [r7, #0]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	68fa      	ldr	r2, [r7, #12]
 800a552:	4313      	orrs	r3, r2
 800a554:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a556:	697b      	ldr	r3, [r7, #20]
 800a558:	f023 0302 	bic.w	r3, r3, #2
 800a55c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	689b      	ldr	r3, [r3, #8]
 800a562:	697a      	ldr	r2, [r7, #20]
 800a564:	4313      	orrs	r3, r2
 800a566:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	4a21      	ldr	r2, [pc, #132]	; (800a5f0 <TIM_OC1_SetConfig+0xdc>)
 800a56c:	4293      	cmp	r3, r2
 800a56e:	d003      	beq.n	800a578 <TIM_OC1_SetConfig+0x64>
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	4a20      	ldr	r2, [pc, #128]	; (800a5f4 <TIM_OC1_SetConfig+0xe0>)
 800a574:	4293      	cmp	r3, r2
 800a576:	d10c      	bne.n	800a592 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a578:	697b      	ldr	r3, [r7, #20]
 800a57a:	f023 0308 	bic.w	r3, r3, #8
 800a57e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a580:	683b      	ldr	r3, [r7, #0]
 800a582:	68db      	ldr	r3, [r3, #12]
 800a584:	697a      	ldr	r2, [r7, #20]
 800a586:	4313      	orrs	r3, r2
 800a588:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a58a:	697b      	ldr	r3, [r7, #20]
 800a58c:	f023 0304 	bic.w	r3, r3, #4
 800a590:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	4a16      	ldr	r2, [pc, #88]	; (800a5f0 <TIM_OC1_SetConfig+0xdc>)
 800a596:	4293      	cmp	r3, r2
 800a598:	d003      	beq.n	800a5a2 <TIM_OC1_SetConfig+0x8e>
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	4a15      	ldr	r2, [pc, #84]	; (800a5f4 <TIM_OC1_SetConfig+0xe0>)
 800a59e:	4293      	cmp	r3, r2
 800a5a0:	d111      	bne.n	800a5c6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a5a2:	693b      	ldr	r3, [r7, #16]
 800a5a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a5a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a5aa:	693b      	ldr	r3, [r7, #16]
 800a5ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a5b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a5b2:	683b      	ldr	r3, [r7, #0]
 800a5b4:	695b      	ldr	r3, [r3, #20]
 800a5b6:	693a      	ldr	r2, [r7, #16]
 800a5b8:	4313      	orrs	r3, r2
 800a5ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a5bc:	683b      	ldr	r3, [r7, #0]
 800a5be:	699b      	ldr	r3, [r3, #24]
 800a5c0:	693a      	ldr	r2, [r7, #16]
 800a5c2:	4313      	orrs	r3, r2
 800a5c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	693a      	ldr	r2, [r7, #16]
 800a5ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	68fa      	ldr	r2, [r7, #12]
 800a5d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a5d2:	683b      	ldr	r3, [r7, #0]
 800a5d4:	685a      	ldr	r2, [r3, #4]
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	697a      	ldr	r2, [r7, #20]
 800a5de:	621a      	str	r2, [r3, #32]
}
 800a5e0:	bf00      	nop
 800a5e2:	371c      	adds	r7, #28
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ea:	4770      	bx	lr
 800a5ec:	fffeff8f 	.word	0xfffeff8f
 800a5f0:	40010000 	.word	0x40010000
 800a5f4:	40010400 	.word	0x40010400

0800a5f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a5f8:	b480      	push	{r7}
 800a5fa:	b087      	sub	sp, #28
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
 800a600:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	6a1b      	ldr	r3, [r3, #32]
 800a606:	f023 0210 	bic.w	r2, r3, #16
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	6a1b      	ldr	r3, [r3, #32]
 800a612:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	685b      	ldr	r3, [r3, #4]
 800a618:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	699b      	ldr	r3, [r3, #24]
 800a61e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a620:	68fa      	ldr	r2, [r7, #12]
 800a622:	4b2e      	ldr	r3, [pc, #184]	; (800a6dc <TIM_OC2_SetConfig+0xe4>)
 800a624:	4013      	ands	r3, r2
 800a626:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a62e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a630:	683b      	ldr	r3, [r7, #0]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	021b      	lsls	r3, r3, #8
 800a636:	68fa      	ldr	r2, [r7, #12]
 800a638:	4313      	orrs	r3, r2
 800a63a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a63c:	697b      	ldr	r3, [r7, #20]
 800a63e:	f023 0320 	bic.w	r3, r3, #32
 800a642:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a644:	683b      	ldr	r3, [r7, #0]
 800a646:	689b      	ldr	r3, [r3, #8]
 800a648:	011b      	lsls	r3, r3, #4
 800a64a:	697a      	ldr	r2, [r7, #20]
 800a64c:	4313      	orrs	r3, r2
 800a64e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	4a23      	ldr	r2, [pc, #140]	; (800a6e0 <TIM_OC2_SetConfig+0xe8>)
 800a654:	4293      	cmp	r3, r2
 800a656:	d003      	beq.n	800a660 <TIM_OC2_SetConfig+0x68>
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	4a22      	ldr	r2, [pc, #136]	; (800a6e4 <TIM_OC2_SetConfig+0xec>)
 800a65c:	4293      	cmp	r3, r2
 800a65e:	d10d      	bne.n	800a67c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a660:	697b      	ldr	r3, [r7, #20]
 800a662:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a666:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a668:	683b      	ldr	r3, [r7, #0]
 800a66a:	68db      	ldr	r3, [r3, #12]
 800a66c:	011b      	lsls	r3, r3, #4
 800a66e:	697a      	ldr	r2, [r7, #20]
 800a670:	4313      	orrs	r3, r2
 800a672:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a674:	697b      	ldr	r3, [r7, #20]
 800a676:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a67a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	4a18      	ldr	r2, [pc, #96]	; (800a6e0 <TIM_OC2_SetConfig+0xe8>)
 800a680:	4293      	cmp	r3, r2
 800a682:	d003      	beq.n	800a68c <TIM_OC2_SetConfig+0x94>
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	4a17      	ldr	r2, [pc, #92]	; (800a6e4 <TIM_OC2_SetConfig+0xec>)
 800a688:	4293      	cmp	r3, r2
 800a68a:	d113      	bne.n	800a6b4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a68c:	693b      	ldr	r3, [r7, #16]
 800a68e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a692:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a694:	693b      	ldr	r3, [r7, #16]
 800a696:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a69a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	695b      	ldr	r3, [r3, #20]
 800a6a0:	009b      	lsls	r3, r3, #2
 800a6a2:	693a      	ldr	r2, [r7, #16]
 800a6a4:	4313      	orrs	r3, r2
 800a6a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a6a8:	683b      	ldr	r3, [r7, #0]
 800a6aa:	699b      	ldr	r3, [r3, #24]
 800a6ac:	009b      	lsls	r3, r3, #2
 800a6ae:	693a      	ldr	r2, [r7, #16]
 800a6b0:	4313      	orrs	r3, r2
 800a6b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	693a      	ldr	r2, [r7, #16]
 800a6b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	68fa      	ldr	r2, [r7, #12]
 800a6be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a6c0:	683b      	ldr	r3, [r7, #0]
 800a6c2:	685a      	ldr	r2, [r3, #4]
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	697a      	ldr	r2, [r7, #20]
 800a6cc:	621a      	str	r2, [r3, #32]
}
 800a6ce:	bf00      	nop
 800a6d0:	371c      	adds	r7, #28
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d8:	4770      	bx	lr
 800a6da:	bf00      	nop
 800a6dc:	feff8fff 	.word	0xfeff8fff
 800a6e0:	40010000 	.word	0x40010000
 800a6e4:	40010400 	.word	0x40010400

0800a6e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a6e8:	b480      	push	{r7}
 800a6ea:	b087      	sub	sp, #28
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
 800a6f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	6a1b      	ldr	r3, [r3, #32]
 800a6f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	6a1b      	ldr	r3, [r3, #32]
 800a702:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	685b      	ldr	r3, [r3, #4]
 800a708:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	69db      	ldr	r3, [r3, #28]
 800a70e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a710:	68fa      	ldr	r2, [r7, #12]
 800a712:	4b2d      	ldr	r3, [pc, #180]	; (800a7c8 <TIM_OC3_SetConfig+0xe0>)
 800a714:	4013      	ands	r3, r2
 800a716:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	f023 0303 	bic.w	r3, r3, #3
 800a71e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a720:	683b      	ldr	r3, [r7, #0]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	68fa      	ldr	r2, [r7, #12]
 800a726:	4313      	orrs	r3, r2
 800a728:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a72a:	697b      	ldr	r3, [r7, #20]
 800a72c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a730:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	689b      	ldr	r3, [r3, #8]
 800a736:	021b      	lsls	r3, r3, #8
 800a738:	697a      	ldr	r2, [r7, #20]
 800a73a:	4313      	orrs	r3, r2
 800a73c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	4a22      	ldr	r2, [pc, #136]	; (800a7cc <TIM_OC3_SetConfig+0xe4>)
 800a742:	4293      	cmp	r3, r2
 800a744:	d003      	beq.n	800a74e <TIM_OC3_SetConfig+0x66>
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	4a21      	ldr	r2, [pc, #132]	; (800a7d0 <TIM_OC3_SetConfig+0xe8>)
 800a74a:	4293      	cmp	r3, r2
 800a74c:	d10d      	bne.n	800a76a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a74e:	697b      	ldr	r3, [r7, #20]
 800a750:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a754:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a756:	683b      	ldr	r3, [r7, #0]
 800a758:	68db      	ldr	r3, [r3, #12]
 800a75a:	021b      	lsls	r3, r3, #8
 800a75c:	697a      	ldr	r2, [r7, #20]
 800a75e:	4313      	orrs	r3, r2
 800a760:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a762:	697b      	ldr	r3, [r7, #20]
 800a764:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a768:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	4a17      	ldr	r2, [pc, #92]	; (800a7cc <TIM_OC3_SetConfig+0xe4>)
 800a76e:	4293      	cmp	r3, r2
 800a770:	d003      	beq.n	800a77a <TIM_OC3_SetConfig+0x92>
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	4a16      	ldr	r2, [pc, #88]	; (800a7d0 <TIM_OC3_SetConfig+0xe8>)
 800a776:	4293      	cmp	r3, r2
 800a778:	d113      	bne.n	800a7a2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a77a:	693b      	ldr	r3, [r7, #16]
 800a77c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a780:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a782:	693b      	ldr	r3, [r7, #16]
 800a784:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a788:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a78a:	683b      	ldr	r3, [r7, #0]
 800a78c:	695b      	ldr	r3, [r3, #20]
 800a78e:	011b      	lsls	r3, r3, #4
 800a790:	693a      	ldr	r2, [r7, #16]
 800a792:	4313      	orrs	r3, r2
 800a794:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a796:	683b      	ldr	r3, [r7, #0]
 800a798:	699b      	ldr	r3, [r3, #24]
 800a79a:	011b      	lsls	r3, r3, #4
 800a79c:	693a      	ldr	r2, [r7, #16]
 800a79e:	4313      	orrs	r3, r2
 800a7a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	693a      	ldr	r2, [r7, #16]
 800a7a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	68fa      	ldr	r2, [r7, #12]
 800a7ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a7ae:	683b      	ldr	r3, [r7, #0]
 800a7b0:	685a      	ldr	r2, [r3, #4]
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	697a      	ldr	r2, [r7, #20]
 800a7ba:	621a      	str	r2, [r3, #32]
}
 800a7bc:	bf00      	nop
 800a7be:	371c      	adds	r7, #28
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c6:	4770      	bx	lr
 800a7c8:	fffeff8f 	.word	0xfffeff8f
 800a7cc:	40010000 	.word	0x40010000
 800a7d0:	40010400 	.word	0x40010400

0800a7d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a7d4:	b480      	push	{r7}
 800a7d6:	b087      	sub	sp, #28
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
 800a7dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	6a1b      	ldr	r3, [r3, #32]
 800a7e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	6a1b      	ldr	r3, [r3, #32]
 800a7ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	685b      	ldr	r3, [r3, #4]
 800a7f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	69db      	ldr	r3, [r3, #28]
 800a7fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a7fc:	68fa      	ldr	r2, [r7, #12]
 800a7fe:	4b1e      	ldr	r3, [pc, #120]	; (800a878 <TIM_OC4_SetConfig+0xa4>)
 800a800:	4013      	ands	r3, r2
 800a802:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a80a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a80c:	683b      	ldr	r3, [r7, #0]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	021b      	lsls	r3, r3, #8
 800a812:	68fa      	ldr	r2, [r7, #12]
 800a814:	4313      	orrs	r3, r2
 800a816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a818:	693b      	ldr	r3, [r7, #16]
 800a81a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a81e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a820:	683b      	ldr	r3, [r7, #0]
 800a822:	689b      	ldr	r3, [r3, #8]
 800a824:	031b      	lsls	r3, r3, #12
 800a826:	693a      	ldr	r2, [r7, #16]
 800a828:	4313      	orrs	r3, r2
 800a82a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	4a13      	ldr	r2, [pc, #76]	; (800a87c <TIM_OC4_SetConfig+0xa8>)
 800a830:	4293      	cmp	r3, r2
 800a832:	d003      	beq.n	800a83c <TIM_OC4_SetConfig+0x68>
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	4a12      	ldr	r2, [pc, #72]	; (800a880 <TIM_OC4_SetConfig+0xac>)
 800a838:	4293      	cmp	r3, r2
 800a83a:	d109      	bne.n	800a850 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a83c:	697b      	ldr	r3, [r7, #20]
 800a83e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a842:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	695b      	ldr	r3, [r3, #20]
 800a848:	019b      	lsls	r3, r3, #6
 800a84a:	697a      	ldr	r2, [r7, #20]
 800a84c:	4313      	orrs	r3, r2
 800a84e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	697a      	ldr	r2, [r7, #20]
 800a854:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	68fa      	ldr	r2, [r7, #12]
 800a85a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a85c:	683b      	ldr	r3, [r7, #0]
 800a85e:	685a      	ldr	r2, [r3, #4]
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	693a      	ldr	r2, [r7, #16]
 800a868:	621a      	str	r2, [r3, #32]
}
 800a86a:	bf00      	nop
 800a86c:	371c      	adds	r7, #28
 800a86e:	46bd      	mov	sp, r7
 800a870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a874:	4770      	bx	lr
 800a876:	bf00      	nop
 800a878:	feff8fff 	.word	0xfeff8fff
 800a87c:	40010000 	.word	0x40010000
 800a880:	40010400 	.word	0x40010400

0800a884 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a884:	b480      	push	{r7}
 800a886:	b087      	sub	sp, #28
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
 800a88c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	6a1b      	ldr	r3, [r3, #32]
 800a892:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	6a1b      	ldr	r3, [r3, #32]
 800a89e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	685b      	ldr	r3, [r3, #4]
 800a8a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a8ac:	68fa      	ldr	r2, [r7, #12]
 800a8ae:	4b1b      	ldr	r3, [pc, #108]	; (800a91c <TIM_OC5_SetConfig+0x98>)
 800a8b0:	4013      	ands	r3, r2
 800a8b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a8b4:	683b      	ldr	r3, [r7, #0]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	68fa      	ldr	r2, [r7, #12]
 800a8ba:	4313      	orrs	r3, r2
 800a8bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a8be:	693b      	ldr	r3, [r7, #16]
 800a8c0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a8c4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a8c6:	683b      	ldr	r3, [r7, #0]
 800a8c8:	689b      	ldr	r3, [r3, #8]
 800a8ca:	041b      	lsls	r3, r3, #16
 800a8cc:	693a      	ldr	r2, [r7, #16]
 800a8ce:	4313      	orrs	r3, r2
 800a8d0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	4a12      	ldr	r2, [pc, #72]	; (800a920 <TIM_OC5_SetConfig+0x9c>)
 800a8d6:	4293      	cmp	r3, r2
 800a8d8:	d003      	beq.n	800a8e2 <TIM_OC5_SetConfig+0x5e>
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	4a11      	ldr	r2, [pc, #68]	; (800a924 <TIM_OC5_SetConfig+0xa0>)
 800a8de:	4293      	cmp	r3, r2
 800a8e0:	d109      	bne.n	800a8f6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a8e2:	697b      	ldr	r3, [r7, #20]
 800a8e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a8e8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a8ea:	683b      	ldr	r3, [r7, #0]
 800a8ec:	695b      	ldr	r3, [r3, #20]
 800a8ee:	021b      	lsls	r3, r3, #8
 800a8f0:	697a      	ldr	r2, [r7, #20]
 800a8f2:	4313      	orrs	r3, r2
 800a8f4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	697a      	ldr	r2, [r7, #20]
 800a8fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	68fa      	ldr	r2, [r7, #12]
 800a900:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a902:	683b      	ldr	r3, [r7, #0]
 800a904:	685a      	ldr	r2, [r3, #4]
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	693a      	ldr	r2, [r7, #16]
 800a90e:	621a      	str	r2, [r3, #32]
}
 800a910:	bf00      	nop
 800a912:	371c      	adds	r7, #28
 800a914:	46bd      	mov	sp, r7
 800a916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91a:	4770      	bx	lr
 800a91c:	fffeff8f 	.word	0xfffeff8f
 800a920:	40010000 	.word	0x40010000
 800a924:	40010400 	.word	0x40010400

0800a928 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a928:	b480      	push	{r7}
 800a92a:	b087      	sub	sp, #28
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
 800a930:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	6a1b      	ldr	r3, [r3, #32]
 800a936:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	6a1b      	ldr	r3, [r3, #32]
 800a942:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	685b      	ldr	r3, [r3, #4]
 800a948:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a94e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a950:	68fa      	ldr	r2, [r7, #12]
 800a952:	4b1c      	ldr	r3, [pc, #112]	; (800a9c4 <TIM_OC6_SetConfig+0x9c>)
 800a954:	4013      	ands	r3, r2
 800a956:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a958:	683b      	ldr	r3, [r7, #0]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	021b      	lsls	r3, r3, #8
 800a95e:	68fa      	ldr	r2, [r7, #12]
 800a960:	4313      	orrs	r3, r2
 800a962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a964:	693b      	ldr	r3, [r7, #16]
 800a966:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a96a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	689b      	ldr	r3, [r3, #8]
 800a970:	051b      	lsls	r3, r3, #20
 800a972:	693a      	ldr	r2, [r7, #16]
 800a974:	4313      	orrs	r3, r2
 800a976:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	4a13      	ldr	r2, [pc, #76]	; (800a9c8 <TIM_OC6_SetConfig+0xa0>)
 800a97c:	4293      	cmp	r3, r2
 800a97e:	d003      	beq.n	800a988 <TIM_OC6_SetConfig+0x60>
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	4a12      	ldr	r2, [pc, #72]	; (800a9cc <TIM_OC6_SetConfig+0xa4>)
 800a984:	4293      	cmp	r3, r2
 800a986:	d109      	bne.n	800a99c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a988:	697b      	ldr	r3, [r7, #20]
 800a98a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a98e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a990:	683b      	ldr	r3, [r7, #0]
 800a992:	695b      	ldr	r3, [r3, #20]
 800a994:	029b      	lsls	r3, r3, #10
 800a996:	697a      	ldr	r2, [r7, #20]
 800a998:	4313      	orrs	r3, r2
 800a99a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	697a      	ldr	r2, [r7, #20]
 800a9a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	68fa      	ldr	r2, [r7, #12]
 800a9a6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	685a      	ldr	r2, [r3, #4]
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	693a      	ldr	r2, [r7, #16]
 800a9b4:	621a      	str	r2, [r3, #32]
}
 800a9b6:	bf00      	nop
 800a9b8:	371c      	adds	r7, #28
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c0:	4770      	bx	lr
 800a9c2:	bf00      	nop
 800a9c4:	feff8fff 	.word	0xfeff8fff
 800a9c8:	40010000 	.word	0x40010000
 800a9cc:	40010400 	.word	0x40010400

0800a9d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a9d0:	b480      	push	{r7}
 800a9d2:	b087      	sub	sp, #28
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	60f8      	str	r0, [r7, #12]
 800a9d8:	60b9      	str	r1, [r7, #8]
 800a9da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	6a1b      	ldr	r3, [r3, #32]
 800a9e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	6a1b      	ldr	r3, [r3, #32]
 800a9e6:	f023 0201 	bic.w	r2, r3, #1
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	699b      	ldr	r3, [r3, #24]
 800a9f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a9f4:	693b      	ldr	r3, [r7, #16]
 800a9f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a9fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	011b      	lsls	r3, r3, #4
 800aa00:	693a      	ldr	r2, [r7, #16]
 800aa02:	4313      	orrs	r3, r2
 800aa04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800aa06:	697b      	ldr	r3, [r7, #20]
 800aa08:	f023 030a 	bic.w	r3, r3, #10
 800aa0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800aa0e:	697a      	ldr	r2, [r7, #20]
 800aa10:	68bb      	ldr	r3, [r7, #8]
 800aa12:	4313      	orrs	r3, r2
 800aa14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	693a      	ldr	r2, [r7, #16]
 800aa1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	697a      	ldr	r2, [r7, #20]
 800aa20:	621a      	str	r2, [r3, #32]
}
 800aa22:	bf00      	nop
 800aa24:	371c      	adds	r7, #28
 800aa26:	46bd      	mov	sp, r7
 800aa28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2c:	4770      	bx	lr

0800aa2e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aa2e:	b480      	push	{r7}
 800aa30:	b087      	sub	sp, #28
 800aa32:	af00      	add	r7, sp, #0
 800aa34:	60f8      	str	r0, [r7, #12]
 800aa36:	60b9      	str	r1, [r7, #8]
 800aa38:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	6a1b      	ldr	r3, [r3, #32]
 800aa3e:	f023 0210 	bic.w	r2, r3, #16
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	699b      	ldr	r3, [r3, #24]
 800aa4a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	6a1b      	ldr	r3, [r3, #32]
 800aa50:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800aa52:	697b      	ldr	r3, [r7, #20]
 800aa54:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800aa58:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	031b      	lsls	r3, r3, #12
 800aa5e:	697a      	ldr	r2, [r7, #20]
 800aa60:	4313      	orrs	r3, r2
 800aa62:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800aa64:	693b      	ldr	r3, [r7, #16]
 800aa66:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800aa6a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800aa6c:	68bb      	ldr	r3, [r7, #8]
 800aa6e:	011b      	lsls	r3, r3, #4
 800aa70:	693a      	ldr	r2, [r7, #16]
 800aa72:	4313      	orrs	r3, r2
 800aa74:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	697a      	ldr	r2, [r7, #20]
 800aa7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	693a      	ldr	r2, [r7, #16]
 800aa80:	621a      	str	r2, [r3, #32]
}
 800aa82:	bf00      	nop
 800aa84:	371c      	adds	r7, #28
 800aa86:	46bd      	mov	sp, r7
 800aa88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8c:	4770      	bx	lr

0800aa8e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800aa8e:	b480      	push	{r7}
 800aa90:	b085      	sub	sp, #20
 800aa92:	af00      	add	r7, sp, #0
 800aa94:	6078      	str	r0, [r7, #4]
 800aa96:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	689b      	ldr	r3, [r3, #8]
 800aa9c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aaa4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800aaa6:	683a      	ldr	r2, [r7, #0]
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	4313      	orrs	r3, r2
 800aaac:	f043 0307 	orr.w	r3, r3, #7
 800aab0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	68fa      	ldr	r2, [r7, #12]
 800aab6:	609a      	str	r2, [r3, #8]
}
 800aab8:	bf00      	nop
 800aaba:	3714      	adds	r7, #20
 800aabc:	46bd      	mov	sp, r7
 800aabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac2:	4770      	bx	lr

0800aac4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800aac4:	b480      	push	{r7}
 800aac6:	b087      	sub	sp, #28
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	60f8      	str	r0, [r7, #12]
 800aacc:	60b9      	str	r1, [r7, #8]
 800aace:	607a      	str	r2, [r7, #4]
 800aad0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	689b      	ldr	r3, [r3, #8]
 800aad6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aad8:	697b      	ldr	r3, [r7, #20]
 800aada:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800aade:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800aae0:	683b      	ldr	r3, [r7, #0]
 800aae2:	021a      	lsls	r2, r3, #8
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	431a      	orrs	r2, r3
 800aae8:	68bb      	ldr	r3, [r7, #8]
 800aaea:	4313      	orrs	r3, r2
 800aaec:	697a      	ldr	r2, [r7, #20]
 800aaee:	4313      	orrs	r3, r2
 800aaf0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	697a      	ldr	r2, [r7, #20]
 800aaf6:	609a      	str	r2, [r3, #8]
}
 800aaf8:	bf00      	nop
 800aafa:	371c      	adds	r7, #28
 800aafc:	46bd      	mov	sp, r7
 800aafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab02:	4770      	bx	lr

0800ab04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ab04:	b480      	push	{r7}
 800ab06:	b085      	sub	sp, #20
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
 800ab0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ab14:	2b01      	cmp	r3, #1
 800ab16:	d101      	bne.n	800ab1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ab18:	2302      	movs	r3, #2
 800ab1a:	e045      	b.n	800aba8 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2201      	movs	r2, #1
 800ab20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	2202      	movs	r2, #2
 800ab28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	685b      	ldr	r3, [r3, #4]
 800ab32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	689b      	ldr	r3, [r3, #8]
 800ab3a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	4a1c      	ldr	r2, [pc, #112]	; (800abb4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800ab42:	4293      	cmp	r3, r2
 800ab44:	d004      	beq.n	800ab50 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	4a1b      	ldr	r2, [pc, #108]	; (800abb8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800ab4c:	4293      	cmp	r3, r2
 800ab4e:	d108      	bne.n	800ab62 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ab56:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ab58:	683b      	ldr	r3, [r7, #0]
 800ab5a:	685b      	ldr	r3, [r3, #4]
 800ab5c:	68fa      	ldr	r2, [r7, #12]
 800ab5e:	4313      	orrs	r3, r2
 800ab60:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab68:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ab6a:	683b      	ldr	r3, [r7, #0]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	68fa      	ldr	r2, [r7, #12]
 800ab70:	4313      	orrs	r3, r2
 800ab72:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800ab74:	68bb      	ldr	r3, [r7, #8]
 800ab76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ab7a:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ab7c:	683b      	ldr	r3, [r7, #0]
 800ab7e:	689b      	ldr	r3, [r3, #8]
 800ab80:	68ba      	ldr	r2, [r7, #8]
 800ab82:	4313      	orrs	r3, r2
 800ab84:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	68fa      	ldr	r2, [r7, #12]
 800ab8c:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	68ba      	ldr	r2, [r7, #8]
 800ab94:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	2201      	movs	r2, #1
 800ab9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	2200      	movs	r2, #0
 800aba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aba6:	2300      	movs	r3, #0
}
 800aba8:	4618      	mov	r0, r3
 800abaa:	3714      	adds	r7, #20
 800abac:	46bd      	mov	sp, r7
 800abae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb2:	4770      	bx	lr
 800abb4:	40010000 	.word	0x40010000
 800abb8:	40010400 	.word	0x40010400

0800abbc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800abbc:	b480      	push	{r7}
 800abbe:	b083      	sub	sp, #12
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800abc4:	bf00      	nop
 800abc6:	370c      	adds	r7, #12
 800abc8:	46bd      	mov	sp, r7
 800abca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abce:	4770      	bx	lr

0800abd0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800abd0:	b480      	push	{r7}
 800abd2:	b083      	sub	sp, #12
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800abd8:	bf00      	nop
 800abda:	370c      	adds	r7, #12
 800abdc:	46bd      	mov	sp, r7
 800abde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe2:	4770      	bx	lr

0800abe4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800abe4:	b480      	push	{r7}
 800abe6:	b083      	sub	sp, #12
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800abec:	bf00      	nop
 800abee:	370c      	adds	r7, #12
 800abf0:	46bd      	mov	sp, r7
 800abf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf6:	4770      	bx	lr

0800abf8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800abf8:	b580      	push	{r7, lr}
 800abfa:	b082      	sub	sp, #8
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d101      	bne.n	800ac0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ac06:	2301      	movs	r3, #1
 800ac08:	e040      	b.n	800ac8c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d106      	bne.n	800ac20 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	2200      	movs	r2, #0
 800ac16:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ac1a:	6878      	ldr	r0, [r7, #4]
 800ac1c:	f7f7 fdcc 	bl	80027b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2224      	movs	r2, #36	; 0x24
 800ac24:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	681a      	ldr	r2, [r3, #0]
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	f022 0201 	bic.w	r2, r2, #1
 800ac34:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ac36:	6878      	ldr	r0, [r7, #4]
 800ac38:	f000 f82c 	bl	800ac94 <UART_SetConfig>
 800ac3c:	4603      	mov	r3, r0
 800ac3e:	2b01      	cmp	r3, #1
 800ac40:	d101      	bne.n	800ac46 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800ac42:	2301      	movs	r3, #1
 800ac44:	e022      	b.n	800ac8c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d002      	beq.n	800ac54 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800ac4e:	6878      	ldr	r0, [r7, #4]
 800ac50:	f000 fac4 	bl	800b1dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	685a      	ldr	r2, [r3, #4]
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ac62:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	689a      	ldr	r2, [r3, #8]
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ac72:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	681a      	ldr	r2, [r3, #0]
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	f042 0201 	orr.w	r2, r2, #1
 800ac82:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ac84:	6878      	ldr	r0, [r7, #4]
 800ac86:	f000 fb4b 	bl	800b320 <UART_CheckIdleState>
 800ac8a:	4603      	mov	r3, r0
}
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	3708      	adds	r7, #8
 800ac90:	46bd      	mov	sp, r7
 800ac92:	bd80      	pop	{r7, pc}

0800ac94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ac94:	b580      	push	{r7, lr}
 800ac96:	b088      	sub	sp, #32
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800aca0:	2300      	movs	r3, #0
 800aca2:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	689a      	ldr	r2, [r3, #8]
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	691b      	ldr	r3, [r3, #16]
 800acac:	431a      	orrs	r2, r3
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	695b      	ldr	r3, [r3, #20]
 800acb2:	431a      	orrs	r2, r3
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	69db      	ldr	r3, [r3, #28]
 800acb8:	4313      	orrs	r3, r2
 800acba:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	681a      	ldr	r2, [r3, #0]
 800acc2:	4bb1      	ldr	r3, [pc, #708]	; (800af88 <UART_SetConfig+0x2f4>)
 800acc4:	4013      	ands	r3, r2
 800acc6:	687a      	ldr	r2, [r7, #4]
 800acc8:	6812      	ldr	r2, [r2, #0]
 800acca:	6939      	ldr	r1, [r7, #16]
 800accc:	430b      	orrs	r3, r1
 800acce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	685b      	ldr	r3, [r3, #4]
 800acd6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	68da      	ldr	r2, [r3, #12]
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	430a      	orrs	r2, r1
 800ace4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	699b      	ldr	r3, [r3, #24]
 800acea:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	6a1b      	ldr	r3, [r3, #32]
 800acf0:	693a      	ldr	r2, [r7, #16]
 800acf2:	4313      	orrs	r3, r2
 800acf4:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	689b      	ldr	r3, [r3, #8]
 800acfc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	693a      	ldr	r2, [r7, #16]
 800ad06:	430a      	orrs	r2, r1
 800ad08:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	4a9f      	ldr	r2, [pc, #636]	; (800af8c <UART_SetConfig+0x2f8>)
 800ad10:	4293      	cmp	r3, r2
 800ad12:	d121      	bne.n	800ad58 <UART_SetConfig+0xc4>
 800ad14:	4b9e      	ldr	r3, [pc, #632]	; (800af90 <UART_SetConfig+0x2fc>)
 800ad16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad1a:	f003 0303 	and.w	r3, r3, #3
 800ad1e:	2b03      	cmp	r3, #3
 800ad20:	d816      	bhi.n	800ad50 <UART_SetConfig+0xbc>
 800ad22:	a201      	add	r2, pc, #4	; (adr r2, 800ad28 <UART_SetConfig+0x94>)
 800ad24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad28:	0800ad39 	.word	0x0800ad39
 800ad2c:	0800ad45 	.word	0x0800ad45
 800ad30:	0800ad3f 	.word	0x0800ad3f
 800ad34:	0800ad4b 	.word	0x0800ad4b
 800ad38:	2301      	movs	r3, #1
 800ad3a:	77fb      	strb	r3, [r7, #31]
 800ad3c:	e151      	b.n	800afe2 <UART_SetConfig+0x34e>
 800ad3e:	2302      	movs	r3, #2
 800ad40:	77fb      	strb	r3, [r7, #31]
 800ad42:	e14e      	b.n	800afe2 <UART_SetConfig+0x34e>
 800ad44:	2304      	movs	r3, #4
 800ad46:	77fb      	strb	r3, [r7, #31]
 800ad48:	e14b      	b.n	800afe2 <UART_SetConfig+0x34e>
 800ad4a:	2308      	movs	r3, #8
 800ad4c:	77fb      	strb	r3, [r7, #31]
 800ad4e:	e148      	b.n	800afe2 <UART_SetConfig+0x34e>
 800ad50:	2310      	movs	r3, #16
 800ad52:	77fb      	strb	r3, [r7, #31]
 800ad54:	bf00      	nop
 800ad56:	e144      	b.n	800afe2 <UART_SetConfig+0x34e>
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	4a8d      	ldr	r2, [pc, #564]	; (800af94 <UART_SetConfig+0x300>)
 800ad5e:	4293      	cmp	r3, r2
 800ad60:	d134      	bne.n	800adcc <UART_SetConfig+0x138>
 800ad62:	4b8b      	ldr	r3, [pc, #556]	; (800af90 <UART_SetConfig+0x2fc>)
 800ad64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad68:	f003 030c 	and.w	r3, r3, #12
 800ad6c:	2b0c      	cmp	r3, #12
 800ad6e:	d829      	bhi.n	800adc4 <UART_SetConfig+0x130>
 800ad70:	a201      	add	r2, pc, #4	; (adr r2, 800ad78 <UART_SetConfig+0xe4>)
 800ad72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad76:	bf00      	nop
 800ad78:	0800adad 	.word	0x0800adad
 800ad7c:	0800adc5 	.word	0x0800adc5
 800ad80:	0800adc5 	.word	0x0800adc5
 800ad84:	0800adc5 	.word	0x0800adc5
 800ad88:	0800adb9 	.word	0x0800adb9
 800ad8c:	0800adc5 	.word	0x0800adc5
 800ad90:	0800adc5 	.word	0x0800adc5
 800ad94:	0800adc5 	.word	0x0800adc5
 800ad98:	0800adb3 	.word	0x0800adb3
 800ad9c:	0800adc5 	.word	0x0800adc5
 800ada0:	0800adc5 	.word	0x0800adc5
 800ada4:	0800adc5 	.word	0x0800adc5
 800ada8:	0800adbf 	.word	0x0800adbf
 800adac:	2300      	movs	r3, #0
 800adae:	77fb      	strb	r3, [r7, #31]
 800adb0:	e117      	b.n	800afe2 <UART_SetConfig+0x34e>
 800adb2:	2302      	movs	r3, #2
 800adb4:	77fb      	strb	r3, [r7, #31]
 800adb6:	e114      	b.n	800afe2 <UART_SetConfig+0x34e>
 800adb8:	2304      	movs	r3, #4
 800adba:	77fb      	strb	r3, [r7, #31]
 800adbc:	e111      	b.n	800afe2 <UART_SetConfig+0x34e>
 800adbe:	2308      	movs	r3, #8
 800adc0:	77fb      	strb	r3, [r7, #31]
 800adc2:	e10e      	b.n	800afe2 <UART_SetConfig+0x34e>
 800adc4:	2310      	movs	r3, #16
 800adc6:	77fb      	strb	r3, [r7, #31]
 800adc8:	bf00      	nop
 800adca:	e10a      	b.n	800afe2 <UART_SetConfig+0x34e>
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	4a71      	ldr	r2, [pc, #452]	; (800af98 <UART_SetConfig+0x304>)
 800add2:	4293      	cmp	r3, r2
 800add4:	d120      	bne.n	800ae18 <UART_SetConfig+0x184>
 800add6:	4b6e      	ldr	r3, [pc, #440]	; (800af90 <UART_SetConfig+0x2fc>)
 800add8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800addc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800ade0:	2b10      	cmp	r3, #16
 800ade2:	d00f      	beq.n	800ae04 <UART_SetConfig+0x170>
 800ade4:	2b10      	cmp	r3, #16
 800ade6:	d802      	bhi.n	800adee <UART_SetConfig+0x15a>
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d005      	beq.n	800adf8 <UART_SetConfig+0x164>
 800adec:	e010      	b.n	800ae10 <UART_SetConfig+0x17c>
 800adee:	2b20      	cmp	r3, #32
 800adf0:	d005      	beq.n	800adfe <UART_SetConfig+0x16a>
 800adf2:	2b30      	cmp	r3, #48	; 0x30
 800adf4:	d009      	beq.n	800ae0a <UART_SetConfig+0x176>
 800adf6:	e00b      	b.n	800ae10 <UART_SetConfig+0x17c>
 800adf8:	2300      	movs	r3, #0
 800adfa:	77fb      	strb	r3, [r7, #31]
 800adfc:	e0f1      	b.n	800afe2 <UART_SetConfig+0x34e>
 800adfe:	2302      	movs	r3, #2
 800ae00:	77fb      	strb	r3, [r7, #31]
 800ae02:	e0ee      	b.n	800afe2 <UART_SetConfig+0x34e>
 800ae04:	2304      	movs	r3, #4
 800ae06:	77fb      	strb	r3, [r7, #31]
 800ae08:	e0eb      	b.n	800afe2 <UART_SetConfig+0x34e>
 800ae0a:	2308      	movs	r3, #8
 800ae0c:	77fb      	strb	r3, [r7, #31]
 800ae0e:	e0e8      	b.n	800afe2 <UART_SetConfig+0x34e>
 800ae10:	2310      	movs	r3, #16
 800ae12:	77fb      	strb	r3, [r7, #31]
 800ae14:	bf00      	nop
 800ae16:	e0e4      	b.n	800afe2 <UART_SetConfig+0x34e>
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	4a5f      	ldr	r2, [pc, #380]	; (800af9c <UART_SetConfig+0x308>)
 800ae1e:	4293      	cmp	r3, r2
 800ae20:	d120      	bne.n	800ae64 <UART_SetConfig+0x1d0>
 800ae22:	4b5b      	ldr	r3, [pc, #364]	; (800af90 <UART_SetConfig+0x2fc>)
 800ae24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae28:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ae2c:	2b40      	cmp	r3, #64	; 0x40
 800ae2e:	d00f      	beq.n	800ae50 <UART_SetConfig+0x1bc>
 800ae30:	2b40      	cmp	r3, #64	; 0x40
 800ae32:	d802      	bhi.n	800ae3a <UART_SetConfig+0x1a6>
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d005      	beq.n	800ae44 <UART_SetConfig+0x1b0>
 800ae38:	e010      	b.n	800ae5c <UART_SetConfig+0x1c8>
 800ae3a:	2b80      	cmp	r3, #128	; 0x80
 800ae3c:	d005      	beq.n	800ae4a <UART_SetConfig+0x1b6>
 800ae3e:	2bc0      	cmp	r3, #192	; 0xc0
 800ae40:	d009      	beq.n	800ae56 <UART_SetConfig+0x1c2>
 800ae42:	e00b      	b.n	800ae5c <UART_SetConfig+0x1c8>
 800ae44:	2300      	movs	r3, #0
 800ae46:	77fb      	strb	r3, [r7, #31]
 800ae48:	e0cb      	b.n	800afe2 <UART_SetConfig+0x34e>
 800ae4a:	2302      	movs	r3, #2
 800ae4c:	77fb      	strb	r3, [r7, #31]
 800ae4e:	e0c8      	b.n	800afe2 <UART_SetConfig+0x34e>
 800ae50:	2304      	movs	r3, #4
 800ae52:	77fb      	strb	r3, [r7, #31]
 800ae54:	e0c5      	b.n	800afe2 <UART_SetConfig+0x34e>
 800ae56:	2308      	movs	r3, #8
 800ae58:	77fb      	strb	r3, [r7, #31]
 800ae5a:	e0c2      	b.n	800afe2 <UART_SetConfig+0x34e>
 800ae5c:	2310      	movs	r3, #16
 800ae5e:	77fb      	strb	r3, [r7, #31]
 800ae60:	bf00      	nop
 800ae62:	e0be      	b.n	800afe2 <UART_SetConfig+0x34e>
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	4a4d      	ldr	r2, [pc, #308]	; (800afa0 <UART_SetConfig+0x30c>)
 800ae6a:	4293      	cmp	r3, r2
 800ae6c:	d124      	bne.n	800aeb8 <UART_SetConfig+0x224>
 800ae6e:	4b48      	ldr	r3, [pc, #288]	; (800af90 <UART_SetConfig+0x2fc>)
 800ae70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ae78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae7c:	d012      	beq.n	800aea4 <UART_SetConfig+0x210>
 800ae7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae82:	d802      	bhi.n	800ae8a <UART_SetConfig+0x1f6>
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d007      	beq.n	800ae98 <UART_SetConfig+0x204>
 800ae88:	e012      	b.n	800aeb0 <UART_SetConfig+0x21c>
 800ae8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ae8e:	d006      	beq.n	800ae9e <UART_SetConfig+0x20a>
 800ae90:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ae94:	d009      	beq.n	800aeaa <UART_SetConfig+0x216>
 800ae96:	e00b      	b.n	800aeb0 <UART_SetConfig+0x21c>
 800ae98:	2300      	movs	r3, #0
 800ae9a:	77fb      	strb	r3, [r7, #31]
 800ae9c:	e0a1      	b.n	800afe2 <UART_SetConfig+0x34e>
 800ae9e:	2302      	movs	r3, #2
 800aea0:	77fb      	strb	r3, [r7, #31]
 800aea2:	e09e      	b.n	800afe2 <UART_SetConfig+0x34e>
 800aea4:	2304      	movs	r3, #4
 800aea6:	77fb      	strb	r3, [r7, #31]
 800aea8:	e09b      	b.n	800afe2 <UART_SetConfig+0x34e>
 800aeaa:	2308      	movs	r3, #8
 800aeac:	77fb      	strb	r3, [r7, #31]
 800aeae:	e098      	b.n	800afe2 <UART_SetConfig+0x34e>
 800aeb0:	2310      	movs	r3, #16
 800aeb2:	77fb      	strb	r3, [r7, #31]
 800aeb4:	bf00      	nop
 800aeb6:	e094      	b.n	800afe2 <UART_SetConfig+0x34e>
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	4a39      	ldr	r2, [pc, #228]	; (800afa4 <UART_SetConfig+0x310>)
 800aebe:	4293      	cmp	r3, r2
 800aec0:	d124      	bne.n	800af0c <UART_SetConfig+0x278>
 800aec2:	4b33      	ldr	r3, [pc, #204]	; (800af90 <UART_SetConfig+0x2fc>)
 800aec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aec8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800aecc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aed0:	d012      	beq.n	800aef8 <UART_SetConfig+0x264>
 800aed2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aed6:	d802      	bhi.n	800aede <UART_SetConfig+0x24a>
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d007      	beq.n	800aeec <UART_SetConfig+0x258>
 800aedc:	e012      	b.n	800af04 <UART_SetConfig+0x270>
 800aede:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aee2:	d006      	beq.n	800aef2 <UART_SetConfig+0x25e>
 800aee4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800aee8:	d009      	beq.n	800aefe <UART_SetConfig+0x26a>
 800aeea:	e00b      	b.n	800af04 <UART_SetConfig+0x270>
 800aeec:	2301      	movs	r3, #1
 800aeee:	77fb      	strb	r3, [r7, #31]
 800aef0:	e077      	b.n	800afe2 <UART_SetConfig+0x34e>
 800aef2:	2302      	movs	r3, #2
 800aef4:	77fb      	strb	r3, [r7, #31]
 800aef6:	e074      	b.n	800afe2 <UART_SetConfig+0x34e>
 800aef8:	2304      	movs	r3, #4
 800aefa:	77fb      	strb	r3, [r7, #31]
 800aefc:	e071      	b.n	800afe2 <UART_SetConfig+0x34e>
 800aefe:	2308      	movs	r3, #8
 800af00:	77fb      	strb	r3, [r7, #31]
 800af02:	e06e      	b.n	800afe2 <UART_SetConfig+0x34e>
 800af04:	2310      	movs	r3, #16
 800af06:	77fb      	strb	r3, [r7, #31]
 800af08:	bf00      	nop
 800af0a:	e06a      	b.n	800afe2 <UART_SetConfig+0x34e>
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	4a25      	ldr	r2, [pc, #148]	; (800afa8 <UART_SetConfig+0x314>)
 800af12:	4293      	cmp	r3, r2
 800af14:	d124      	bne.n	800af60 <UART_SetConfig+0x2cc>
 800af16:	4b1e      	ldr	r3, [pc, #120]	; (800af90 <UART_SetConfig+0x2fc>)
 800af18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af1c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800af20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af24:	d012      	beq.n	800af4c <UART_SetConfig+0x2b8>
 800af26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af2a:	d802      	bhi.n	800af32 <UART_SetConfig+0x29e>
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d007      	beq.n	800af40 <UART_SetConfig+0x2ac>
 800af30:	e012      	b.n	800af58 <UART_SetConfig+0x2c4>
 800af32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800af36:	d006      	beq.n	800af46 <UART_SetConfig+0x2b2>
 800af38:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800af3c:	d009      	beq.n	800af52 <UART_SetConfig+0x2be>
 800af3e:	e00b      	b.n	800af58 <UART_SetConfig+0x2c4>
 800af40:	2300      	movs	r3, #0
 800af42:	77fb      	strb	r3, [r7, #31]
 800af44:	e04d      	b.n	800afe2 <UART_SetConfig+0x34e>
 800af46:	2302      	movs	r3, #2
 800af48:	77fb      	strb	r3, [r7, #31]
 800af4a:	e04a      	b.n	800afe2 <UART_SetConfig+0x34e>
 800af4c:	2304      	movs	r3, #4
 800af4e:	77fb      	strb	r3, [r7, #31]
 800af50:	e047      	b.n	800afe2 <UART_SetConfig+0x34e>
 800af52:	2308      	movs	r3, #8
 800af54:	77fb      	strb	r3, [r7, #31]
 800af56:	e044      	b.n	800afe2 <UART_SetConfig+0x34e>
 800af58:	2310      	movs	r3, #16
 800af5a:	77fb      	strb	r3, [r7, #31]
 800af5c:	bf00      	nop
 800af5e:	e040      	b.n	800afe2 <UART_SetConfig+0x34e>
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	4a11      	ldr	r2, [pc, #68]	; (800afac <UART_SetConfig+0x318>)
 800af66:	4293      	cmp	r3, r2
 800af68:	d139      	bne.n	800afde <UART_SetConfig+0x34a>
 800af6a:	4b09      	ldr	r3, [pc, #36]	; (800af90 <UART_SetConfig+0x2fc>)
 800af6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af70:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800af74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800af78:	d027      	beq.n	800afca <UART_SetConfig+0x336>
 800af7a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800af7e:	d817      	bhi.n	800afb0 <UART_SetConfig+0x31c>
 800af80:	2b00      	cmp	r3, #0
 800af82:	d01c      	beq.n	800afbe <UART_SetConfig+0x32a>
 800af84:	e027      	b.n	800afd6 <UART_SetConfig+0x342>
 800af86:	bf00      	nop
 800af88:	efff69f3 	.word	0xefff69f3
 800af8c:	40011000 	.word	0x40011000
 800af90:	40023800 	.word	0x40023800
 800af94:	40004400 	.word	0x40004400
 800af98:	40004800 	.word	0x40004800
 800af9c:	40004c00 	.word	0x40004c00
 800afa0:	40005000 	.word	0x40005000
 800afa4:	40011400 	.word	0x40011400
 800afa8:	40007800 	.word	0x40007800
 800afac:	40007c00 	.word	0x40007c00
 800afb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800afb4:	d006      	beq.n	800afc4 <UART_SetConfig+0x330>
 800afb6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800afba:	d009      	beq.n	800afd0 <UART_SetConfig+0x33c>
 800afbc:	e00b      	b.n	800afd6 <UART_SetConfig+0x342>
 800afbe:	2300      	movs	r3, #0
 800afc0:	77fb      	strb	r3, [r7, #31]
 800afc2:	e00e      	b.n	800afe2 <UART_SetConfig+0x34e>
 800afc4:	2302      	movs	r3, #2
 800afc6:	77fb      	strb	r3, [r7, #31]
 800afc8:	e00b      	b.n	800afe2 <UART_SetConfig+0x34e>
 800afca:	2304      	movs	r3, #4
 800afcc:	77fb      	strb	r3, [r7, #31]
 800afce:	e008      	b.n	800afe2 <UART_SetConfig+0x34e>
 800afd0:	2308      	movs	r3, #8
 800afd2:	77fb      	strb	r3, [r7, #31]
 800afd4:	e005      	b.n	800afe2 <UART_SetConfig+0x34e>
 800afd6:	2310      	movs	r3, #16
 800afd8:	77fb      	strb	r3, [r7, #31]
 800afda:	bf00      	nop
 800afdc:	e001      	b.n	800afe2 <UART_SetConfig+0x34e>
 800afde:	2310      	movs	r3, #16
 800afe0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	69db      	ldr	r3, [r3, #28]
 800afe6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800afea:	d17c      	bne.n	800b0e6 <UART_SetConfig+0x452>
  {
    switch (clocksource)
 800afec:	7ffb      	ldrb	r3, [r7, #31]
 800afee:	2b08      	cmp	r3, #8
 800aff0:	d859      	bhi.n	800b0a6 <UART_SetConfig+0x412>
 800aff2:	a201      	add	r2, pc, #4	; (adr r2, 800aff8 <UART_SetConfig+0x364>)
 800aff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aff8:	0800b01d 	.word	0x0800b01d
 800affc:	0800b03b 	.word	0x0800b03b
 800b000:	0800b059 	.word	0x0800b059
 800b004:	0800b0a7 	.word	0x0800b0a7
 800b008:	0800b071 	.word	0x0800b071
 800b00c:	0800b0a7 	.word	0x0800b0a7
 800b010:	0800b0a7 	.word	0x0800b0a7
 800b014:	0800b0a7 	.word	0x0800b0a7
 800b018:	0800b08f 	.word	0x0800b08f
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800b01c:	f7fd fa30 	bl	8008480 <HAL_RCC_GetPCLK1Freq>
 800b020:	4603      	mov	r3, r0
 800b022:	005a      	lsls	r2, r3, #1
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	685b      	ldr	r3, [r3, #4]
 800b028:	085b      	lsrs	r3, r3, #1
 800b02a:	441a      	add	r2, r3
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	685b      	ldr	r3, [r3, #4]
 800b030:	fbb2 f3f3 	udiv	r3, r2, r3
 800b034:	b29b      	uxth	r3, r3
 800b036:	61bb      	str	r3, [r7, #24]
        break;
 800b038:	e038      	b.n	800b0ac <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800b03a:	f7fd fa35 	bl	80084a8 <HAL_RCC_GetPCLK2Freq>
 800b03e:	4603      	mov	r3, r0
 800b040:	005a      	lsls	r2, r3, #1
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	685b      	ldr	r3, [r3, #4]
 800b046:	085b      	lsrs	r3, r3, #1
 800b048:	441a      	add	r2, r3
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	685b      	ldr	r3, [r3, #4]
 800b04e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b052:	b29b      	uxth	r3, r3
 800b054:	61bb      	str	r3, [r7, #24]
        break;
 800b056:	e029      	b.n	800b0ac <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	685b      	ldr	r3, [r3, #4]
 800b05c:	085a      	lsrs	r2, r3, #1
 800b05e:	4b5d      	ldr	r3, [pc, #372]	; (800b1d4 <UART_SetConfig+0x540>)
 800b060:	4413      	add	r3, r2
 800b062:	687a      	ldr	r2, [r7, #4]
 800b064:	6852      	ldr	r2, [r2, #4]
 800b066:	fbb3 f3f2 	udiv	r3, r3, r2
 800b06a:	b29b      	uxth	r3, r3
 800b06c:	61bb      	str	r3, [r7, #24]
        break;
 800b06e:	e01d      	b.n	800b0ac <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800b070:	f7fd f948 	bl	8008304 <HAL_RCC_GetSysClockFreq>
 800b074:	4603      	mov	r3, r0
 800b076:	005a      	lsls	r2, r3, #1
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	685b      	ldr	r3, [r3, #4]
 800b07c:	085b      	lsrs	r3, r3, #1
 800b07e:	441a      	add	r2, r3
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	685b      	ldr	r3, [r3, #4]
 800b084:	fbb2 f3f3 	udiv	r3, r2, r3
 800b088:	b29b      	uxth	r3, r3
 800b08a:	61bb      	str	r3, [r7, #24]
        break;
 800b08c:	e00e      	b.n	800b0ac <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	685b      	ldr	r3, [r3, #4]
 800b092:	085b      	lsrs	r3, r3, #1
 800b094:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	685b      	ldr	r3, [r3, #4]
 800b09c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0a0:	b29b      	uxth	r3, r3
 800b0a2:	61bb      	str	r3, [r7, #24]
        break;
 800b0a4:	e002      	b.n	800b0ac <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800b0a6:	2301      	movs	r3, #1
 800b0a8:	75fb      	strb	r3, [r7, #23]
        break;
 800b0aa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b0ac:	69bb      	ldr	r3, [r7, #24]
 800b0ae:	2b0f      	cmp	r3, #15
 800b0b0:	d916      	bls.n	800b0e0 <UART_SetConfig+0x44c>
 800b0b2:	69bb      	ldr	r3, [r7, #24]
 800b0b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b0b8:	d212      	bcs.n	800b0e0 <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b0ba:	69bb      	ldr	r3, [r7, #24]
 800b0bc:	b29b      	uxth	r3, r3
 800b0be:	f023 030f 	bic.w	r3, r3, #15
 800b0c2:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b0c4:	69bb      	ldr	r3, [r7, #24]
 800b0c6:	085b      	lsrs	r3, r3, #1
 800b0c8:	b29b      	uxth	r3, r3
 800b0ca:	f003 0307 	and.w	r3, r3, #7
 800b0ce:	b29a      	uxth	r2, r3
 800b0d0:	89fb      	ldrh	r3, [r7, #14]
 800b0d2:	4313      	orrs	r3, r2
 800b0d4:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	89fa      	ldrh	r2, [r7, #14]
 800b0dc:	60da      	str	r2, [r3, #12]
 800b0de:	e06e      	b.n	800b1be <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 800b0e0:	2301      	movs	r3, #1
 800b0e2:	75fb      	strb	r3, [r7, #23]
 800b0e4:	e06b      	b.n	800b1be <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 800b0e6:	7ffb      	ldrb	r3, [r7, #31]
 800b0e8:	2b08      	cmp	r3, #8
 800b0ea:	d857      	bhi.n	800b19c <UART_SetConfig+0x508>
 800b0ec:	a201      	add	r2, pc, #4	; (adr r2, 800b0f4 <UART_SetConfig+0x460>)
 800b0ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0f2:	bf00      	nop
 800b0f4:	0800b119 	.word	0x0800b119
 800b0f8:	0800b135 	.word	0x0800b135
 800b0fc:	0800b151 	.word	0x0800b151
 800b100:	0800b19d 	.word	0x0800b19d
 800b104:	0800b169 	.word	0x0800b169
 800b108:	0800b19d 	.word	0x0800b19d
 800b10c:	0800b19d 	.word	0x0800b19d
 800b110:	0800b19d 	.word	0x0800b19d
 800b114:	0800b185 	.word	0x0800b185
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800b118:	f7fd f9b2 	bl	8008480 <HAL_RCC_GetPCLK1Freq>
 800b11c:	4602      	mov	r2, r0
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	685b      	ldr	r3, [r3, #4]
 800b122:	085b      	lsrs	r3, r3, #1
 800b124:	441a      	add	r2, r3
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	685b      	ldr	r3, [r3, #4]
 800b12a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b12e:	b29b      	uxth	r3, r3
 800b130:	61bb      	str	r3, [r7, #24]
        break;
 800b132:	e036      	b.n	800b1a2 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800b134:	f7fd f9b8 	bl	80084a8 <HAL_RCC_GetPCLK2Freq>
 800b138:	4602      	mov	r2, r0
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	685b      	ldr	r3, [r3, #4]
 800b13e:	085b      	lsrs	r3, r3, #1
 800b140:	441a      	add	r2, r3
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	685b      	ldr	r3, [r3, #4]
 800b146:	fbb2 f3f3 	udiv	r3, r2, r3
 800b14a:	b29b      	uxth	r3, r3
 800b14c:	61bb      	str	r3, [r7, #24]
        break;
 800b14e:	e028      	b.n	800b1a2 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	685b      	ldr	r3, [r3, #4]
 800b154:	085a      	lsrs	r2, r3, #1
 800b156:	4b20      	ldr	r3, [pc, #128]	; (800b1d8 <UART_SetConfig+0x544>)
 800b158:	4413      	add	r3, r2
 800b15a:	687a      	ldr	r2, [r7, #4]
 800b15c:	6852      	ldr	r2, [r2, #4]
 800b15e:	fbb3 f3f2 	udiv	r3, r3, r2
 800b162:	b29b      	uxth	r3, r3
 800b164:	61bb      	str	r3, [r7, #24]
        break;
 800b166:	e01c      	b.n	800b1a2 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800b168:	f7fd f8cc 	bl	8008304 <HAL_RCC_GetSysClockFreq>
 800b16c:	4602      	mov	r2, r0
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	685b      	ldr	r3, [r3, #4]
 800b172:	085b      	lsrs	r3, r3, #1
 800b174:	441a      	add	r2, r3
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	685b      	ldr	r3, [r3, #4]
 800b17a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b17e:	b29b      	uxth	r3, r3
 800b180:	61bb      	str	r3, [r7, #24]
        break;
 800b182:	e00e      	b.n	800b1a2 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	685b      	ldr	r3, [r3, #4]
 800b188:	085b      	lsrs	r3, r3, #1
 800b18a:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	685b      	ldr	r3, [r3, #4]
 800b192:	fbb2 f3f3 	udiv	r3, r2, r3
 800b196:	b29b      	uxth	r3, r3
 800b198:	61bb      	str	r3, [r7, #24]
        break;
 800b19a:	e002      	b.n	800b1a2 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800b19c:	2301      	movs	r3, #1
 800b19e:	75fb      	strb	r3, [r7, #23]
        break;
 800b1a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b1a2:	69bb      	ldr	r3, [r7, #24]
 800b1a4:	2b0f      	cmp	r3, #15
 800b1a6:	d908      	bls.n	800b1ba <UART_SetConfig+0x526>
 800b1a8:	69bb      	ldr	r3, [r7, #24]
 800b1aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b1ae:	d204      	bcs.n	800b1ba <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	69ba      	ldr	r2, [r7, #24]
 800b1b6:	60da      	str	r2, [r3, #12]
 800b1b8:	e001      	b.n	800b1be <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 800b1ba:	2301      	movs	r3, #1
 800b1bc:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	2200      	movs	r2, #0
 800b1c2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800b1ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	3720      	adds	r7, #32
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	bd80      	pop	{r7, pc}
 800b1d4:	01e84800 	.word	0x01e84800
 800b1d8:	00f42400 	.word	0x00f42400

0800b1dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b1dc:	b480      	push	{r7}
 800b1de:	b083      	sub	sp, #12
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1e8:	f003 0301 	and.w	r3, r3, #1
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d00a      	beq.n	800b206 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	685b      	ldr	r3, [r3, #4]
 800b1f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	430a      	orrs	r2, r1
 800b204:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b20a:	f003 0302 	and.w	r3, r3, #2
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d00a      	beq.n	800b228 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	685b      	ldr	r3, [r3, #4]
 800b218:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	430a      	orrs	r2, r1
 800b226:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b22c:	f003 0304 	and.w	r3, r3, #4
 800b230:	2b00      	cmp	r3, #0
 800b232:	d00a      	beq.n	800b24a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	685b      	ldr	r3, [r3, #4]
 800b23a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	430a      	orrs	r2, r1
 800b248:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b24e:	f003 0308 	and.w	r3, r3, #8
 800b252:	2b00      	cmp	r3, #0
 800b254:	d00a      	beq.n	800b26c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	685b      	ldr	r3, [r3, #4]
 800b25c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	430a      	orrs	r2, r1
 800b26a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b270:	f003 0310 	and.w	r3, r3, #16
 800b274:	2b00      	cmp	r3, #0
 800b276:	d00a      	beq.n	800b28e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	689b      	ldr	r3, [r3, #8]
 800b27e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	430a      	orrs	r2, r1
 800b28c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b292:	f003 0320 	and.w	r3, r3, #32
 800b296:	2b00      	cmp	r3, #0
 800b298:	d00a      	beq.n	800b2b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	689b      	ldr	r3, [r3, #8]
 800b2a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	430a      	orrs	r2, r1
 800b2ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d01a      	beq.n	800b2f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	685b      	ldr	r3, [r3, #4]
 800b2c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	430a      	orrs	r2, r1
 800b2d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b2da:	d10a      	bne.n	800b2f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	685b      	ldr	r3, [r3, #4]
 800b2e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	430a      	orrs	r2, r1
 800b2f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d00a      	beq.n	800b314 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	685b      	ldr	r3, [r3, #4]
 800b304:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	430a      	orrs	r2, r1
 800b312:	605a      	str	r2, [r3, #4]
  }
}
 800b314:	bf00      	nop
 800b316:	370c      	adds	r7, #12
 800b318:	46bd      	mov	sp, r7
 800b31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b31e:	4770      	bx	lr

0800b320 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b320:	b580      	push	{r7, lr}
 800b322:	b086      	sub	sp, #24
 800b324:	af02      	add	r7, sp, #8
 800b326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	2200      	movs	r2, #0
 800b32c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800b32e:	f7f7 fe57 	bl	8002fe0 <HAL_GetTick>
 800b332:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	f003 0308 	and.w	r3, r3, #8
 800b33e:	2b08      	cmp	r3, #8
 800b340:	d10e      	bne.n	800b360 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b342:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b346:	9300      	str	r3, [sp, #0]
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	2200      	movs	r2, #0
 800b34c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b350:	6878      	ldr	r0, [r7, #4]
 800b352:	f000 f814 	bl	800b37e <UART_WaitOnFlagUntilTimeout>
 800b356:	4603      	mov	r3, r0
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d001      	beq.n	800b360 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b35c:	2303      	movs	r3, #3
 800b35e:	e00a      	b.n	800b376 <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	2220      	movs	r2, #32
 800b364:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	2220      	movs	r2, #32
 800b36a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	2200      	movs	r2, #0
 800b370:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800b374:	2300      	movs	r3, #0
}
 800b376:	4618      	mov	r0, r3
 800b378:	3710      	adds	r7, #16
 800b37a:	46bd      	mov	sp, r7
 800b37c:	bd80      	pop	{r7, pc}

0800b37e <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800b37e:	b580      	push	{r7, lr}
 800b380:	b084      	sub	sp, #16
 800b382:	af00      	add	r7, sp, #0
 800b384:	60f8      	str	r0, [r7, #12]
 800b386:	60b9      	str	r1, [r7, #8]
 800b388:	603b      	str	r3, [r7, #0]
 800b38a:	4613      	mov	r3, r2
 800b38c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b38e:	e02a      	b.n	800b3e6 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b390:	69bb      	ldr	r3, [r7, #24]
 800b392:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b396:	d026      	beq.n	800b3e6 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b398:	f7f7 fe22 	bl	8002fe0 <HAL_GetTick>
 800b39c:	4602      	mov	r2, r0
 800b39e:	683b      	ldr	r3, [r7, #0]
 800b3a0:	1ad3      	subs	r3, r2, r3
 800b3a2:	69ba      	ldr	r2, [r7, #24]
 800b3a4:	429a      	cmp	r2, r3
 800b3a6:	d302      	bcc.n	800b3ae <UART_WaitOnFlagUntilTimeout+0x30>
 800b3a8:	69bb      	ldr	r3, [r7, #24]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d11b      	bne.n	800b3e6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	681a      	ldr	r2, [r3, #0]
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b3bc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	689a      	ldr	r2, [r3, #8]
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	f022 0201 	bic.w	r2, r2, #1
 800b3cc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	2220      	movs	r2, #32
 800b3d2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	2220      	movs	r2, #32
 800b3d8:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	2200      	movs	r2, #0
 800b3de:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800b3e2:	2303      	movs	r3, #3
 800b3e4:	e00f      	b.n	800b406 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	69da      	ldr	r2, [r3, #28]
 800b3ec:	68bb      	ldr	r3, [r7, #8]
 800b3ee:	4013      	ands	r3, r2
 800b3f0:	68ba      	ldr	r2, [r7, #8]
 800b3f2:	429a      	cmp	r2, r3
 800b3f4:	bf0c      	ite	eq
 800b3f6:	2301      	moveq	r3, #1
 800b3f8:	2300      	movne	r3, #0
 800b3fa:	b2db      	uxtb	r3, r3
 800b3fc:	461a      	mov	r2, r3
 800b3fe:	79fb      	ldrb	r3, [r7, #7]
 800b400:	429a      	cmp	r2, r3
 800b402:	d0c5      	beq.n	800b390 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b404:	2300      	movs	r3, #0
}
 800b406:	4618      	mov	r0, r3
 800b408:	3710      	adds	r7, #16
 800b40a:	46bd      	mov	sp, r7
 800b40c:	bd80      	pop	{r7, pc}

0800b40e <HAL_WWDG_Init>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Init(WWDG_HandleTypeDef *hwwdg)
{
 800b40e:	b580      	push	{r7, lr}
 800b410:	b082      	sub	sp, #8
 800b412:	af00      	add	r7, sp, #0
 800b414:	6078      	str	r0, [r7, #4]
  /* Check the WWDG handle allocation */
  if (hwwdg == NULL)
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d101      	bne.n	800b420 <HAL_WWDG_Init+0x12>
  {
    return HAL_ERROR;
 800b41c:	2301      	movs	r3, #1
 800b41e:	e016      	b.n	800b44e <HAL_WWDG_Init+0x40>

  /* Init the low level hardware */
  hwwdg->MspInitCallback(hwwdg);
#else
  /* Init the low level hardware */
  HAL_WWDG_MspInit(hwwdg);
 800b420:	6878      	ldr	r0, [r7, #4]
 800b422:	f7f7 fb71 	bl	8002b08 <HAL_WWDG_MspInit>
#endif

  /* Set WWDG Counter */
  WRITE_REG(hwwdg->Instance->CR, (WWDG_CR_WDGA | hwwdg->Init.Counter));
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	68da      	ldr	r2, [r3, #12]
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b432:	601a      	str	r2, [r3, #0]

  /* Set WWDG Prescaler and Window */
  WRITE_REG(hwwdg->Instance->CFR, (hwwdg->Init.EWIMode | hwwdg->Init.Prescaler | hwwdg->Init.Window));
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	691a      	ldr	r2, [r3, #16]
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	685b      	ldr	r3, [r3, #4]
 800b43c:	ea42 0103 	orr.w	r1, r2, r3
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	689a      	ldr	r2, [r3, #8]
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	430a      	orrs	r2, r1
 800b44a:	605a      	str	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800b44c:	2300      	movs	r3, #0
}
 800b44e:	4618      	mov	r0, r3
 800b450:	3708      	adds	r7, #8
 800b452:	46bd      	mov	sp, r7
 800b454:	bd80      	pop	{r7, pc}
	...

0800b458 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800b458:	b480      	push	{r7}
 800b45a:	b085      	sub	sp, #20
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
 800b460:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800b462:	2300      	movs	r3, #0
 800b464:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800b466:	2300      	movs	r3, #0
 800b468:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800b46a:	683b      	ldr	r3, [r7, #0]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	2b01      	cmp	r3, #1
 800b470:	d027      	beq.n	800b4c2 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800b478:	68fa      	ldr	r2, [r7, #12]
 800b47a:	4b2f      	ldr	r3, [pc, #188]	; (800b538 <FMC_SDRAM_Init+0xe0>)
 800b47c:	4013      	ands	r3, r2
 800b47e:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b480:	683b      	ldr	r3, [r7, #0]
 800b482:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800b484:	683b      	ldr	r3, [r7, #0]
 800b486:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b488:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800b48a:	683b      	ldr	r3, [r7, #0]
 800b48c:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800b48e:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800b490:	683b      	ldr	r3, [r7, #0]
 800b492:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800b494:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800b496:	683b      	ldr	r3, [r7, #0]
 800b498:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800b49a:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800b49c:	683b      	ldr	r3, [r7, #0]
 800b49e:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800b4a0:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800b4a2:	683b      	ldr	r3, [r7, #0]
 800b4a4:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800b4a6:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800b4a8:	683b      	ldr	r3, [r7, #0]
 800b4aa:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800b4ac:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800b4ae:	683b      	ldr	r3, [r7, #0]
 800b4b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800b4b2:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b4b4:	68fa      	ldr	r2, [r7, #12]
 800b4b6:	4313      	orrs	r3, r2
 800b4b8:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	68fa      	ldr	r2, [r7, #12]
 800b4be:	601a      	str	r2, [r3, #0]
 800b4c0:	e032      	b.n	800b528 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b4ce:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b4d0:	683b      	ldr	r3, [r7, #0]
 800b4d2:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800b4d4:	683b      	ldr	r3, [r7, #0]
 800b4d6:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b4d8:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800b4da:	683b      	ldr	r3, [r7, #0]
 800b4dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800b4de:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b4e0:	68fa      	ldr	r2, [r7, #12]
 800b4e2:	4313      	orrs	r3, r2
 800b4e4:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	685b      	ldr	r3, [r3, #4]
 800b4ea:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800b4ec:	68ba      	ldr	r2, [r7, #8]
 800b4ee:	4b12      	ldr	r3, [pc, #72]	; (800b538 <FMC_SDRAM_Init+0xe0>)
 800b4f0:	4013      	ands	r3, r2
 800b4f2:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b4f4:	683b      	ldr	r3, [r7, #0]
 800b4f6:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800b4f8:	683b      	ldr	r3, [r7, #0]
 800b4fa:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b4fc:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800b4fe:	683b      	ldr	r3, [r7, #0]
 800b500:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800b502:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800b504:	683b      	ldr	r3, [r7, #0]
 800b506:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800b508:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800b50a:	683b      	ldr	r3, [r7, #0]
 800b50c:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800b50e:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800b510:	683b      	ldr	r3, [r7, #0]
 800b512:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800b514:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b516:	68ba      	ldr	r2, [r7, #8]
 800b518:	4313      	orrs	r3, r2
 800b51a:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	68fa      	ldr	r2, [r7, #12]
 800b520:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	68ba      	ldr	r2, [r7, #8]
 800b526:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800b528:	2300      	movs	r3, #0
}
 800b52a:	4618      	mov	r0, r3
 800b52c:	3714      	adds	r7, #20
 800b52e:	46bd      	mov	sp, r7
 800b530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b534:	4770      	bx	lr
 800b536:	bf00      	nop
 800b538:	ffff8000 	.word	0xffff8000

0800b53c <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b53c:	b480      	push	{r7}
 800b53e:	b087      	sub	sp, #28
 800b540:	af00      	add	r7, sp, #0
 800b542:	60f8      	str	r0, [r7, #12]
 800b544:	60b9      	str	r1, [r7, #8]
 800b546:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800b548:	2300      	movs	r3, #0
 800b54a:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800b54c:	2300      	movs	r3, #0
 800b54e:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	2b01      	cmp	r3, #1
 800b554:	d02e      	beq.n	800b5b4 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	689b      	ldr	r3, [r3, #8]
 800b55a:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800b55c:	697b      	ldr	r3, [r7, #20]
 800b55e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b562:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b564:	68bb      	ldr	r3, [r7, #8]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800b56a:	68bb      	ldr	r3, [r7, #8]
 800b56c:	685b      	ldr	r3, [r3, #4]
 800b56e:	3b01      	subs	r3, #1
 800b570:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b572:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800b574:	68bb      	ldr	r3, [r7, #8]
 800b576:	689b      	ldr	r3, [r3, #8]
 800b578:	3b01      	subs	r3, #1
 800b57a:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800b57c:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800b57e:	68bb      	ldr	r3, [r7, #8]
 800b580:	68db      	ldr	r3, [r3, #12]
 800b582:	3b01      	subs	r3, #1
 800b584:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800b586:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800b588:	68bb      	ldr	r3, [r7, #8]
 800b58a:	691b      	ldr	r3, [r3, #16]
 800b58c:	3b01      	subs	r3, #1
 800b58e:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800b590:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800b592:	68bb      	ldr	r3, [r7, #8]
 800b594:	695b      	ldr	r3, [r3, #20]
 800b596:	3b01      	subs	r3, #1
 800b598:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800b59a:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800b59c:	68bb      	ldr	r3, [r7, #8]
 800b59e:	699b      	ldr	r3, [r3, #24]
 800b5a0:	3b01      	subs	r3, #1
 800b5a2:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b5a4:	4313      	orrs	r3, r2
 800b5a6:	697a      	ldr	r2, [r7, #20]
 800b5a8:	4313      	orrs	r3, r2
 800b5aa:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	697a      	ldr	r2, [r7, #20]
 800b5b0:	609a      	str	r2, [r3, #8]
 800b5b2:	e039      	b.n	800b628 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	689b      	ldr	r3, [r3, #8]
 800b5b8:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800b5ba:	697a      	ldr	r2, [r7, #20]
 800b5bc:	4b1e      	ldr	r3, [pc, #120]	; (800b638 <FMC_SDRAM_Timing_Init+0xfc>)
 800b5be:	4013      	ands	r3, r2
 800b5c0:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800b5c2:	68bb      	ldr	r3, [r7, #8]
 800b5c4:	68db      	ldr	r3, [r3, #12]
 800b5c6:	3b01      	subs	r3, #1
 800b5c8:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800b5ca:	68bb      	ldr	r3, [r7, #8]
 800b5cc:	695b      	ldr	r3, [r3, #20]
 800b5ce:	3b01      	subs	r3, #1
 800b5d0:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800b5d2:	4313      	orrs	r3, r2
 800b5d4:	697a      	ldr	r2, [r7, #20]
 800b5d6:	4313      	orrs	r3, r2
 800b5d8:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	68db      	ldr	r3, [r3, #12]
 800b5de:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800b5e0:	693b      	ldr	r3, [r7, #16]
 800b5e2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b5e6:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b5e8:	68bb      	ldr	r3, [r7, #8]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800b5ee:	68bb      	ldr	r3, [r7, #8]
 800b5f0:	685b      	ldr	r3, [r3, #4]
 800b5f2:	3b01      	subs	r3, #1
 800b5f4:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b5f6:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800b5f8:	68bb      	ldr	r3, [r7, #8]
 800b5fa:	689b      	ldr	r3, [r3, #8]
 800b5fc:	3b01      	subs	r3, #1
 800b5fe:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800b600:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800b602:	68bb      	ldr	r3, [r7, #8]
 800b604:	691b      	ldr	r3, [r3, #16]
 800b606:	3b01      	subs	r3, #1
 800b608:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800b60a:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800b60c:	68bb      	ldr	r3, [r7, #8]
 800b60e:	699b      	ldr	r3, [r3, #24]
 800b610:	3b01      	subs	r3, #1
 800b612:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b614:	4313      	orrs	r3, r2
 800b616:	693a      	ldr	r2, [r7, #16]
 800b618:	4313      	orrs	r3, r2
 800b61a:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	697a      	ldr	r2, [r7, #20]
 800b620:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	693a      	ldr	r2, [r7, #16]
 800b626:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800b628:	2300      	movs	r3, #0
}
 800b62a:	4618      	mov	r0, r3
 800b62c:	371c      	adds	r7, #28
 800b62e:	46bd      	mov	sp, r7
 800b630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b634:	4770      	bx	lr
 800b636:	bf00      	nop
 800b638:	ff0f0fff 	.word	0xff0f0fff

0800b63c <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800b63c:	b084      	sub	sp, #16
 800b63e:	b480      	push	{r7}
 800b640:	b085      	sub	sp, #20
 800b642:	af00      	add	r7, sp, #0
 800b644:	6078      	str	r0, [r7, #4]
 800b646:	f107 001c 	add.w	r0, r7, #28
 800b64a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b64e:	2300      	movs	r3, #0
 800b650:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800b652:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800b654:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800b656:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800b658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800b65a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800b65c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800b65e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800b660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800b662:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800b666:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800b668:	68fa      	ldr	r2, [r7, #12]
 800b66a:	4313      	orrs	r3, r2
 800b66c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	685a      	ldr	r2, [r3, #4]
 800b672:	4b07      	ldr	r3, [pc, #28]	; (800b690 <SDMMC_Init+0x54>)
 800b674:	4013      	ands	r3, r2
 800b676:	68fa      	ldr	r2, [r7, #12]
 800b678:	431a      	orrs	r2, r3
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b67e:	2300      	movs	r3, #0
}
 800b680:	4618      	mov	r0, r3
 800b682:	3714      	adds	r7, #20
 800b684:	46bd      	mov	sp, r7
 800b686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68a:	b004      	add	sp, #16
 800b68c:	4770      	bx	lr
 800b68e:	bf00      	nop
 800b690:	ffff8100 	.word	0xffff8100

0800b694 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800b694:	b480      	push	{r7}
 800b696:	b083      	sub	sp, #12
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	2203      	movs	r2, #3
 800b6a0:	601a      	str	r2, [r3, #0]
  
  return HAL_OK; 
 800b6a2:	2300      	movs	r3, #0
}
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	370c      	adds	r7, #12
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ae:	4770      	bx	lr

0800b6b0 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800b6b0:	b480      	push	{r7}
 800b6b2:	b083      	sub	sp, #12
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	f003 0303 	and.w	r3, r3, #3
}
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	370c      	adds	r7, #12
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ca:	4770      	bx	lr

0800b6cc <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800b6cc:	b480      	push	{r7}
 800b6ce:	b085      	sub	sp, #20
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
 800b6d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800b6da:	683b      	ldr	r3, [r7, #0]
 800b6dc:	681a      	ldr	r2, [r3, #0]
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b6e2:	683b      	ldr	r3, [r7, #0]
 800b6e4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800b6e6:	683b      	ldr	r3, [r7, #0]
 800b6e8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b6ea:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800b6ec:	683b      	ldr	r3, [r7, #0]
 800b6ee:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800b6f0:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b6f2:	683b      	ldr	r3, [r7, #0]
 800b6f4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800b6f6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b6f8:	68fa      	ldr	r2, [r7, #12]
 800b6fa:	4313      	orrs	r3, r2
 800b6fc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	68da      	ldr	r2, [r3, #12]
 800b702:	4b06      	ldr	r3, [pc, #24]	; (800b71c <SDMMC_SendCommand+0x50>)
 800b704:	4013      	ands	r3, r2
 800b706:	68fa      	ldr	r2, [r7, #12]
 800b708:	431a      	orrs	r2, r3
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800b70e:	2300      	movs	r3, #0
}
 800b710:	4618      	mov	r0, r3
 800b712:	3714      	adds	r7, #20
 800b714:	46bd      	mov	sp, r7
 800b716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71a:	4770      	bx	lr
 800b71c:	fffff000 	.word	0xfffff000

0800b720 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800b720:	b480      	push	{r7}
 800b722:	b083      	sub	sp, #12
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	691b      	ldr	r3, [r3, #16]
 800b72c:	b2db      	uxtb	r3, r3
}
 800b72e:	4618      	mov	r0, r3
 800b730:	370c      	adds	r7, #12
 800b732:	46bd      	mov	sp, r7
 800b734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b738:	4770      	bx	lr

0800b73a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800b73a:	b480      	push	{r7}
 800b73c:	b085      	sub	sp, #20
 800b73e:	af00      	add	r7, sp, #0
 800b740:	6078      	str	r0, [r7, #4]
 800b742:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0;
 800b744:	2300      	movs	r3, #0
 800b746:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	3314      	adds	r3, #20
 800b74c:	461a      	mov	r2, r3
 800b74e:	683b      	ldr	r3, [r7, #0]
 800b750:	4413      	add	r3, r2
 800b752:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	681b      	ldr	r3, [r3, #0]
}  
 800b758:	4618      	mov	r0, r3
 800b75a:	3714      	adds	r7, #20
 800b75c:	46bd      	mov	sp, r7
 800b75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b762:	4770      	bx	lr

0800b764 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base 
  * @param  addr Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800b764:	b580      	push	{r7, lr}
 800b766:	b08a      	sub	sp, #40	; 0x28
 800b768:	af00      	add	r7, sp, #0
 800b76a:	60f8      	str	r0, [r7, #12]
 800b76c:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800b770:	2300      	movs	r3, #0
 800b772:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b774:	683b      	ldr	r3, [r7, #0]
 800b776:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b778:	2307      	movs	r3, #7
 800b77a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b77c:	2340      	movs	r3, #64	; 0x40
 800b77e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b780:	2300      	movs	r3, #0
 800b782:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b784:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b788:	623b      	str	r3, [r7, #32]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b78a:	f107 0310 	add.w	r3, r7, #16
 800b78e:	4619      	mov	r1, r3
 800b790:	68f8      	ldr	r0, [r7, #12]
 800b792:	f7ff ff9b 	bl	800b6cc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800b796:	f241 3288 	movw	r2, #5000	; 0x1388
 800b79a:	2107      	movs	r1, #7
 800b79c:	68f8      	ldr	r0, [r7, #12]
 800b79e:	f000 f91d 	bl	800b9dc <SDMMC_GetCmdResp1>
 800b7a2:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800b7a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	3728      	adds	r7, #40	; 0x28
 800b7aa:	46bd      	mov	sp, r7
 800b7ac:	bd80      	pop	{r7, pc}

0800b7ae <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800b7ae:	b580      	push	{r7, lr}
 800b7b0:	b088      	sub	sp, #32
 800b7b2:	af00      	add	r7, sp, #0
 800b7b4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = 0;
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b7be:	2300      	movs	r3, #0
 800b7c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b7ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b7ce:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b7d0:	f107 0308 	add.w	r3, r7, #8
 800b7d4:	4619      	mov	r1, r3
 800b7d6:	6878      	ldr	r0, [r7, #4]
 800b7d8:	f7ff ff78 	bl	800b6cc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800b7dc:	6878      	ldr	r0, [r7, #4]
 800b7de:	f000 f8d3 	bl	800b988 <SDMMC_GetCmdError>
 800b7e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b7e4:	69fb      	ldr	r3, [r7, #28]
}
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	3720      	adds	r7, #32
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	bd80      	pop	{r7, pc}

0800b7ee <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800b7ee:	b580      	push	{r7, lr}
 800b7f0:	b088      	sub	sp, #32
 800b7f2:	af00      	add	r7, sp, #0
 800b7f4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0;
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b7fe:	2302      	movs	r3, #2
 800b800:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b802:	23c0      	movs	r3, #192	; 0xc0
 800b804:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b806:	2300      	movs	r3, #0
 800b808:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b80a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b80e:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b810:	f107 0308 	add.w	r3, r7, #8
 800b814:	4619      	mov	r1, r3
 800b816:	6878      	ldr	r0, [r7, #4]
 800b818:	f7ff ff58 	bl	800b6cc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b81c:	6878      	ldr	r0, [r7, #4]
 800b81e:	f000 f9c3 	bl	800bba8 <SDMMC_GetCmdResp2>
 800b822:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b824:	69fb      	ldr	r3, [r7, #28]
}
 800b826:	4618      	mov	r0, r3
 800b828:	3720      	adds	r7, #32
 800b82a:	46bd      	mov	sp, r7
 800b82c:	bd80      	pop	{r7, pc}

0800b82e <SDMMC_CmdSendCSD>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b82e:	b580      	push	{r7, lr}
 800b830:	b088      	sub	sp, #32
 800b832:	af00      	add	r7, sp, #0
 800b834:	6078      	str	r0, [r7, #4]
 800b836:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800b838:	2300      	movs	r3, #0
 800b83a:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b83c:	683b      	ldr	r3, [r7, #0]
 800b83e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b840:	2309      	movs	r3, #9
 800b842:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b844:	23c0      	movs	r3, #192	; 0xc0
 800b846:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b848:	2300      	movs	r3, #0
 800b84a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b84c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b850:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b852:	f107 0308 	add.w	r3, r7, #8
 800b856:	4619      	mov	r1, r3
 800b858:	6878      	ldr	r0, [r7, #4]
 800b85a:	f7ff ff37 	bl	800b6cc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b85e:	6878      	ldr	r0, [r7, #4]
 800b860:	f000 f9a2 	bl	800bba8 <SDMMC_GetCmdResp2>
 800b864:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b866:	69fb      	ldr	r3, [r7, #28]
}
 800b868:	4618      	mov	r0, r3
 800b86a:	3720      	adds	r7, #32
 800b86c:	46bd      	mov	sp, r7
 800b86e:	bd80      	pop	{r7, pc}

0800b870 <SDMMC_CmdSetRelAdd>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800b870:	b580      	push	{r7, lr}
 800b872:	b088      	sub	sp, #32
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]
 800b878:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800b87a:	2300      	movs	r3, #0
 800b87c:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0;
 800b87e:	2300      	movs	r3, #0
 800b880:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b882:	2303      	movs	r3, #3
 800b884:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b886:	2340      	movs	r3, #64	; 0x40
 800b888:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b88a:	2300      	movs	r3, #0
 800b88c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b88e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b892:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b894:	f107 0308 	add.w	r3, r7, #8
 800b898:	4619      	mov	r1, r3
 800b89a:	6878      	ldr	r0, [r7, #4]
 800b89c:	f7ff ff16 	bl	800b6cc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b8a0:	683a      	ldr	r2, [r7, #0]
 800b8a2:	2103      	movs	r1, #3
 800b8a4:	6878      	ldr	r0, [r7, #4]
 800b8a6:	f000 f9f3 	bl	800bc90 <SDMMC_GetCmdResp6>
 800b8aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b8ac:	69fb      	ldr	r3, [r7, #28]
}
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	3720      	adds	r7, #32
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	bd80      	pop	{r7, pc}

0800b8b6 <SDMMC_CmdSendStatus>:
  * @brief  Send the Status command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b8b6:	b580      	push	{r7, lr}
 800b8b8:	b088      	sub	sp, #32
 800b8ba:	af00      	add	r7, sp, #0
 800b8bc:	6078      	str	r0, [r7, #4]
 800b8be:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b8c4:	683b      	ldr	r3, [r7, #0]
 800b8c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b8c8:	230d      	movs	r3, #13
 800b8ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b8cc:	2340      	movs	r3, #64	; 0x40
 800b8ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b8d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b8d8:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b8da:	f107 0308 	add.w	r3, r7, #8
 800b8de:	4619      	mov	r1, r3
 800b8e0:	6878      	ldr	r0, [r7, #4]
 800b8e2:	f7ff fef3 	bl	800b6cc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800b8e6:	f241 3288 	movw	r2, #5000	; 0x1388
 800b8ea:	210d      	movs	r1, #13
 800b8ec:	6878      	ldr	r0, [r7, #4]
 800b8ee:	f000 f875 	bl	800b9dc <SDMMC_GetCmdResp1>
 800b8f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b8f4:	69fb      	ldr	r3, [r7, #28]
}
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	3720      	adds	r7, #32
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	bd80      	pop	{r7, pc}

0800b8fe <SDMMC_CmdOpCondition>:
  * @param  SDIOx Pointer to SDIO register base 
  * @parame Argument Argument used for the command
  * @retval HAL status
  */
uint32_t SDMMC_CmdOpCondition(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b8fe:	b580      	push	{r7, lr}
 800b900:	b088      	sub	sp, #32
 800b902:	af00      	add	r7, sp, #0
 800b904:	6078      	str	r0, [r7, #4]
 800b906:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800b908:	2300      	movs	r3, #0
 800b90a:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = Argument;
 800b90c:	683b      	ldr	r3, [r7, #0]
 800b90e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_OP_COND;
 800b910:	2301      	movs	r3, #1
 800b912:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b914:	2340      	movs	r3, #64	; 0x40
 800b916:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b918:	2300      	movs	r3, #0
 800b91a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b91c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b920:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b922:	f107 0308 	add.w	r3, r7, #8
 800b926:	4619      	mov	r1, r3
 800b928:	6878      	ldr	r0, [r7, #4]
 800b92a:	f7ff fecf 	bl	800b6cc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800b92e:	6878      	ldr	r0, [r7, #4]
 800b930:	f000 f97a 	bl	800bc28 <SDMMC_GetCmdResp3>
 800b934:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b936:	69fb      	ldr	r3, [r7, #28]
}
 800b938:	4618      	mov	r0, r3
 800b93a:	3720      	adds	r7, #32
 800b93c:	46bd      	mov	sp, r7
 800b93e:	bd80      	pop	{r7, pc}

0800b940 <SDMMC_CmdSwitch>:
  * @param  SDIOx Pointer to SDIO register base 
  * @parame Argument Argument used for the command
  * @retval HAL status
  */
uint32_t SDMMC_CmdSwitch(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b940:	b580      	push	{r7, lr}
 800b942:	b088      	sub	sp, #32
 800b944:	af00      	add	r7, sp, #0
 800b946:	6078      	str	r0, [r7, #4]
 800b948:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800b94a:	2300      	movs	r3, #0
 800b94c:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = Argument;
 800b94e:	683b      	ldr	r3, [r7, #0]
 800b950:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SWITCH;
 800b952:	2306      	movs	r3, #6
 800b954:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b956:	2340      	movs	r3, #64	; 0x40
 800b958:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b95a:	2300      	movs	r3, #0
 800b95c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b95e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b962:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b964:	f107 0308 	add.w	r3, r7, #8
 800b968:	4619      	mov	r1, r3
 800b96a:	6878      	ldr	r0, [r7, #4]
 800b96c:	f7ff feae 	bl	800b6cc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_HS_SWITCH, SDMMC_CMDTIMEOUT);
 800b970:	f241 3288 	movw	r2, #5000	; 0x1388
 800b974:	2106      	movs	r1, #6
 800b976:	6878      	ldr	r0, [r7, #4]
 800b978:	f000 f830 	bl	800b9dc <SDMMC_GetCmdResp1>
 800b97c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b97e:	69fb      	ldr	r3, [r7, #28]
}
 800b980:	4618      	mov	r0, r3
 800b982:	3720      	adds	r7, #32
 800b984:	46bd      	mov	sp, r7
 800b986:	bd80      	pop	{r7, pc}

0800b988 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800b988:	b490      	push	{r4, r7}
 800b98a:	b082      	sub	sp, #8
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800b990:	4b10      	ldr	r3, [pc, #64]	; (800b9d4 <SDMMC_GetCmdError+0x4c>)
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	4a10      	ldr	r2, [pc, #64]	; (800b9d8 <SDMMC_GetCmdError+0x50>)
 800b996:	fba2 2303 	umull	r2, r3, r2, r3
 800b99a:	0a5b      	lsrs	r3, r3, #9
 800b99c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b9a0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800b9a4:	4623      	mov	r3, r4
 800b9a6:	1e5c      	subs	r4, r3, #1
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d102      	bne.n	800b9b2 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b9ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b9b0:	e00a      	b.n	800b9c8 <SDMMC_GetCmdError+0x40>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d0f2      	beq.n	800b9a4 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800b9c4:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800b9c6:	2300      	movs	r3, #0
}
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	3708      	adds	r7, #8
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	bc90      	pop	{r4, r7}
 800b9d0:	4770      	bx	lr
 800b9d2:	bf00      	nop
 800b9d4:	20000000 	.word	0x20000000
 800b9d8:	10624dd3 	.word	0x10624dd3

0800b9dc <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b9dc:	b590      	push	{r4, r7, lr}
 800b9de:	b087      	sub	sp, #28
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	60f8      	str	r0, [r7, #12]
 800b9e4:	460b      	mov	r3, r1
 800b9e6:	607a      	str	r2, [r7, #4]
 800b9e8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 800b9ea:	4b6c      	ldr	r3, [pc, #432]	; (800bb9c <SDMMC_GetCmdResp1+0x1c0>)
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	4a6c      	ldr	r2, [pc, #432]	; (800bba0 <SDMMC_GetCmdResp1+0x1c4>)
 800b9f0:	fba2 2303 	umull	r2, r3, r2, r3
 800b9f4:	0a5b      	lsrs	r3, r3, #9
 800b9f6:	687a      	ldr	r2, [r7, #4]
 800b9f8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800b9fc:	4623      	mov	r3, r4
 800b9fe:	1e5c      	subs	r4, r3, #1
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d102      	bne.n	800ba0a <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ba04:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ba08:	e0c3      	b.n	800bb92 <SDMMC_GetCmdResp1+0x1b6>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba0e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d0f2      	beq.n	800b9fc <SDMMC_GetCmdResp1+0x20>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba1a:	f003 0304 	and.w	r3, r3, #4
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d004      	beq.n	800ba2c <SDMMC_GetCmdResp1+0x50>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	2204      	movs	r2, #4
 800ba26:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ba28:	2304      	movs	r3, #4
 800ba2a:	e0b2      	b.n	800bb92 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba30:	f003 0301 	and.w	r3, r3, #1
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d004      	beq.n	800ba42 <SDMMC_GetCmdResp1+0x66>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	2201      	movs	r2, #1
 800ba3c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ba3e:	2301      	movs	r3, #1
 800ba40:	e0a7      	b.n	800bb92 <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ba42:	68f8      	ldr	r0, [r7, #12]
 800ba44:	f7ff fe6c 	bl	800b720 <SDMMC_GetCommandResponse>
 800ba48:	4603      	mov	r3, r0
 800ba4a:	461a      	mov	r2, r3
 800ba4c:	7afb      	ldrb	r3, [r7, #11]
 800ba4e:	4293      	cmp	r3, r2
 800ba50:	d001      	beq.n	800ba56 <SDMMC_GetCmdResp1+0x7a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ba52:	2301      	movs	r3, #1
 800ba54:	e09d      	b.n	800bb92 <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800ba5c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800ba5e:	2100      	movs	r1, #0
 800ba60:	68f8      	ldr	r0, [r7, #12]
 800ba62:	f7ff fe6a 	bl	800b73a <SDMMC_GetResponse>
 800ba66:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800ba68:	697a      	ldr	r2, [r7, #20]
 800ba6a:	4b4e      	ldr	r3, [pc, #312]	; (800bba4 <SDMMC_GetCmdResp1+0x1c8>)
 800ba6c:	4013      	ands	r3, r2
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d101      	bne.n	800ba76 <SDMMC_GetCmdResp1+0x9a>
  {
    return SDMMC_ERROR_NONE;
 800ba72:	2300      	movs	r3, #0
 800ba74:	e08d      	b.n	800bb92 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800ba76:	697b      	ldr	r3, [r7, #20]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	da02      	bge.n	800ba82 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800ba7c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ba80:	e087      	b.n	800bb92 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800ba82:	697b      	ldr	r3, [r7, #20]
 800ba84:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d001      	beq.n	800ba90 <SDMMC_GetCmdResp1+0xb4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800ba8c:	2340      	movs	r3, #64	; 0x40
 800ba8e:	e080      	b.n	800bb92 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800ba90:	697b      	ldr	r3, [r7, #20]
 800ba92:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d001      	beq.n	800ba9e <SDMMC_GetCmdResp1+0xc2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800ba9a:	2380      	movs	r3, #128	; 0x80
 800ba9c:	e079      	b.n	800bb92 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800ba9e:	697b      	ldr	r3, [r7, #20]
 800baa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d002      	beq.n	800baae <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800baa8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800baac:	e071      	b.n	800bb92 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800baae:	697b      	ldr	r3, [r7, #20]
 800bab0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d002      	beq.n	800babe <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800bab8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800babc:	e069      	b.n	800bb92 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800babe:	697b      	ldr	r3, [r7, #20]
 800bac0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d002      	beq.n	800bace <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800bac8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bacc:	e061      	b.n	800bb92 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800bace:	697b      	ldr	r3, [r7, #20]
 800bad0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d002      	beq.n	800bade <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800bad8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800badc:	e059      	b.n	800bb92 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800bade:	697b      	ldr	r3, [r7, #20]
 800bae0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d002      	beq.n	800baee <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bae8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800baec:	e051      	b.n	800bb92 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800baee:	697b      	ldr	r3, [r7, #20]
 800baf0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d002      	beq.n	800bafe <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800baf8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bafc:	e049      	b.n	800bb92 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800bafe:	697b      	ldr	r3, [r7, #20]
 800bb00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d002      	beq.n	800bb0e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800bb08:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800bb0c:	e041      	b.n	800bb92 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800bb0e:	697b      	ldr	r3, [r7, #20]
 800bb10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d002      	beq.n	800bb1e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CC_ERR;
 800bb18:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bb1c:	e039      	b.n	800bb92 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800bb1e:	697b      	ldr	r3, [r7, #20]
 800bb20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d002      	beq.n	800bb2e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800bb28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800bb2c:	e031      	b.n	800bb92 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800bb2e:	697b      	ldr	r3, [r7, #20]
 800bb30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d002      	beq.n	800bb3e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800bb38:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800bb3c:	e029      	b.n	800bb92 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800bb3e:	697b      	ldr	r3, [r7, #20]
 800bb40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d002      	beq.n	800bb4e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800bb48:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800bb4c:	e021      	b.n	800bb92 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800bb4e:	697b      	ldr	r3, [r7, #20]
 800bb50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d002      	beq.n	800bb5e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800bb58:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800bb5c:	e019      	b.n	800bb92 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800bb5e:	697b      	ldr	r3, [r7, #20]
 800bb60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d002      	beq.n	800bb6e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800bb68:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800bb6c:	e011      	b.n	800bb92 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800bb6e:	697b      	ldr	r3, [r7, #20]
 800bb70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d002      	beq.n	800bb7e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800bb78:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800bb7c:	e009      	b.n	800bb92 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800bb7e:	697b      	ldr	r3, [r7, #20]
 800bb80:	f003 0308 	and.w	r3, r3, #8
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d002      	beq.n	800bb8e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800bb88:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800bb8c:	e001      	b.n	800bb92 <SDMMC_GetCmdResp1+0x1b6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bb8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800bb92:	4618      	mov	r0, r3
 800bb94:	371c      	adds	r7, #28
 800bb96:	46bd      	mov	sp, r7
 800bb98:	bd90      	pop	{r4, r7, pc}
 800bb9a:	bf00      	nop
 800bb9c:	20000000 	.word	0x20000000
 800bba0:	10624dd3 	.word	0x10624dd3
 800bba4:	fdffe008 	.word	0xfdffe008

0800bba8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800bba8:	b490      	push	{r4, r7}
 800bbaa:	b082      	sub	sp, #8
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800bbb0:	4b1b      	ldr	r3, [pc, #108]	; (800bc20 <SDMMC_GetCmdResp2+0x78>)
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	4a1b      	ldr	r2, [pc, #108]	; (800bc24 <SDMMC_GetCmdResp2+0x7c>)
 800bbb6:	fba2 2303 	umull	r2, r3, r2, r3
 800bbba:	0a5b      	lsrs	r3, r3, #9
 800bbbc:	f241 3288 	movw	r2, #5000	; 0x1388
 800bbc0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800bbc4:	4623      	mov	r3, r4
 800bbc6:	1e5c      	subs	r4, r3, #1
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d102      	bne.n	800bbd2 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bbcc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bbd0:	e020      	b.n	800bc14 <SDMMC_GetCmdResp2+0x6c>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbd6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d0f2      	beq.n	800bbc4 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbe2:	f003 0304 	and.w	r3, r3, #4
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d004      	beq.n	800bbf4 <SDMMC_GetCmdResp2+0x4c>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	2204      	movs	r2, #4
 800bbee:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bbf0:	2304      	movs	r3, #4
 800bbf2:	e00f      	b.n	800bc14 <SDMMC_GetCmdResp2+0x6c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbf8:	f003 0301 	and.w	r3, r3, #1
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d004      	beq.n	800bc0a <SDMMC_GetCmdResp2+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	2201      	movs	r2, #1
 800bc04:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bc06:	2301      	movs	r3, #1
 800bc08:	e004      	b.n	800bc14 <SDMMC_GetCmdResp2+0x6c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800bc10:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800bc12:	2300      	movs	r3, #0
}
 800bc14:	4618      	mov	r0, r3
 800bc16:	3708      	adds	r7, #8
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	bc90      	pop	{r4, r7}
 800bc1c:	4770      	bx	lr
 800bc1e:	bf00      	nop
 800bc20:	20000000 	.word	0x20000000
 800bc24:	10624dd3 	.word	0x10624dd3

0800bc28 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800bc28:	b490      	push	{r4, r7}
 800bc2a:	b082      	sub	sp, #8
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800bc30:	4b15      	ldr	r3, [pc, #84]	; (800bc88 <SDMMC_GetCmdResp3+0x60>)
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	4a15      	ldr	r2, [pc, #84]	; (800bc8c <SDMMC_GetCmdResp3+0x64>)
 800bc36:	fba2 2303 	umull	r2, r3, r2, r3
 800bc3a:	0a5b      	lsrs	r3, r3, #9
 800bc3c:	f241 3288 	movw	r2, #5000	; 0x1388
 800bc40:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800bc44:	4623      	mov	r3, r4
 800bc46:	1e5c      	subs	r4, r3, #1
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d102      	bne.n	800bc52 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bc4c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bc50:	e015      	b.n	800bc7e <SDMMC_GetCmdResp3+0x56>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc56:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d0f2      	beq.n	800bc44 <SDMMC_GetCmdResp3+0x1c>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc62:	f003 0304 	and.w	r3, r3, #4
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d004      	beq.n	800bc74 <SDMMC_GetCmdResp3+0x4c>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	2204      	movs	r2, #4
 800bc6e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bc70:	2304      	movs	r3, #4
 800bc72:	e004      	b.n	800bc7e <SDMMC_GetCmdResp3+0x56>
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800bc7a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800bc7c:	2300      	movs	r3, #0
}
 800bc7e:	4618      	mov	r0, r3
 800bc80:	3708      	adds	r7, #8
 800bc82:	46bd      	mov	sp, r7
 800bc84:	bc90      	pop	{r4, r7}
 800bc86:	4770      	bx	lr
 800bc88:	20000000 	.word	0x20000000
 800bc8c:	10624dd3 	.word	0x10624dd3

0800bc90 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800bc90:	b590      	push	{r4, r7, lr}
 800bc92:	b087      	sub	sp, #28
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	60f8      	str	r0, [r7, #12]
 800bc98:	460b      	mov	r3, r1
 800bc9a:	607a      	str	r2, [r7, #4]
 800bc9c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800bc9e:	4b31      	ldr	r3, [pc, #196]	; (800bd64 <SDMMC_GetCmdResp6+0xd4>)
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	4a31      	ldr	r2, [pc, #196]	; (800bd68 <SDMMC_GetCmdResp6+0xd8>)
 800bca4:	fba2 2303 	umull	r2, r3, r2, r3
 800bca8:	0a5b      	lsrs	r3, r3, #9
 800bcaa:	f241 3288 	movw	r2, #5000	; 0x1388
 800bcae:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800bcb2:	4623      	mov	r3, r4
 800bcb4:	1e5c      	subs	r4, r3, #1
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d102      	bne.n	800bcc0 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bcba:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bcbe:	e04c      	b.n	800bd5a <SDMMC_GetCmdResp6+0xca>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcc4:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d0f2      	beq.n	800bcb2 <SDMMC_GetCmdResp6+0x22>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcd0:	f003 0304 	and.w	r3, r3, #4
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d004      	beq.n	800bce2 <SDMMC_GetCmdResp6+0x52>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	2204      	movs	r2, #4
 800bcdc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bcde:	2304      	movs	r3, #4
 800bce0:	e03b      	b.n	800bd5a <SDMMC_GetCmdResp6+0xca>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bce6:	f003 0301 	and.w	r3, r3, #1
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d004      	beq.n	800bcf8 <SDMMC_GetCmdResp6+0x68>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	2201      	movs	r2, #1
 800bcf2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bcf4:	2301      	movs	r3, #1
 800bcf6:	e030      	b.n	800bd5a <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800bcf8:	68f8      	ldr	r0, [r7, #12]
 800bcfa:	f7ff fd11 	bl	800b720 <SDMMC_GetCommandResponse>
 800bcfe:	4603      	mov	r3, r0
 800bd00:	461a      	mov	r2, r3
 800bd02:	7afb      	ldrb	r3, [r7, #11]
 800bd04:	4293      	cmp	r3, r2
 800bd06:	d001      	beq.n	800bd0c <SDMMC_GetCmdResp6+0x7c>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bd08:	2301      	movs	r3, #1
 800bd0a:	e026      	b.n	800bd5a <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800bd12:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800bd14:	2100      	movs	r1, #0
 800bd16:	68f8      	ldr	r0, [r7, #12]
 800bd18:	f7ff fd0f 	bl	800b73a <SDMMC_GetResponse>
 800bd1c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800bd1e:	697b      	ldr	r3, [r7, #20]
 800bd20:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d106      	bne.n	800bd36 <SDMMC_GetCmdResp6+0xa6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800bd28:	697b      	ldr	r3, [r7, #20]
 800bd2a:	0c1b      	lsrs	r3, r3, #16
 800bd2c:	b29a      	uxth	r2, r3
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800bd32:	2300      	movs	r3, #0
 800bd34:	e011      	b.n	800bd5a <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800bd36:	697b      	ldr	r3, [r7, #20]
 800bd38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d002      	beq.n	800bd46 <SDMMC_GetCmdResp6+0xb6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bd40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bd44:	e009      	b.n	800bd5a <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800bd46:	697b      	ldr	r3, [r7, #20]
 800bd48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d002      	beq.n	800bd56 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bd50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bd54:	e001      	b.n	800bd5a <SDMMC_GetCmdResp6+0xca>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bd56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	371c      	adds	r7, #28
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	bd90      	pop	{r4, r7, pc}
 800bd62:	bf00      	nop
 800bd64:	20000000 	.word	0x20000000
 800bd68:	10624dd3 	.word	0x10624dd3

0800bd6c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bd6c:	b084      	sub	sp, #16
 800bd6e:	b580      	push	{r7, lr}
 800bd70:	b084      	sub	sp, #16
 800bd72:	af00      	add	r7, sp, #0
 800bd74:	6078      	str	r0, [r7, #4]
 800bd76:	f107 001c 	add.w	r0, r7, #28
 800bd7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800bd7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd80:	2b01      	cmp	r3, #1
 800bd82:	d120      	bne.n	800bdc6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd88:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	68da      	ldr	r2, [r3, #12]
 800bd94:	4b20      	ldr	r3, [pc, #128]	; (800be18 <USB_CoreInit+0xac>)
 800bd96:	4013      	ands	r3, r2
 800bd98:	687a      	ldr	r2, [r7, #4]
 800bd9a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	68db      	ldr	r3, [r3, #12]
 800bda0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800bda8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bdaa:	2b01      	cmp	r3, #1
 800bdac:	d105      	bne.n	800bdba <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	68db      	ldr	r3, [r3, #12]
 800bdb2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800bdba:	6878      	ldr	r0, [r7, #4]
 800bdbc:	f000 fcba 	bl	800c734 <USB_CoreReset>
 800bdc0:	4603      	mov	r3, r0
 800bdc2:	73fb      	strb	r3, [r7, #15]
 800bdc4:	e010      	b.n	800bde8 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	68db      	ldr	r3, [r3, #12]
 800bdca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800bdd2:	6878      	ldr	r0, [r7, #4]
 800bdd4:	f000 fcae 	bl	800c734 <USB_CoreReset>
 800bdd8:	4603      	mov	r3, r0
 800bdda:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bde0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800bde8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdea:	2b01      	cmp	r3, #1
 800bdec:	d10b      	bne.n	800be06 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	689b      	ldr	r3, [r3, #8]
 800bdf2:	f043 0206 	orr.w	r2, r3, #6
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	689b      	ldr	r3, [r3, #8]
 800bdfe:	f043 0220 	orr.w	r2, r3, #32
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800be06:	7bfb      	ldrb	r3, [r7, #15]
}
 800be08:	4618      	mov	r0, r3
 800be0a:	3710      	adds	r7, #16
 800be0c:	46bd      	mov	sp, r7
 800be0e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800be12:	b004      	add	sp, #16
 800be14:	4770      	bx	lr
 800be16:	bf00      	nop
 800be18:	ffbdffbf 	.word	0xffbdffbf

0800be1c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800be1c:	b480      	push	{r7}
 800be1e:	b087      	sub	sp, #28
 800be20:	af00      	add	r7, sp, #0
 800be22:	60f8      	str	r0, [r7, #12]
 800be24:	60b9      	str	r1, [r7, #8]
 800be26:	4613      	mov	r3, r2
 800be28:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USB_OTG_SPEED_FULL)
 800be2a:	79fb      	ldrb	r3, [r7, #7]
 800be2c:	2b03      	cmp	r3, #3
 800be2e:	d165      	bne.n	800befc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800be30:	68bb      	ldr	r3, [r7, #8]
 800be32:	4a41      	ldr	r2, [pc, #260]	; (800bf38 <USB_SetTurnaroundTime+0x11c>)
 800be34:	4293      	cmp	r3, r2
 800be36:	d906      	bls.n	800be46 <USB_SetTurnaroundTime+0x2a>
 800be38:	68bb      	ldr	r3, [r7, #8]
 800be3a:	4a40      	ldr	r2, [pc, #256]	; (800bf3c <USB_SetTurnaroundTime+0x120>)
 800be3c:	4293      	cmp	r3, r2
 800be3e:	d802      	bhi.n	800be46 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800be40:	230f      	movs	r3, #15
 800be42:	617b      	str	r3, [r7, #20]
 800be44:	e062      	b.n	800bf0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800be46:	68bb      	ldr	r3, [r7, #8]
 800be48:	4a3c      	ldr	r2, [pc, #240]	; (800bf3c <USB_SetTurnaroundTime+0x120>)
 800be4a:	4293      	cmp	r3, r2
 800be4c:	d906      	bls.n	800be5c <USB_SetTurnaroundTime+0x40>
 800be4e:	68bb      	ldr	r3, [r7, #8]
 800be50:	4a3b      	ldr	r2, [pc, #236]	; (800bf40 <USB_SetTurnaroundTime+0x124>)
 800be52:	4293      	cmp	r3, r2
 800be54:	d802      	bhi.n	800be5c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800be56:	230e      	movs	r3, #14
 800be58:	617b      	str	r3, [r7, #20]
 800be5a:	e057      	b.n	800bf0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800be5c:	68bb      	ldr	r3, [r7, #8]
 800be5e:	4a38      	ldr	r2, [pc, #224]	; (800bf40 <USB_SetTurnaroundTime+0x124>)
 800be60:	4293      	cmp	r3, r2
 800be62:	d906      	bls.n	800be72 <USB_SetTurnaroundTime+0x56>
 800be64:	68bb      	ldr	r3, [r7, #8]
 800be66:	4a37      	ldr	r2, [pc, #220]	; (800bf44 <USB_SetTurnaroundTime+0x128>)
 800be68:	4293      	cmp	r3, r2
 800be6a:	d802      	bhi.n	800be72 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800be6c:	230d      	movs	r3, #13
 800be6e:	617b      	str	r3, [r7, #20]
 800be70:	e04c      	b.n	800bf0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800be72:	68bb      	ldr	r3, [r7, #8]
 800be74:	4a33      	ldr	r2, [pc, #204]	; (800bf44 <USB_SetTurnaroundTime+0x128>)
 800be76:	4293      	cmp	r3, r2
 800be78:	d906      	bls.n	800be88 <USB_SetTurnaroundTime+0x6c>
 800be7a:	68bb      	ldr	r3, [r7, #8]
 800be7c:	4a32      	ldr	r2, [pc, #200]	; (800bf48 <USB_SetTurnaroundTime+0x12c>)
 800be7e:	4293      	cmp	r3, r2
 800be80:	d802      	bhi.n	800be88 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800be82:	230c      	movs	r3, #12
 800be84:	617b      	str	r3, [r7, #20]
 800be86:	e041      	b.n	800bf0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800be88:	68bb      	ldr	r3, [r7, #8]
 800be8a:	4a2f      	ldr	r2, [pc, #188]	; (800bf48 <USB_SetTurnaroundTime+0x12c>)
 800be8c:	4293      	cmp	r3, r2
 800be8e:	d906      	bls.n	800be9e <USB_SetTurnaroundTime+0x82>
 800be90:	68bb      	ldr	r3, [r7, #8]
 800be92:	4a2e      	ldr	r2, [pc, #184]	; (800bf4c <USB_SetTurnaroundTime+0x130>)
 800be94:	4293      	cmp	r3, r2
 800be96:	d802      	bhi.n	800be9e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800be98:	230b      	movs	r3, #11
 800be9a:	617b      	str	r3, [r7, #20]
 800be9c:	e036      	b.n	800bf0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800be9e:	68bb      	ldr	r3, [r7, #8]
 800bea0:	4a2a      	ldr	r2, [pc, #168]	; (800bf4c <USB_SetTurnaroundTime+0x130>)
 800bea2:	4293      	cmp	r3, r2
 800bea4:	d906      	bls.n	800beb4 <USB_SetTurnaroundTime+0x98>
 800bea6:	68bb      	ldr	r3, [r7, #8]
 800bea8:	4a29      	ldr	r2, [pc, #164]	; (800bf50 <USB_SetTurnaroundTime+0x134>)
 800beaa:	4293      	cmp	r3, r2
 800beac:	d802      	bhi.n	800beb4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800beae:	230a      	movs	r3, #10
 800beb0:	617b      	str	r3, [r7, #20]
 800beb2:	e02b      	b.n	800bf0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800beb4:	68bb      	ldr	r3, [r7, #8]
 800beb6:	4a26      	ldr	r2, [pc, #152]	; (800bf50 <USB_SetTurnaroundTime+0x134>)
 800beb8:	4293      	cmp	r3, r2
 800beba:	d906      	bls.n	800beca <USB_SetTurnaroundTime+0xae>
 800bebc:	68bb      	ldr	r3, [r7, #8]
 800bebe:	4a25      	ldr	r2, [pc, #148]	; (800bf54 <USB_SetTurnaroundTime+0x138>)
 800bec0:	4293      	cmp	r3, r2
 800bec2:	d802      	bhi.n	800beca <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800bec4:	2309      	movs	r3, #9
 800bec6:	617b      	str	r3, [r7, #20]
 800bec8:	e020      	b.n	800bf0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800beca:	68bb      	ldr	r3, [r7, #8]
 800becc:	4a21      	ldr	r2, [pc, #132]	; (800bf54 <USB_SetTurnaroundTime+0x138>)
 800bece:	4293      	cmp	r3, r2
 800bed0:	d906      	bls.n	800bee0 <USB_SetTurnaroundTime+0xc4>
 800bed2:	68bb      	ldr	r3, [r7, #8]
 800bed4:	4a20      	ldr	r2, [pc, #128]	; (800bf58 <USB_SetTurnaroundTime+0x13c>)
 800bed6:	4293      	cmp	r3, r2
 800bed8:	d802      	bhi.n	800bee0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800beda:	2308      	movs	r3, #8
 800bedc:	617b      	str	r3, [r7, #20]
 800bede:	e015      	b.n	800bf0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800bee0:	68bb      	ldr	r3, [r7, #8]
 800bee2:	4a1d      	ldr	r2, [pc, #116]	; (800bf58 <USB_SetTurnaroundTime+0x13c>)
 800bee4:	4293      	cmp	r3, r2
 800bee6:	d906      	bls.n	800bef6 <USB_SetTurnaroundTime+0xda>
 800bee8:	68bb      	ldr	r3, [r7, #8]
 800beea:	4a1c      	ldr	r2, [pc, #112]	; (800bf5c <USB_SetTurnaroundTime+0x140>)
 800beec:	4293      	cmp	r3, r2
 800beee:	d802      	bhi.n	800bef6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800bef0:	2307      	movs	r3, #7
 800bef2:	617b      	str	r3, [r7, #20]
 800bef4:	e00a      	b.n	800bf0c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800bef6:	2306      	movs	r3, #6
 800bef8:	617b      	str	r3, [r7, #20]
 800befa:	e007      	b.n	800bf0c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USB_OTG_SPEED_HIGH)
 800befc:	79fb      	ldrb	r3, [r7, #7]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d102      	bne.n	800bf08 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800bf02:	2309      	movs	r3, #9
 800bf04:	617b      	str	r3, [r7, #20]
 800bf06:	e001      	b.n	800bf0c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800bf08:	2309      	movs	r3, #9
 800bf0a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	68db      	ldr	r3, [r3, #12]
 800bf10:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	68da      	ldr	r2, [r3, #12]
 800bf1c:	697b      	ldr	r3, [r7, #20]
 800bf1e:	029b      	lsls	r3, r3, #10
 800bf20:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800bf24:	431a      	orrs	r2, r3
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800bf2a:	2300      	movs	r3, #0
}
 800bf2c:	4618      	mov	r0, r3
 800bf2e:	371c      	adds	r7, #28
 800bf30:	46bd      	mov	sp, r7
 800bf32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf36:	4770      	bx	lr
 800bf38:	00d8acbf 	.word	0x00d8acbf
 800bf3c:	00e4e1bf 	.word	0x00e4e1bf
 800bf40:	00f423ff 	.word	0x00f423ff
 800bf44:	0106737f 	.word	0x0106737f
 800bf48:	011a499f 	.word	0x011a499f
 800bf4c:	01312cff 	.word	0x01312cff
 800bf50:	014ca43f 	.word	0x014ca43f
 800bf54:	016e35ff 	.word	0x016e35ff
 800bf58:	01a6ab1f 	.word	0x01a6ab1f
 800bf5c:	01e847ff 	.word	0x01e847ff

0800bf60 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bf60:	b480      	push	{r7}
 800bf62:	b083      	sub	sp, #12
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	689b      	ldr	r3, [r3, #8]
 800bf6c:	f023 0201 	bic.w	r2, r3, #1
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bf74:	2300      	movs	r3, #0
}
 800bf76:	4618      	mov	r0, r3
 800bf78:	370c      	adds	r7, #12
 800bf7a:	46bd      	mov	sp, r7
 800bf7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf80:	4770      	bx	lr

0800bf82 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800bf82:	b580      	push	{r7, lr}
 800bf84:	b082      	sub	sp, #8
 800bf86:	af00      	add	r7, sp, #0
 800bf88:	6078      	str	r0, [r7, #4]
 800bf8a:	460b      	mov	r3, r1
 800bf8c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	68db      	ldr	r3, [r3, #12]
 800bf92:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800bf9a:	78fb      	ldrb	r3, [r7, #3]
 800bf9c:	2b01      	cmp	r3, #1
 800bf9e:	d106      	bne.n	800bfae <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	68db      	ldr	r3, [r3, #12]
 800bfa4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	60da      	str	r2, [r3, #12]
 800bfac:	e00b      	b.n	800bfc6 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800bfae:	78fb      	ldrb	r3, [r7, #3]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d106      	bne.n	800bfc2 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	68db      	ldr	r3, [r3, #12]
 800bfb8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	60da      	str	r2, [r3, #12]
 800bfc0:	e001      	b.n	800bfc6 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800bfc2:	2301      	movs	r3, #1
 800bfc4:	e003      	b.n	800bfce <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800bfc6:	2032      	movs	r0, #50	; 0x32
 800bfc8:	f7f7 f816 	bl	8002ff8 <HAL_Delay>

  return HAL_OK;
 800bfcc:	2300      	movs	r3, #0
}
 800bfce:	4618      	mov	r0, r3
 800bfd0:	3708      	adds	r7, #8
 800bfd2:	46bd      	mov	sp, r7
 800bfd4:	bd80      	pop	{r7, pc}
	...

0800bfd8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bfd8:	b084      	sub	sp, #16
 800bfda:	b580      	push	{r7, lr}
 800bfdc:	b086      	sub	sp, #24
 800bfde:	af00      	add	r7, sp, #0
 800bfe0:	6078      	str	r0, [r7, #4]
 800bfe2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800bfe6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800bfea:	2300      	movs	r3, #0
 800bfec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800bff2:	2300      	movs	r3, #0
 800bff4:	613b      	str	r3, [r7, #16]
 800bff6:	e009      	b.n	800c00c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800bff8:	687a      	ldr	r2, [r7, #4]
 800bffa:	693b      	ldr	r3, [r7, #16]
 800bffc:	3340      	adds	r3, #64	; 0x40
 800bffe:	009b      	lsls	r3, r3, #2
 800c000:	4413      	add	r3, r2
 800c002:	2200      	movs	r2, #0
 800c004:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c006:	693b      	ldr	r3, [r7, #16]
 800c008:	3301      	adds	r3, #1
 800c00a:	613b      	str	r3, [r7, #16]
 800c00c:	693b      	ldr	r3, [r7, #16]
 800c00e:	2b0e      	cmp	r3, #14
 800c010:	d9f2      	bls.n	800bff8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c012:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c014:	2b00      	cmp	r3, #0
 800c016:	d112      	bne.n	800c03e <USB_DevInit+0x66>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c01c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	601a      	str	r2, [r3, #0]
 800c03c:	e005      	b.n	800c04a <USB_DevInit+0x72>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c042:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c050:	461a      	mov	r2, r3
 800c052:	2300      	movs	r3, #0
 800c054:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c05c:	4619      	mov	r1, r3
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c064:	461a      	mov	r2, r3
 800c066:	680b      	ldr	r3, [r1, #0]
 800c068:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c06a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c06c:	2b01      	cmp	r3, #1
 800c06e:	d10c      	bne.n	800c08a <USB_DevInit+0xb2>
  {
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 800c070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c072:	2b00      	cmp	r3, #0
 800c074:	d104      	bne.n	800c080 <USB_DevInit+0xa8>
    {
      /* Set High speed phy */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c076:	2100      	movs	r1, #0
 800c078:	6878      	ldr	r0, [r7, #4]
 800c07a:	f000 f971 	bl	800c360 <USB_SetDevSpeed>
 800c07e:	e018      	b.n	800c0b2 <USB_DevInit+0xda>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c080:	2101      	movs	r1, #1
 800c082:	6878      	ldr	r0, [r7, #4]
 800c084:	f000 f96c 	bl	800c360 <USB_SetDevSpeed>
 800c088:	e013      	b.n	800c0b2 <USB_DevInit+0xda>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800c08a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c08c:	2b03      	cmp	r3, #3
 800c08e:	d10c      	bne.n	800c0aa <USB_DevInit+0xd2>
  {
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 800c090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c092:	2b00      	cmp	r3, #0
 800c094:	d104      	bne.n	800c0a0 <USB_DevInit+0xc8>
    {
      /* Set High speed phy */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c096:	2100      	movs	r1, #0
 800c098:	6878      	ldr	r0, [r7, #4]
 800c09a:	f000 f961 	bl	800c360 <USB_SetDevSpeed>
 800c09e:	e008      	b.n	800c0b2 <USB_DevInit+0xda>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c0a0:	2101      	movs	r1, #1
 800c0a2:	6878      	ldr	r0, [r7, #4]
 800c0a4:	f000 f95c 	bl	800c360 <USB_SetDevSpeed>
 800c0a8:	e003      	b.n	800c0b2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Full speed phy */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c0aa:	2103      	movs	r1, #3
 800c0ac:	6878      	ldr	r0, [r7, #4]
 800c0ae:	f000 f957 	bl	800c360 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c0b2:	2110      	movs	r1, #16
 800c0b4:	6878      	ldr	r0, [r7, #4]
 800c0b6:	f000 f90b 	bl	800c2d0 <USB_FlushTxFifo>
 800c0ba:	4603      	mov	r3, r0
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d001      	beq.n	800c0c4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800c0c0:	2301      	movs	r3, #1
 800c0c2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c0c4:	6878      	ldr	r0, [r7, #4]
 800c0c6:	f000 f929 	bl	800c31c <USB_FlushRxFifo>
 800c0ca:	4603      	mov	r3, r0
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d001      	beq.n	800c0d4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800c0d0:	2301      	movs	r3, #1
 800c0d2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c0da:	461a      	mov	r2, r3
 800c0dc:	2300      	movs	r3, #0
 800c0de:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c0e6:	461a      	mov	r2, r3
 800c0e8:	2300      	movs	r3, #0
 800c0ea:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c0f2:	461a      	mov	r2, r3
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	613b      	str	r3, [r7, #16]
 800c0fc:	e043      	b.n	800c186 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c0fe:	693b      	ldr	r3, [r7, #16]
 800c100:	015a      	lsls	r2, r3, #5
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	4413      	add	r3, r2
 800c106:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c110:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c114:	d118      	bne.n	800c148 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800c116:	693b      	ldr	r3, [r7, #16]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d10a      	bne.n	800c132 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c11c:	693b      	ldr	r3, [r7, #16]
 800c11e:	015a      	lsls	r2, r3, #5
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	4413      	add	r3, r2
 800c124:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c128:	461a      	mov	r2, r3
 800c12a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c12e:	6013      	str	r3, [r2, #0]
 800c130:	e013      	b.n	800c15a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c132:	693b      	ldr	r3, [r7, #16]
 800c134:	015a      	lsls	r2, r3, #5
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	4413      	add	r3, r2
 800c13a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c13e:	461a      	mov	r2, r3
 800c140:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c144:	6013      	str	r3, [r2, #0]
 800c146:	e008      	b.n	800c15a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c148:	693b      	ldr	r3, [r7, #16]
 800c14a:	015a      	lsls	r2, r3, #5
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	4413      	add	r3, r2
 800c150:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c154:	461a      	mov	r2, r3
 800c156:	2300      	movs	r3, #0
 800c158:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c15a:	693b      	ldr	r3, [r7, #16]
 800c15c:	015a      	lsls	r2, r3, #5
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	4413      	add	r3, r2
 800c162:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c166:	461a      	mov	r2, r3
 800c168:	2300      	movs	r3, #0
 800c16a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800c16c:	693b      	ldr	r3, [r7, #16]
 800c16e:	015a      	lsls	r2, r3, #5
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	4413      	add	r3, r2
 800c174:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c178:	461a      	mov	r2, r3
 800c17a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c17e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c180:	693b      	ldr	r3, [r7, #16]
 800c182:	3301      	adds	r3, #1
 800c184:	613b      	str	r3, [r7, #16]
 800c186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c188:	693a      	ldr	r2, [r7, #16]
 800c18a:	429a      	cmp	r2, r3
 800c18c:	d3b7      	bcc.n	800c0fe <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c18e:	2300      	movs	r3, #0
 800c190:	613b      	str	r3, [r7, #16]
 800c192:	e043      	b.n	800c21c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c194:	693b      	ldr	r3, [r7, #16]
 800c196:	015a      	lsls	r2, r3, #5
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	4413      	add	r3, r2
 800c19c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c1a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c1aa:	d118      	bne.n	800c1de <USB_DevInit+0x206>
    {
      if (i == 0U)
 800c1ac:	693b      	ldr	r3, [r7, #16]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d10a      	bne.n	800c1c8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800c1b2:	693b      	ldr	r3, [r7, #16]
 800c1b4:	015a      	lsls	r2, r3, #5
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	4413      	add	r3, r2
 800c1ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1be:	461a      	mov	r2, r3
 800c1c0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c1c4:	6013      	str	r3, [r2, #0]
 800c1c6:	e013      	b.n	800c1f0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800c1c8:	693b      	ldr	r3, [r7, #16]
 800c1ca:	015a      	lsls	r2, r3, #5
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	4413      	add	r3, r2
 800c1d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1d4:	461a      	mov	r2, r3
 800c1d6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c1da:	6013      	str	r3, [r2, #0]
 800c1dc:	e008      	b.n	800c1f0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800c1de:	693b      	ldr	r3, [r7, #16]
 800c1e0:	015a      	lsls	r2, r3, #5
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	4413      	add	r3, r2
 800c1e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1ea:	461a      	mov	r2, r3
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800c1f0:	693b      	ldr	r3, [r7, #16]
 800c1f2:	015a      	lsls	r2, r3, #5
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	4413      	add	r3, r2
 800c1f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1fc:	461a      	mov	r2, r3
 800c1fe:	2300      	movs	r3, #0
 800c200:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800c202:	693b      	ldr	r3, [r7, #16]
 800c204:	015a      	lsls	r2, r3, #5
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	4413      	add	r3, r2
 800c20a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c20e:	461a      	mov	r2, r3
 800c210:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c214:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c216:	693b      	ldr	r3, [r7, #16]
 800c218:	3301      	adds	r3, #1
 800c21a:	613b      	str	r3, [r7, #16]
 800c21c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c21e:	693a      	ldr	r2, [r7, #16]
 800c220:	429a      	cmp	r2, r3
 800c222:	d3b7      	bcc.n	800c194 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c22a:	691b      	ldr	r3, [r3, #16]
 800c22c:	68fa      	ldr	r2, [r7, #12]
 800c22e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c232:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c236:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 800c238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c23a:	2b01      	cmp	r3, #1
 800c23c:	d110      	bne.n	800c260 <USB_DevInit+0x288>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c244:	461a      	mov	r2, r3
 800c246:	4b1e      	ldr	r3, [pc, #120]	; (800c2c0 <USB_DevInit+0x2e8>)
 800c248:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c250:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c258:	4619      	mov	r1, r3
 800c25a:	4b1a      	ldr	r3, [pc, #104]	; (800c2c4 <USB_DevInit+0x2ec>)
 800c25c:	4313      	orrs	r3, r2
 800c25e:	630b      	str	r3, [r1, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	2200      	movs	r2, #0
 800c264:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800c26c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c26e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c270:	2b00      	cmp	r3, #0
 800c272:	d105      	bne.n	800c280 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	699b      	ldr	r3, [r3, #24]
 800c278:	f043 0210 	orr.w	r2, r3, #16
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	699a      	ldr	r2, [r3, #24]
 800c284:	4b10      	ldr	r3, [pc, #64]	; (800c2c8 <USB_DevInit+0x2f0>)
 800c286:	4313      	orrs	r3, r2
 800c288:	687a      	ldr	r2, [r7, #4]
 800c28a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800c28c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d005      	beq.n	800c29e <USB_DevInit+0x2c6>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	699b      	ldr	r3, [r3, #24]
 800c296:	f043 0208 	orr.w	r2, r3, #8
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c29e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c2a0:	2b01      	cmp	r3, #1
 800c2a2:	d105      	bne.n	800c2b0 <USB_DevInit+0x2d8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	699a      	ldr	r2, [r3, #24]
 800c2a8:	4b08      	ldr	r3, [pc, #32]	; (800c2cc <USB_DevInit+0x2f4>)
 800c2aa:	4313      	orrs	r3, r2
 800c2ac:	687a      	ldr	r2, [r7, #4]
 800c2ae:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800c2b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	3718      	adds	r7, #24
 800c2b6:	46bd      	mov	sp, r7
 800c2b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c2bc:	b004      	add	sp, #16
 800c2be:	4770      	bx	lr
 800c2c0:	00800100 	.word	0x00800100
 800c2c4:	00010003 	.word	0x00010003
 800c2c8:	803c3800 	.word	0x803c3800
 800c2cc:	40000004 	.word	0x40000004

0800c2d0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c2d0:	b480      	push	{r7}
 800c2d2:	b085      	sub	sp, #20
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	6078      	str	r0, [r7, #4]
 800c2d8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800c2da:	2300      	movs	r3, #0
 800c2dc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c2de:	683b      	ldr	r3, [r7, #0]
 800c2e0:	019b      	lsls	r3, r3, #6
 800c2e2:	f043 0220 	orr.w	r2, r3, #32
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	3301      	adds	r3, #1
 800c2ee:	60fb      	str	r3, [r7, #12]
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	4a09      	ldr	r2, [pc, #36]	; (800c318 <USB_FlushTxFifo+0x48>)
 800c2f4:	4293      	cmp	r3, r2
 800c2f6:	d901      	bls.n	800c2fc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800c2f8:	2303      	movs	r3, #3
 800c2fa:	e006      	b.n	800c30a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	691b      	ldr	r3, [r3, #16]
 800c300:	f003 0320 	and.w	r3, r3, #32
 800c304:	2b20      	cmp	r3, #32
 800c306:	d0f0      	beq.n	800c2ea <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800c308:	2300      	movs	r3, #0
}
 800c30a:	4618      	mov	r0, r3
 800c30c:	3714      	adds	r7, #20
 800c30e:	46bd      	mov	sp, r7
 800c310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c314:	4770      	bx	lr
 800c316:	bf00      	nop
 800c318:	00030d40 	.word	0x00030d40

0800c31c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c31c:	b480      	push	{r7}
 800c31e:	b085      	sub	sp, #20
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800c324:	2300      	movs	r3, #0
 800c326:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	2210      	movs	r2, #16
 800c32c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	3301      	adds	r3, #1
 800c332:	60fb      	str	r3, [r7, #12]
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	4a09      	ldr	r2, [pc, #36]	; (800c35c <USB_FlushRxFifo+0x40>)
 800c338:	4293      	cmp	r3, r2
 800c33a:	d901      	bls.n	800c340 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800c33c:	2303      	movs	r3, #3
 800c33e:	e006      	b.n	800c34e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	691b      	ldr	r3, [r3, #16]
 800c344:	f003 0310 	and.w	r3, r3, #16
 800c348:	2b10      	cmp	r3, #16
 800c34a:	d0f0      	beq.n	800c32e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800c34c:	2300      	movs	r3, #0
}
 800c34e:	4618      	mov	r0, r3
 800c350:	3714      	adds	r7, #20
 800c352:	46bd      	mov	sp, r7
 800c354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c358:	4770      	bx	lr
 800c35a:	bf00      	nop
 800c35c:	00030d40 	.word	0x00030d40

0800c360 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800c360:	b480      	push	{r7}
 800c362:	b085      	sub	sp, #20
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
 800c368:	460b      	mov	r3, r1
 800c36a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c376:	681a      	ldr	r2, [r3, #0]
 800c378:	78fb      	ldrb	r3, [r7, #3]
 800c37a:	68f9      	ldr	r1, [r7, #12]
 800c37c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c380:	4313      	orrs	r3, r2
 800c382:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800c384:	2300      	movs	r3, #0
}
 800c386:	4618      	mov	r0, r3
 800c388:	3714      	adds	r7, #20
 800c38a:	46bd      	mov	sp, r7
 800c38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c390:	4770      	bx	lr

0800c392 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_HIGH: High speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800c392:	b480      	push	{r7}
 800c394:	b087      	sub	sp, #28
 800c396:	af00      	add	r7, sp, #0
 800c398:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800c39e:	693b      	ldr	r3, [r7, #16]
 800c3a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c3a4:	689b      	ldr	r3, [r3, #8]
 800c3a6:	f003 0306 	and.w	r3, r3, #6
 800c3aa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d102      	bne.n	800c3b8 <USB_GetDevSpeed+0x26>
  {
    speed = USB_OTG_SPEED_HIGH;
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	75fb      	strb	r3, [r7, #23]
 800c3b6:	e00a      	b.n	800c3ce <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	2b02      	cmp	r3, #2
 800c3bc:	d002      	beq.n	800c3c4 <USB_GetDevSpeed+0x32>
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	2b06      	cmp	r3, #6
 800c3c2:	d102      	bne.n	800c3ca <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USB_OTG_SPEED_FULL;
 800c3c4:	2303      	movs	r3, #3
 800c3c6:	75fb      	strb	r3, [r7, #23]
 800c3c8:	e001      	b.n	800c3ce <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0U;
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800c3ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	371c      	adds	r7, #28
 800c3d4:	46bd      	mov	sp, r7
 800c3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3da:	4770      	bx	lr

0800c3dc <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800c3dc:	b480      	push	{r7}
 800c3de:	b089      	sub	sp, #36	; 0x24
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	60f8      	str	r0, [r7, #12]
 800c3e4:	60b9      	str	r1, [r7, #8]
 800c3e6:	4611      	mov	r1, r2
 800c3e8:	461a      	mov	r2, r3
 800c3ea:	460b      	mov	r3, r1
 800c3ec:	71fb      	strb	r3, [r7, #7]
 800c3ee:	4613      	mov	r3, r2
 800c3f0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800c3f6:	68bb      	ldr	r3, [r7, #8]
 800c3f8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800c3fa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d11a      	bne.n	800c438 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800c402:	88bb      	ldrh	r3, [r7, #4]
 800c404:	3303      	adds	r3, #3
 800c406:	089b      	lsrs	r3, r3, #2
 800c408:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800c40a:	2300      	movs	r3, #0
 800c40c:	61bb      	str	r3, [r7, #24]
 800c40e:	e00f      	b.n	800c430 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 800c410:	79fb      	ldrb	r3, [r7, #7]
 800c412:	031a      	lsls	r2, r3, #12
 800c414:	697b      	ldr	r3, [r7, #20]
 800c416:	4413      	add	r3, r2
 800c418:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c41c:	461a      	mov	r2, r3
 800c41e:	69fb      	ldr	r3, [r7, #28]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	6013      	str	r3, [r2, #0]
      pSrc++;
 800c424:	69fb      	ldr	r3, [r7, #28]
 800c426:	3304      	adds	r3, #4
 800c428:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800c42a:	69bb      	ldr	r3, [r7, #24]
 800c42c:	3301      	adds	r3, #1
 800c42e:	61bb      	str	r3, [r7, #24]
 800c430:	69ba      	ldr	r2, [r7, #24]
 800c432:	693b      	ldr	r3, [r7, #16]
 800c434:	429a      	cmp	r2, r3
 800c436:	d3eb      	bcc.n	800c410 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800c438:	2300      	movs	r3, #0
}
 800c43a:	4618      	mov	r0, r3
 800c43c:	3724      	adds	r7, #36	; 0x24
 800c43e:	46bd      	mov	sp, r7
 800c440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c444:	4770      	bx	lr

0800c446 <USB_ReadPacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c446:	b480      	push	{r7}
 800c448:	b089      	sub	sp, #36	; 0x24
 800c44a:	af00      	add	r7, sp, #0
 800c44c:	60f8      	str	r0, [r7, #12]
 800c44e:	60b9      	str	r1, [r7, #8]
 800c450:	4613      	mov	r3, r2
 800c452:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800c458:	68bb      	ldr	r3, [r7, #8]
 800c45a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800c45c:	88fb      	ldrh	r3, [r7, #6]
 800c45e:	3303      	adds	r3, #3
 800c460:	089b      	lsrs	r3, r3, #2
 800c462:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800c464:	2300      	movs	r3, #0
 800c466:	61bb      	str	r3, [r7, #24]
 800c468:	e00b      	b.n	800c482 <USB_ReadPacket+0x3c>
  {
    *(__packed uint32_t *)pDest = USBx_DFIFO(0U);
 800c46a:	697b      	ldr	r3, [r7, #20]
 800c46c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c470:	681a      	ldr	r2, [r3, #0]
 800c472:	69fb      	ldr	r3, [r7, #28]
 800c474:	601a      	str	r2, [r3, #0]
    pDest++;
 800c476:	69fb      	ldr	r3, [r7, #28]
 800c478:	3304      	adds	r3, #4
 800c47a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800c47c:	69bb      	ldr	r3, [r7, #24]
 800c47e:	3301      	adds	r3, #1
 800c480:	61bb      	str	r3, [r7, #24]
 800c482:	69ba      	ldr	r2, [r7, #24]
 800c484:	693b      	ldr	r3, [r7, #16]
 800c486:	429a      	cmp	r2, r3
 800c488:	d3ef      	bcc.n	800c46a <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800c48a:	69fb      	ldr	r3, [r7, #28]
}
 800c48c:	4618      	mov	r0, r3
 800c48e:	3724      	adds	r7, #36	; 0x24
 800c490:	46bd      	mov	sp, r7
 800c492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c496:	4770      	bx	lr

0800c498 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c498:	b580      	push	{r7, lr}
 800c49a:	b084      	sub	sp, #16
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c4aa:	685b      	ldr	r3, [r3, #4]
 800c4ac:	68fa      	ldr	r2, [r7, #12]
 800c4ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c4b2:	f043 0302 	orr.w	r3, r3, #2
 800c4b6:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800c4b8:	2003      	movs	r0, #3
 800c4ba:	f7f6 fd9d 	bl	8002ff8 <HAL_Delay>

  return HAL_OK;
 800c4be:	2300      	movs	r3, #0
}
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	3710      	adds	r7, #16
 800c4c4:	46bd      	mov	sp, r7
 800c4c6:	bd80      	pop	{r7, pc}

0800c4c8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800c4c8:	b480      	push	{r7}
 800c4ca:	b085      	sub	sp, #20
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	695b      	ldr	r3, [r3, #20]
 800c4d4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	699b      	ldr	r3, [r3, #24]
 800c4da:	68fa      	ldr	r2, [r7, #12]
 800c4dc:	4013      	ands	r3, r2
 800c4de:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c4e0:	68fb      	ldr	r3, [r7, #12]
}
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	3714      	adds	r7, #20
 800c4e6:	46bd      	mov	sp, r7
 800c4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ec:	4770      	bx	lr

0800c4ee <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c4ee:	b480      	push	{r7}
 800c4f0:	b085      	sub	sp, #20
 800c4f2:	af00      	add	r7, sp, #0
 800c4f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c500:	699b      	ldr	r3, [r3, #24]
 800c502:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c50a:	69db      	ldr	r3, [r3, #28]
 800c50c:	68ba      	ldr	r2, [r7, #8]
 800c50e:	4013      	ands	r3, r2
 800c510:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800c512:	68bb      	ldr	r3, [r7, #8]
 800c514:	0c1b      	lsrs	r3, r3, #16
}
 800c516:	4618      	mov	r0, r3
 800c518:	3714      	adds	r7, #20
 800c51a:	46bd      	mov	sp, r7
 800c51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c520:	4770      	bx	lr

0800c522 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c522:	b480      	push	{r7}
 800c524:	b085      	sub	sp, #20
 800c526:	af00      	add	r7, sp, #0
 800c528:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c534:	699b      	ldr	r3, [r3, #24]
 800c536:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c53e:	69db      	ldr	r3, [r3, #28]
 800c540:	68ba      	ldr	r2, [r7, #8]
 800c542:	4013      	ands	r3, r2
 800c544:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800c546:	68bb      	ldr	r3, [r7, #8]
 800c548:	b29b      	uxth	r3, r3
}
 800c54a:	4618      	mov	r0, r3
 800c54c:	3714      	adds	r7, #20
 800c54e:	46bd      	mov	sp, r7
 800c550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c554:	4770      	bx	lr

0800c556 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c556:	b480      	push	{r7}
 800c558:	b085      	sub	sp, #20
 800c55a:	af00      	add	r7, sp, #0
 800c55c:	6078      	str	r0, [r7, #4]
 800c55e:	460b      	mov	r3, r1
 800c560:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800c566:	78fb      	ldrb	r3, [r7, #3]
 800c568:	015a      	lsls	r2, r3, #5
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	4413      	add	r3, r2
 800c56e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c572:	689b      	ldr	r3, [r3, #8]
 800c574:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c57c:	695b      	ldr	r3, [r3, #20]
 800c57e:	68ba      	ldr	r2, [r7, #8]
 800c580:	4013      	ands	r3, r2
 800c582:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c584:	68bb      	ldr	r3, [r7, #8]
}
 800c586:	4618      	mov	r0, r3
 800c588:	3714      	adds	r7, #20
 800c58a:	46bd      	mov	sp, r7
 800c58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c590:	4770      	bx	lr

0800c592 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c592:	b480      	push	{r7}
 800c594:	b087      	sub	sp, #28
 800c596:	af00      	add	r7, sp, #0
 800c598:	6078      	str	r0, [r7, #4]
 800c59a:	460b      	mov	r3, r1
 800c59c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800c5a2:	697b      	ldr	r3, [r7, #20]
 800c5a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c5a8:	691b      	ldr	r3, [r3, #16]
 800c5aa:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800c5ac:	697b      	ldr	r3, [r7, #20]
 800c5ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c5b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5b4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800c5b6:	78fb      	ldrb	r3, [r7, #3]
 800c5b8:	f003 030f 	and.w	r3, r3, #15
 800c5bc:	68fa      	ldr	r2, [r7, #12]
 800c5be:	fa22 f303 	lsr.w	r3, r2, r3
 800c5c2:	01db      	lsls	r3, r3, #7
 800c5c4:	b2db      	uxtb	r3, r3
 800c5c6:	693a      	ldr	r2, [r7, #16]
 800c5c8:	4313      	orrs	r3, r2
 800c5ca:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800c5cc:	78fb      	ldrb	r3, [r7, #3]
 800c5ce:	015a      	lsls	r2, r3, #5
 800c5d0:	697b      	ldr	r3, [r7, #20]
 800c5d2:	4413      	add	r3, r2
 800c5d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5d8:	689b      	ldr	r3, [r3, #8]
 800c5da:	693a      	ldr	r2, [r7, #16]
 800c5dc:	4013      	ands	r3, r2
 800c5de:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c5e0:	68bb      	ldr	r3, [r7, #8]
}
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	371c      	adds	r7, #28
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ec:	4770      	bx	lr

0800c5ee <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c5ee:	b480      	push	{r7}
 800c5f0:	b083      	sub	sp, #12
 800c5f2:	af00      	add	r7, sp, #0
 800c5f4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	695b      	ldr	r3, [r3, #20]
 800c5fa:	f003 0301 	and.w	r3, r3, #1
}
 800c5fe:	4618      	mov	r0, r3
 800c600:	370c      	adds	r7, #12
 800c602:	46bd      	mov	sp, r7
 800c604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c608:	4770      	bx	lr
	...

0800c60c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800c60c:	b480      	push	{r7}
 800c60e:	b085      	sub	sp, #20
 800c610:	af00      	add	r7, sp, #0
 800c612:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c61e:	681a      	ldr	r2, [r3, #0]
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c626:	4619      	mov	r1, r3
 800c628:	4b12      	ldr	r3, [pc, #72]	; (800c674 <USB_ActivateSetup+0x68>)
 800c62a:	4013      	ands	r3, r2
 800c62c:	600b      	str	r3, [r1, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c634:	689b      	ldr	r3, [r3, #8]
 800c636:	f003 0306 	and.w	r3, r3, #6
 800c63a:	2b04      	cmp	r3, #4
 800c63c:	d109      	bne.n	800c652 <USB_ActivateSetup+0x46>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	68fa      	ldr	r2, [r7, #12]
 800c648:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c64c:	f043 0303 	orr.w	r3, r3, #3
 800c650:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c658:	685b      	ldr	r3, [r3, #4]
 800c65a:	68fa      	ldr	r2, [r7, #12]
 800c65c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c660:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c664:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c666:	2300      	movs	r3, #0
}
 800c668:	4618      	mov	r0, r3
 800c66a:	3714      	adds	r7, #20
 800c66c:	46bd      	mov	sp, r7
 800c66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c672:	4770      	bx	lr
 800c674:	fffff800 	.word	0xfffff800

0800c678 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800c678:	b480      	push	{r7}
 800c67a:	b087      	sub	sp, #28
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	60f8      	str	r0, [r7, #12]
 800c680:	460b      	mov	r3, r1
 800c682:	607a      	str	r2, [r7, #4]
 800c684:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	333c      	adds	r3, #60	; 0x3c
 800c68e:	3304      	adds	r3, #4
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800c694:	693b      	ldr	r3, [r7, #16]
 800c696:	4a26      	ldr	r2, [pc, #152]	; (800c730 <USB_EP0_OutStart+0xb8>)
 800c698:	4293      	cmp	r3, r2
 800c69a:	d90a      	bls.n	800c6b2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c69c:	697b      	ldr	r3, [r7, #20]
 800c69e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c6a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c6ac:	d101      	bne.n	800c6b2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800c6ae:	2300      	movs	r3, #0
 800c6b0:	e037      	b.n	800c722 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800c6b2:	697b      	ldr	r3, [r7, #20]
 800c6b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6b8:	461a      	mov	r2, r3
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c6be:	697b      	ldr	r3, [r7, #20]
 800c6c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6c4:	691b      	ldr	r3, [r3, #16]
 800c6c6:	697a      	ldr	r2, [r7, #20]
 800c6c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c6cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c6d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800c6d2:	697b      	ldr	r3, [r7, #20]
 800c6d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6d8:	691b      	ldr	r3, [r3, #16]
 800c6da:	697a      	ldr	r2, [r7, #20]
 800c6dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c6e0:	f043 0318 	orr.w	r3, r3, #24
 800c6e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800c6e6:	697b      	ldr	r3, [r7, #20]
 800c6e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6ec:	691b      	ldr	r3, [r3, #16]
 800c6ee:	697a      	ldr	r2, [r7, #20]
 800c6f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c6f4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800c6f8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800c6fa:	7afb      	ldrb	r3, [r7, #11]
 800c6fc:	2b01      	cmp	r3, #1
 800c6fe:	d10f      	bne.n	800c720 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800c700:	697b      	ldr	r3, [r7, #20]
 800c702:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c706:	461a      	mov	r2, r3
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800c70c:	697b      	ldr	r3, [r7, #20]
 800c70e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	697a      	ldr	r2, [r7, #20]
 800c716:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c71a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800c71e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c720:	2300      	movs	r3, #0
}
 800c722:	4618      	mov	r0, r3
 800c724:	371c      	adds	r7, #28
 800c726:	46bd      	mov	sp, r7
 800c728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c72c:	4770      	bx	lr
 800c72e:	bf00      	nop
 800c730:	4f54300a 	.word	0x4f54300a

0800c734 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c734:	b480      	push	{r7}
 800c736:	b085      	sub	sp, #20
 800c738:	af00      	add	r7, sp, #0
 800c73a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800c73c:	2300      	movs	r3, #0
 800c73e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	3301      	adds	r3, #1
 800c744:	60fb      	str	r3, [r7, #12]
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	4a13      	ldr	r2, [pc, #76]	; (800c798 <USB_CoreReset+0x64>)
 800c74a:	4293      	cmp	r3, r2
 800c74c:	d901      	bls.n	800c752 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c74e:	2303      	movs	r3, #3
 800c750:	e01b      	b.n	800c78a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	691b      	ldr	r3, [r3, #16]
 800c756:	2b00      	cmp	r3, #0
 800c758:	daf2      	bge.n	800c740 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c75a:	2300      	movs	r3, #0
 800c75c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	691b      	ldr	r3, [r3, #16]
 800c762:	f043 0201 	orr.w	r2, r3, #1
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	3301      	adds	r3, #1
 800c76e:	60fb      	str	r3, [r7, #12]
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	4a09      	ldr	r2, [pc, #36]	; (800c798 <USB_CoreReset+0x64>)
 800c774:	4293      	cmp	r3, r2
 800c776:	d901      	bls.n	800c77c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c778:	2303      	movs	r3, #3
 800c77a:	e006      	b.n	800c78a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	691b      	ldr	r3, [r3, #16]
 800c780:	f003 0301 	and.w	r3, r3, #1
 800c784:	2b01      	cmp	r3, #1
 800c786:	d0f0      	beq.n	800c76a <USB_CoreReset+0x36>

  return HAL_OK;
 800c788:	2300      	movs	r3, #0
}
 800c78a:	4618      	mov	r0, r3
 800c78c:	3714      	adds	r7, #20
 800c78e:	46bd      	mov	sp, r7
 800c790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c794:	4770      	bx	lr
 800c796:	bf00      	nop
 800c798:	00030d40 	.word	0x00030d40

0800c79c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800c79c:	b480      	push	{r7}
 800c79e:	b085      	sub	sp, #20
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	4603      	mov	r3, r0
 800c7a4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800c7aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c7ae:	2b84      	cmp	r3, #132	; 0x84
 800c7b0:	d005      	beq.n	800c7be <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800c7b2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	4413      	add	r3, r2
 800c7ba:	3303      	adds	r3, #3
 800c7bc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800c7be:	68fb      	ldr	r3, [r7, #12]
}
 800c7c0:	4618      	mov	r0, r3
 800c7c2:	3714      	adds	r7, #20
 800c7c4:	46bd      	mov	sp, r7
 800c7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ca:	4770      	bx	lr

0800c7cc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800c7d0:	f000 fa5e 	bl	800cc90 <vTaskStartScheduler>
  
  return osOK;
 800c7d4:	2300      	movs	r3, #0
}
 800c7d6:	4618      	mov	r0, r3
 800c7d8:	bd80      	pop	{r7, pc}

0800c7da <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800c7da:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c7dc:	b087      	sub	sp, #28
 800c7de:	af02      	add	r7, sp, #8
 800c7e0:	6078      	str	r0, [r7, #4]
 800c7e2:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	685c      	ldr	r4, [r3, #4]
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c7f0:	b29e      	uxth	r6, r3
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	f7ff ffcf 	bl	800c79c <makeFreeRtosPriority>
 800c7fe:	4602      	mov	r2, r0
 800c800:	f107 030c 	add.w	r3, r7, #12
 800c804:	9301      	str	r3, [sp, #4]
 800c806:	9200      	str	r2, [sp, #0]
 800c808:	683b      	ldr	r3, [r7, #0]
 800c80a:	4632      	mov	r2, r6
 800c80c:	4629      	mov	r1, r5
 800c80e:	4620      	mov	r0, r4
 800c810:	f000 f8d2 	bl	800c9b8 <xTaskCreate>
 800c814:	4603      	mov	r3, r0
 800c816:	2b01      	cmp	r3, #1
 800c818:	d001      	beq.n	800c81e <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 800c81a:	2300      	movs	r3, #0
 800c81c:	e000      	b.n	800c820 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 800c81e:	68fb      	ldr	r3, [r7, #12]
}
 800c820:	4618      	mov	r0, r3
 800c822:	3714      	adds	r7, #20
 800c824:	46bd      	mov	sp, r7
 800c826:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c828 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800c828:	b580      	push	{r7, lr}
 800c82a:	b084      	sub	sp, #16
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	2b00      	cmp	r3, #0
 800c838:	d001      	beq.n	800c83e <osDelay+0x16>
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	e000      	b.n	800c840 <osDelay+0x18>
 800c83e:	2301      	movs	r3, #1
 800c840:	4618      	mov	r0, r3
 800c842:	f000 f9ef 	bl	800cc24 <vTaskDelay>
  
  return osOK;
 800c846:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800c848:	4618      	mov	r0, r3
 800c84a:	3710      	adds	r7, #16
 800c84c:	46bd      	mov	sp, r7
 800c84e:	bd80      	pop	{r7, pc}

0800c850 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c850:	b480      	push	{r7}
 800c852:	b083      	sub	sp, #12
 800c854:	af00      	add	r7, sp, #0
 800c856:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	f103 0208 	add.w	r2, r3, #8
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	f04f 32ff 	mov.w	r2, #4294967295
 800c868:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	f103 0208 	add.w	r2, r3, #8
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	f103 0208 	add.w	r2, r3, #8
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	2200      	movs	r2, #0
 800c882:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c884:	bf00      	nop
 800c886:	370c      	adds	r7, #12
 800c888:	46bd      	mov	sp, r7
 800c88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c88e:	4770      	bx	lr

0800c890 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c890:	b480      	push	{r7}
 800c892:	b083      	sub	sp, #12
 800c894:	af00      	add	r7, sp, #0
 800c896:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	2200      	movs	r2, #0
 800c89c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c89e:	bf00      	nop
 800c8a0:	370c      	adds	r7, #12
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a8:	4770      	bx	lr

0800c8aa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c8aa:	b480      	push	{r7}
 800c8ac:	b085      	sub	sp, #20
 800c8ae:	af00      	add	r7, sp, #0
 800c8b0:	6078      	str	r0, [r7, #4]
 800c8b2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	685b      	ldr	r3, [r3, #4]
 800c8b8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c8ba:	683b      	ldr	r3, [r7, #0]
 800c8bc:	68fa      	ldr	r2, [r7, #12]
 800c8be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	689a      	ldr	r2, [r3, #8]
 800c8c4:	683b      	ldr	r3, [r7, #0]
 800c8c6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	689b      	ldr	r3, [r3, #8]
 800c8cc:	683a      	ldr	r2, [r7, #0]
 800c8ce:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	683a      	ldr	r2, [r7, #0]
 800c8d4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800c8d6:	683b      	ldr	r3, [r7, #0]
 800c8d8:	687a      	ldr	r2, [r7, #4]
 800c8da:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	1c5a      	adds	r2, r3, #1
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	601a      	str	r2, [r3, #0]
}
 800c8e6:	bf00      	nop
 800c8e8:	3714      	adds	r7, #20
 800c8ea:	46bd      	mov	sp, r7
 800c8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f0:	4770      	bx	lr

0800c8f2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c8f2:	b480      	push	{r7}
 800c8f4:	b085      	sub	sp, #20
 800c8f6:	af00      	add	r7, sp, #0
 800c8f8:	6078      	str	r0, [r7, #4]
 800c8fa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c8fc:	683b      	ldr	r3, [r7, #0]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c902:	68bb      	ldr	r3, [r7, #8]
 800c904:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c908:	d103      	bne.n	800c912 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	691b      	ldr	r3, [r3, #16]
 800c90e:	60fb      	str	r3, [r7, #12]
 800c910:	e00c      	b.n	800c92c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	3308      	adds	r3, #8
 800c916:	60fb      	str	r3, [r7, #12]
 800c918:	e002      	b.n	800c920 <vListInsert+0x2e>
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	685b      	ldr	r3, [r3, #4]
 800c91e:	60fb      	str	r3, [r7, #12]
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	685b      	ldr	r3, [r3, #4]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	68ba      	ldr	r2, [r7, #8]
 800c928:	429a      	cmp	r2, r3
 800c92a:	d2f6      	bcs.n	800c91a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	685a      	ldr	r2, [r3, #4]
 800c930:	683b      	ldr	r3, [r7, #0]
 800c932:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c934:	683b      	ldr	r3, [r7, #0]
 800c936:	685b      	ldr	r3, [r3, #4]
 800c938:	683a      	ldr	r2, [r7, #0]
 800c93a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c93c:	683b      	ldr	r3, [r7, #0]
 800c93e:	68fa      	ldr	r2, [r7, #12]
 800c940:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	683a      	ldr	r2, [r7, #0]
 800c946:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800c948:	683b      	ldr	r3, [r7, #0]
 800c94a:	687a      	ldr	r2, [r7, #4]
 800c94c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	1c5a      	adds	r2, r3, #1
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	601a      	str	r2, [r3, #0]
}
 800c958:	bf00      	nop
 800c95a:	3714      	adds	r7, #20
 800c95c:	46bd      	mov	sp, r7
 800c95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c962:	4770      	bx	lr

0800c964 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c964:	b480      	push	{r7}
 800c966:	b085      	sub	sp, #20
 800c968:	af00      	add	r7, sp, #0
 800c96a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	691b      	ldr	r3, [r3, #16]
 800c970:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	685b      	ldr	r3, [r3, #4]
 800c976:	687a      	ldr	r2, [r7, #4]
 800c978:	6892      	ldr	r2, [r2, #8]
 800c97a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	689b      	ldr	r3, [r3, #8]
 800c980:	687a      	ldr	r2, [r7, #4]
 800c982:	6852      	ldr	r2, [r2, #4]
 800c984:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	685b      	ldr	r3, [r3, #4]
 800c98a:	687a      	ldr	r2, [r7, #4]
 800c98c:	429a      	cmp	r2, r3
 800c98e:	d103      	bne.n	800c998 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	689a      	ldr	r2, [r3, #8]
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	2200      	movs	r2, #0
 800c99c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	1e5a      	subs	r2, r3, #1
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	681b      	ldr	r3, [r3, #0]
}
 800c9ac:	4618      	mov	r0, r3
 800c9ae:	3714      	adds	r7, #20
 800c9b0:	46bd      	mov	sp, r7
 800c9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b6:	4770      	bx	lr

0800c9b8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c9b8:	b580      	push	{r7, lr}
 800c9ba:	b08c      	sub	sp, #48	; 0x30
 800c9bc:	af04      	add	r7, sp, #16
 800c9be:	60f8      	str	r0, [r7, #12]
 800c9c0:	60b9      	str	r1, [r7, #8]
 800c9c2:	603b      	str	r3, [r7, #0]
 800c9c4:	4613      	mov	r3, r2
 800c9c6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c9c8:	88fb      	ldrh	r3, [r7, #6]
 800c9ca:	009b      	lsls	r3, r3, #2
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	f000 fea3 	bl	800d718 <pvPortMalloc>
 800c9d2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c9d4:	697b      	ldr	r3, [r7, #20]
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d00e      	beq.n	800c9f8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800c9da:	2058      	movs	r0, #88	; 0x58
 800c9dc:	f000 fe9c 	bl	800d718 <pvPortMalloc>
 800c9e0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c9e2:	69fb      	ldr	r3, [r7, #28]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d003      	beq.n	800c9f0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c9e8:	69fb      	ldr	r3, [r7, #28]
 800c9ea:	697a      	ldr	r2, [r7, #20]
 800c9ec:	631a      	str	r2, [r3, #48]	; 0x30
 800c9ee:	e005      	b.n	800c9fc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c9f0:	6978      	ldr	r0, [r7, #20]
 800c9f2:	f000 ff5d 	bl	800d8b0 <vPortFree>
 800c9f6:	e001      	b.n	800c9fc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c9f8:	2300      	movs	r3, #0
 800c9fa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c9fc:	69fb      	ldr	r3, [r7, #28]
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d013      	beq.n	800ca2a <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ca02:	88fa      	ldrh	r2, [r7, #6]
 800ca04:	2300      	movs	r3, #0
 800ca06:	9303      	str	r3, [sp, #12]
 800ca08:	69fb      	ldr	r3, [r7, #28]
 800ca0a:	9302      	str	r3, [sp, #8]
 800ca0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca0e:	9301      	str	r3, [sp, #4]
 800ca10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca12:	9300      	str	r3, [sp, #0]
 800ca14:	683b      	ldr	r3, [r7, #0]
 800ca16:	68b9      	ldr	r1, [r7, #8]
 800ca18:	68f8      	ldr	r0, [r7, #12]
 800ca1a:	f000 f80e 	bl	800ca3a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ca1e:	69f8      	ldr	r0, [r7, #28]
 800ca20:	f000 f896 	bl	800cb50 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ca24:	2301      	movs	r3, #1
 800ca26:	61bb      	str	r3, [r7, #24]
 800ca28:	e002      	b.n	800ca30 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ca2a:	f04f 33ff 	mov.w	r3, #4294967295
 800ca2e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ca30:	69bb      	ldr	r3, [r7, #24]
	}
 800ca32:	4618      	mov	r0, r3
 800ca34:	3720      	adds	r7, #32
 800ca36:	46bd      	mov	sp, r7
 800ca38:	bd80      	pop	{r7, pc}

0800ca3a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ca3a:	b580      	push	{r7, lr}
 800ca3c:	b088      	sub	sp, #32
 800ca3e:	af00      	add	r7, sp, #0
 800ca40:	60f8      	str	r0, [r7, #12]
 800ca42:	60b9      	str	r1, [r7, #8]
 800ca44:	607a      	str	r2, [r7, #4]
 800ca46:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ca48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca4a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	009b      	lsls	r3, r3, #2
 800ca50:	461a      	mov	r2, r3
 800ca52:	21a5      	movs	r1, #165	; 0xa5
 800ca54:	f001 f892 	bl	800db7c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800ca58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ca5c:	6879      	ldr	r1, [r7, #4]
 800ca5e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800ca62:	440b      	add	r3, r1
 800ca64:	009b      	lsls	r3, r3, #2
 800ca66:	4413      	add	r3, r2
 800ca68:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800ca6a:	69bb      	ldr	r3, [r7, #24]
 800ca6c:	f023 0307 	bic.w	r3, r3, #7
 800ca70:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ca72:	69bb      	ldr	r3, [r7, #24]
 800ca74:	f003 0307 	and.w	r3, r3, #7
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d00b      	beq.n	800ca94 <prvInitialiseNewTask+0x5a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ca7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca80:	b672      	cpsid	i
 800ca82:	f383 8811 	msr	BASEPRI, r3
 800ca86:	f3bf 8f6f 	isb	sy
 800ca8a:	f3bf 8f4f 	dsb	sy
 800ca8e:	b662      	cpsie	i
 800ca90:	617b      	str	r3, [r7, #20]
 800ca92:	e7fe      	b.n	800ca92 <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ca94:	2300      	movs	r3, #0
 800ca96:	61fb      	str	r3, [r7, #28]
 800ca98:	e012      	b.n	800cac0 <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ca9a:	68ba      	ldr	r2, [r7, #8]
 800ca9c:	69fb      	ldr	r3, [r7, #28]
 800ca9e:	4413      	add	r3, r2
 800caa0:	7819      	ldrb	r1, [r3, #0]
 800caa2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800caa4:	69fb      	ldr	r3, [r7, #28]
 800caa6:	4413      	add	r3, r2
 800caa8:	3334      	adds	r3, #52	; 0x34
 800caaa:	460a      	mov	r2, r1
 800caac:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800caae:	68ba      	ldr	r2, [r7, #8]
 800cab0:	69fb      	ldr	r3, [r7, #28]
 800cab2:	4413      	add	r3, r2
 800cab4:	781b      	ldrb	r3, [r3, #0]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d006      	beq.n	800cac8 <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800caba:	69fb      	ldr	r3, [r7, #28]
 800cabc:	3301      	adds	r3, #1
 800cabe:	61fb      	str	r3, [r7, #28]
 800cac0:	69fb      	ldr	r3, [r7, #28]
 800cac2:	2b0f      	cmp	r3, #15
 800cac4:	d9e9      	bls.n	800ca9a <prvInitialiseNewTask+0x60>
 800cac6:	e000      	b.n	800caca <prvInitialiseNewTask+0x90>
		{
			break;
 800cac8:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800caca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cacc:	2200      	movs	r2, #0
 800cace:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cad4:	2b06      	cmp	r3, #6
 800cad6:	d901      	bls.n	800cadc <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800cad8:	2306      	movs	r3, #6
 800cada:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800cadc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cade:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cae0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800cae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cae4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cae6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800cae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caea:	2200      	movs	r2, #0
 800caec:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800caee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caf0:	3304      	adds	r3, #4
 800caf2:	4618      	mov	r0, r3
 800caf4:	f7ff fecc 	bl	800c890 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800caf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cafa:	3318      	adds	r3, #24
 800cafc:	4618      	mov	r0, r3
 800cafe:	f7ff fec7 	bl	800c890 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cb02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb06:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cb08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb0a:	f1c3 0207 	rsb	r2, r3, #7
 800cb0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb10:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cb12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb16:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800cb18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb1a:	2200      	movs	r2, #0
 800cb1c:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800cb1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb20:	2200      	movs	r2, #0
 800cb22:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cb24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb26:	2200      	movs	r2, #0
 800cb28:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cb2c:	683a      	ldr	r2, [r7, #0]
 800cb2e:	68f9      	ldr	r1, [r7, #12]
 800cb30:	69b8      	ldr	r0, [r7, #24]
 800cb32:	f000 fc05 	bl	800d340 <pxPortInitialiseStack>
 800cb36:	4602      	mov	r2, r0
 800cb38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb3a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800cb3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d002      	beq.n	800cb48 <prvInitialiseNewTask+0x10e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cb42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb46:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cb48:	bf00      	nop
 800cb4a:	3720      	adds	r7, #32
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	bd80      	pop	{r7, pc}

0800cb50 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800cb50:	b580      	push	{r7, lr}
 800cb52:	b082      	sub	sp, #8
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cb58:	f000 fcfe 	bl	800d558 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cb5c:	4b2a      	ldr	r3, [pc, #168]	; (800cc08 <prvAddNewTaskToReadyList+0xb8>)
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	3301      	adds	r3, #1
 800cb62:	4a29      	ldr	r2, [pc, #164]	; (800cc08 <prvAddNewTaskToReadyList+0xb8>)
 800cb64:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cb66:	4b29      	ldr	r3, [pc, #164]	; (800cc0c <prvAddNewTaskToReadyList+0xbc>)
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d109      	bne.n	800cb82 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800cb6e:	4a27      	ldr	r2, [pc, #156]	; (800cc0c <prvAddNewTaskToReadyList+0xbc>)
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cb74:	4b24      	ldr	r3, [pc, #144]	; (800cc08 <prvAddNewTaskToReadyList+0xb8>)
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	2b01      	cmp	r3, #1
 800cb7a:	d110      	bne.n	800cb9e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cb7c:	f000 fad8 	bl	800d130 <prvInitialiseTaskLists>
 800cb80:	e00d      	b.n	800cb9e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800cb82:	4b23      	ldr	r3, [pc, #140]	; (800cc10 <prvAddNewTaskToReadyList+0xc0>)
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d109      	bne.n	800cb9e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cb8a:	4b20      	ldr	r3, [pc, #128]	; (800cc0c <prvAddNewTaskToReadyList+0xbc>)
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb94:	429a      	cmp	r2, r3
 800cb96:	d802      	bhi.n	800cb9e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800cb98:	4a1c      	ldr	r2, [pc, #112]	; (800cc0c <prvAddNewTaskToReadyList+0xbc>)
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800cb9e:	4b1d      	ldr	r3, [pc, #116]	; (800cc14 <prvAddNewTaskToReadyList+0xc4>)
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	3301      	adds	r3, #1
 800cba4:	4a1b      	ldr	r2, [pc, #108]	; (800cc14 <prvAddNewTaskToReadyList+0xc4>)
 800cba6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbac:	2201      	movs	r2, #1
 800cbae:	409a      	lsls	r2, r3
 800cbb0:	4b19      	ldr	r3, [pc, #100]	; (800cc18 <prvAddNewTaskToReadyList+0xc8>)
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	4313      	orrs	r3, r2
 800cbb6:	4a18      	ldr	r2, [pc, #96]	; (800cc18 <prvAddNewTaskToReadyList+0xc8>)
 800cbb8:	6013      	str	r3, [r2, #0]
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbbe:	4613      	mov	r3, r2
 800cbc0:	009b      	lsls	r3, r3, #2
 800cbc2:	4413      	add	r3, r2
 800cbc4:	009b      	lsls	r3, r3, #2
 800cbc6:	4a15      	ldr	r2, [pc, #84]	; (800cc1c <prvAddNewTaskToReadyList+0xcc>)
 800cbc8:	441a      	add	r2, r3
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	3304      	adds	r3, #4
 800cbce:	4619      	mov	r1, r3
 800cbd0:	4610      	mov	r0, r2
 800cbd2:	f7ff fe6a 	bl	800c8aa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800cbd6:	f000 fcf1 	bl	800d5bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800cbda:	4b0d      	ldr	r3, [pc, #52]	; (800cc10 <prvAddNewTaskToReadyList+0xc0>)
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d00e      	beq.n	800cc00 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800cbe2:	4b0a      	ldr	r3, [pc, #40]	; (800cc0c <prvAddNewTaskToReadyList+0xbc>)
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbec:	429a      	cmp	r2, r3
 800cbee:	d207      	bcs.n	800cc00 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800cbf0:	4b0b      	ldr	r3, [pc, #44]	; (800cc20 <prvAddNewTaskToReadyList+0xd0>)
 800cbf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cbf6:	601a      	str	r2, [r3, #0]
 800cbf8:	f3bf 8f4f 	dsb	sy
 800cbfc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cc00:	bf00      	nop
 800cc02:	3708      	adds	r7, #8
 800cc04:	46bd      	mov	sp, r7
 800cc06:	bd80      	pop	{r7, pc}
 800cc08:	20000134 	.word	0x20000134
 800cc0c:	20000034 	.word	0x20000034
 800cc10:	20000140 	.word	0x20000140
 800cc14:	20000150 	.word	0x20000150
 800cc18:	2000013c 	.word	0x2000013c
 800cc1c:	20000038 	.word	0x20000038
 800cc20:	e000ed04 	.word	0xe000ed04

0800cc24 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800cc24:	b580      	push	{r7, lr}
 800cc26:	b084      	sub	sp, #16
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800cc2c:	2300      	movs	r3, #0
 800cc2e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d018      	beq.n	800cc68 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800cc36:	4b14      	ldr	r3, [pc, #80]	; (800cc88 <vTaskDelay+0x64>)
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d00b      	beq.n	800cc56 <vTaskDelay+0x32>
 800cc3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc42:	b672      	cpsid	i
 800cc44:	f383 8811 	msr	BASEPRI, r3
 800cc48:	f3bf 8f6f 	isb	sy
 800cc4c:	f3bf 8f4f 	dsb	sy
 800cc50:	b662      	cpsie	i
 800cc52:	60bb      	str	r3, [r7, #8]
 800cc54:	e7fe      	b.n	800cc54 <vTaskDelay+0x30>
			vTaskSuspendAll();
 800cc56:	f000 f865 	bl	800cd24 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800cc5a:	2100      	movs	r1, #0
 800cc5c:	6878      	ldr	r0, [r7, #4]
 800cc5e:	f000 fb09 	bl	800d274 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800cc62:	f000 f86d 	bl	800cd40 <xTaskResumeAll>
 800cc66:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d107      	bne.n	800cc7e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800cc6e:	4b07      	ldr	r3, [pc, #28]	; (800cc8c <vTaskDelay+0x68>)
 800cc70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc74:	601a      	str	r2, [r3, #0]
 800cc76:	f3bf 8f4f 	dsb	sy
 800cc7a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cc7e:	bf00      	nop
 800cc80:	3710      	adds	r7, #16
 800cc82:	46bd      	mov	sp, r7
 800cc84:	bd80      	pop	{r7, pc}
 800cc86:	bf00      	nop
 800cc88:	2000015c 	.word	0x2000015c
 800cc8c:	e000ed04 	.word	0xe000ed04

0800cc90 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800cc90:	b580      	push	{r7, lr}
 800cc92:	b086      	sub	sp, #24
 800cc94:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800cc96:	4b1d      	ldr	r3, [pc, #116]	; (800cd0c <vTaskStartScheduler+0x7c>)
 800cc98:	9301      	str	r3, [sp, #4]
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	9300      	str	r3, [sp, #0]
 800cc9e:	2300      	movs	r3, #0
 800cca0:	2280      	movs	r2, #128	; 0x80
 800cca2:	491b      	ldr	r1, [pc, #108]	; (800cd10 <vTaskStartScheduler+0x80>)
 800cca4:	481b      	ldr	r0, [pc, #108]	; (800cd14 <vTaskStartScheduler+0x84>)
 800cca6:	f7ff fe87 	bl	800c9b8 <xTaskCreate>
 800ccaa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	2b01      	cmp	r3, #1
 800ccb0:	d117      	bne.n	800cce2 <vTaskStartScheduler+0x52>
 800ccb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccb6:	b672      	cpsid	i
 800ccb8:	f383 8811 	msr	BASEPRI, r3
 800ccbc:	f3bf 8f6f 	isb	sy
 800ccc0:	f3bf 8f4f 	dsb	sy
 800ccc4:	b662      	cpsie	i
 800ccc6:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ccc8:	4b13      	ldr	r3, [pc, #76]	; (800cd18 <vTaskStartScheduler+0x88>)
 800ccca:	f04f 32ff 	mov.w	r2, #4294967295
 800ccce:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ccd0:	4b12      	ldr	r3, [pc, #72]	; (800cd1c <vTaskStartScheduler+0x8c>)
 800ccd2:	2201      	movs	r2, #1
 800ccd4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800ccd6:	4b12      	ldr	r3, [pc, #72]	; (800cd20 <vTaskStartScheduler+0x90>)
 800ccd8:	2200      	movs	r2, #0
 800ccda:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ccdc:	f000 fbc0 	bl	800d460 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800cce0:	e00f      	b.n	800cd02 <vTaskStartScheduler+0x72>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cce8:	d10b      	bne.n	800cd02 <vTaskStartScheduler+0x72>
 800ccea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccee:	b672      	cpsid	i
 800ccf0:	f383 8811 	msr	BASEPRI, r3
 800ccf4:	f3bf 8f6f 	isb	sy
 800ccf8:	f3bf 8f4f 	dsb	sy
 800ccfc:	b662      	cpsie	i
 800ccfe:	607b      	str	r3, [r7, #4]
 800cd00:	e7fe      	b.n	800cd00 <vTaskStartScheduler+0x70>
}
 800cd02:	bf00      	nop
 800cd04:	3710      	adds	r7, #16
 800cd06:	46bd      	mov	sp, r7
 800cd08:	bd80      	pop	{r7, pc}
 800cd0a:	bf00      	nop
 800cd0c:	20000158 	.word	0x20000158
 800cd10:	0800dbc4 	.word	0x0800dbc4
 800cd14:	0800d0fd 	.word	0x0800d0fd
 800cd18:	20000154 	.word	0x20000154
 800cd1c:	20000140 	.word	0x20000140
 800cd20:	20000138 	.word	0x20000138

0800cd24 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800cd24:	b480      	push	{r7}
 800cd26:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800cd28:	4b04      	ldr	r3, [pc, #16]	; (800cd3c <vTaskSuspendAll+0x18>)
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	3301      	adds	r3, #1
 800cd2e:	4a03      	ldr	r2, [pc, #12]	; (800cd3c <vTaskSuspendAll+0x18>)
 800cd30:	6013      	str	r3, [r2, #0]
}
 800cd32:	bf00      	nop
 800cd34:	46bd      	mov	sp, r7
 800cd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd3a:	4770      	bx	lr
 800cd3c:	2000015c 	.word	0x2000015c

0800cd40 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800cd40:	b580      	push	{r7, lr}
 800cd42:	b084      	sub	sp, #16
 800cd44:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800cd46:	2300      	movs	r3, #0
 800cd48:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800cd4e:	4b42      	ldr	r3, [pc, #264]	; (800ce58 <xTaskResumeAll+0x118>)
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d10b      	bne.n	800cd6e <xTaskResumeAll+0x2e>
 800cd56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd5a:	b672      	cpsid	i
 800cd5c:	f383 8811 	msr	BASEPRI, r3
 800cd60:	f3bf 8f6f 	isb	sy
 800cd64:	f3bf 8f4f 	dsb	sy
 800cd68:	b662      	cpsie	i
 800cd6a:	603b      	str	r3, [r7, #0]
 800cd6c:	e7fe      	b.n	800cd6c <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800cd6e:	f000 fbf3 	bl	800d558 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800cd72:	4b39      	ldr	r3, [pc, #228]	; (800ce58 <xTaskResumeAll+0x118>)
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	3b01      	subs	r3, #1
 800cd78:	4a37      	ldr	r2, [pc, #220]	; (800ce58 <xTaskResumeAll+0x118>)
 800cd7a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cd7c:	4b36      	ldr	r3, [pc, #216]	; (800ce58 <xTaskResumeAll+0x118>)
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d161      	bne.n	800ce48 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800cd84:	4b35      	ldr	r3, [pc, #212]	; (800ce5c <xTaskResumeAll+0x11c>)
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d05d      	beq.n	800ce48 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cd8c:	e02e      	b.n	800cdec <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800cd8e:	4b34      	ldr	r3, [pc, #208]	; (800ce60 <xTaskResumeAll+0x120>)
 800cd90:	68db      	ldr	r3, [r3, #12]
 800cd92:	68db      	ldr	r3, [r3, #12]
 800cd94:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	3318      	adds	r3, #24
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	f7ff fde2 	bl	800c964 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	3304      	adds	r3, #4
 800cda4:	4618      	mov	r0, r3
 800cda6:	f7ff fddd 	bl	800c964 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdae:	2201      	movs	r2, #1
 800cdb0:	409a      	lsls	r2, r3
 800cdb2:	4b2c      	ldr	r3, [pc, #176]	; (800ce64 <xTaskResumeAll+0x124>)
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	4313      	orrs	r3, r2
 800cdb8:	4a2a      	ldr	r2, [pc, #168]	; (800ce64 <xTaskResumeAll+0x124>)
 800cdba:	6013      	str	r3, [r2, #0]
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdc0:	4613      	mov	r3, r2
 800cdc2:	009b      	lsls	r3, r3, #2
 800cdc4:	4413      	add	r3, r2
 800cdc6:	009b      	lsls	r3, r3, #2
 800cdc8:	4a27      	ldr	r2, [pc, #156]	; (800ce68 <xTaskResumeAll+0x128>)
 800cdca:	441a      	add	r2, r3
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	3304      	adds	r3, #4
 800cdd0:	4619      	mov	r1, r3
 800cdd2:	4610      	mov	r0, r2
 800cdd4:	f7ff fd69 	bl	800c8aa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cddc:	4b23      	ldr	r3, [pc, #140]	; (800ce6c <xTaskResumeAll+0x12c>)
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cde2:	429a      	cmp	r2, r3
 800cde4:	d302      	bcc.n	800cdec <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800cde6:	4b22      	ldr	r3, [pc, #136]	; (800ce70 <xTaskResumeAll+0x130>)
 800cde8:	2201      	movs	r2, #1
 800cdea:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cdec:	4b1c      	ldr	r3, [pc, #112]	; (800ce60 <xTaskResumeAll+0x120>)
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d1cc      	bne.n	800cd8e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d001      	beq.n	800cdfe <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800cdfa:	f000 fa15 	bl	800d228 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800cdfe:	4b1d      	ldr	r3, [pc, #116]	; (800ce74 <xTaskResumeAll+0x134>)
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d010      	beq.n	800ce2c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ce0a:	f000 f837 	bl	800ce7c <xTaskIncrementTick>
 800ce0e:	4603      	mov	r3, r0
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d002      	beq.n	800ce1a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800ce14:	4b16      	ldr	r3, [pc, #88]	; (800ce70 <xTaskResumeAll+0x130>)
 800ce16:	2201      	movs	r2, #1
 800ce18:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	3b01      	subs	r3, #1
 800ce1e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d1f1      	bne.n	800ce0a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800ce26:	4b13      	ldr	r3, [pc, #76]	; (800ce74 <xTaskResumeAll+0x134>)
 800ce28:	2200      	movs	r2, #0
 800ce2a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ce2c:	4b10      	ldr	r3, [pc, #64]	; (800ce70 <xTaskResumeAll+0x130>)
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d009      	beq.n	800ce48 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ce34:	2301      	movs	r3, #1
 800ce36:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ce38:	4b0f      	ldr	r3, [pc, #60]	; (800ce78 <xTaskResumeAll+0x138>)
 800ce3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce3e:	601a      	str	r2, [r3, #0]
 800ce40:	f3bf 8f4f 	dsb	sy
 800ce44:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ce48:	f000 fbb8 	bl	800d5bc <vPortExitCritical>

	return xAlreadyYielded;
 800ce4c:	68bb      	ldr	r3, [r7, #8]
}
 800ce4e:	4618      	mov	r0, r3
 800ce50:	3710      	adds	r7, #16
 800ce52:	46bd      	mov	sp, r7
 800ce54:	bd80      	pop	{r7, pc}
 800ce56:	bf00      	nop
 800ce58:	2000015c 	.word	0x2000015c
 800ce5c:	20000134 	.word	0x20000134
 800ce60:	200000f4 	.word	0x200000f4
 800ce64:	2000013c 	.word	0x2000013c
 800ce68:	20000038 	.word	0x20000038
 800ce6c:	20000034 	.word	0x20000034
 800ce70:	20000148 	.word	0x20000148
 800ce74:	20000144 	.word	0x20000144
 800ce78:	e000ed04 	.word	0xe000ed04

0800ce7c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ce7c:	b580      	push	{r7, lr}
 800ce7e:	b086      	sub	sp, #24
 800ce80:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ce82:	2300      	movs	r3, #0
 800ce84:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ce86:	4b51      	ldr	r3, [pc, #324]	; (800cfcc <xTaskIncrementTick+0x150>)
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	f040 808e 	bne.w	800cfac <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ce90:	4b4f      	ldr	r3, [pc, #316]	; (800cfd0 <xTaskIncrementTick+0x154>)
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	3301      	adds	r3, #1
 800ce96:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ce98:	4a4d      	ldr	r2, [pc, #308]	; (800cfd0 <xTaskIncrementTick+0x154>)
 800ce9a:	693b      	ldr	r3, [r7, #16]
 800ce9c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ce9e:	693b      	ldr	r3, [r7, #16]
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d121      	bne.n	800cee8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800cea4:	4b4b      	ldr	r3, [pc, #300]	; (800cfd4 <xTaskIncrementTick+0x158>)
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d00b      	beq.n	800cec6 <xTaskIncrementTick+0x4a>
 800ceae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceb2:	b672      	cpsid	i
 800ceb4:	f383 8811 	msr	BASEPRI, r3
 800ceb8:	f3bf 8f6f 	isb	sy
 800cebc:	f3bf 8f4f 	dsb	sy
 800cec0:	b662      	cpsie	i
 800cec2:	603b      	str	r3, [r7, #0]
 800cec4:	e7fe      	b.n	800cec4 <xTaskIncrementTick+0x48>
 800cec6:	4b43      	ldr	r3, [pc, #268]	; (800cfd4 <xTaskIncrementTick+0x158>)
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	60fb      	str	r3, [r7, #12]
 800cecc:	4b42      	ldr	r3, [pc, #264]	; (800cfd8 <xTaskIncrementTick+0x15c>)
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	4a40      	ldr	r2, [pc, #256]	; (800cfd4 <xTaskIncrementTick+0x158>)
 800ced2:	6013      	str	r3, [r2, #0]
 800ced4:	4a40      	ldr	r2, [pc, #256]	; (800cfd8 <xTaskIncrementTick+0x15c>)
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	6013      	str	r3, [r2, #0]
 800ceda:	4b40      	ldr	r3, [pc, #256]	; (800cfdc <xTaskIncrementTick+0x160>)
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	3301      	adds	r3, #1
 800cee0:	4a3e      	ldr	r2, [pc, #248]	; (800cfdc <xTaskIncrementTick+0x160>)
 800cee2:	6013      	str	r3, [r2, #0]
 800cee4:	f000 f9a0 	bl	800d228 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800cee8:	4b3d      	ldr	r3, [pc, #244]	; (800cfe0 <xTaskIncrementTick+0x164>)
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	693a      	ldr	r2, [r7, #16]
 800ceee:	429a      	cmp	r2, r3
 800cef0:	d34d      	bcc.n	800cf8e <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cef2:	4b38      	ldr	r3, [pc, #224]	; (800cfd4 <xTaskIncrementTick+0x158>)
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d101      	bne.n	800cf00 <xTaskIncrementTick+0x84>
 800cefc:	2301      	movs	r3, #1
 800cefe:	e000      	b.n	800cf02 <xTaskIncrementTick+0x86>
 800cf00:	2300      	movs	r3, #0
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d004      	beq.n	800cf10 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cf06:	4b36      	ldr	r3, [pc, #216]	; (800cfe0 <xTaskIncrementTick+0x164>)
 800cf08:	f04f 32ff 	mov.w	r2, #4294967295
 800cf0c:	601a      	str	r2, [r3, #0]
					break;
 800cf0e:	e03e      	b.n	800cf8e <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800cf10:	4b30      	ldr	r3, [pc, #192]	; (800cfd4 <xTaskIncrementTick+0x158>)
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	68db      	ldr	r3, [r3, #12]
 800cf16:	68db      	ldr	r3, [r3, #12]
 800cf18:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800cf1a:	68bb      	ldr	r3, [r7, #8]
 800cf1c:	685b      	ldr	r3, [r3, #4]
 800cf1e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800cf20:	693a      	ldr	r2, [r7, #16]
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	429a      	cmp	r2, r3
 800cf26:	d203      	bcs.n	800cf30 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cf28:	4a2d      	ldr	r2, [pc, #180]	; (800cfe0 <xTaskIncrementTick+0x164>)
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	6013      	str	r3, [r2, #0]
						break;
 800cf2e:	e02e      	b.n	800cf8e <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cf30:	68bb      	ldr	r3, [r7, #8]
 800cf32:	3304      	adds	r3, #4
 800cf34:	4618      	mov	r0, r3
 800cf36:	f7ff fd15 	bl	800c964 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cf3a:	68bb      	ldr	r3, [r7, #8]
 800cf3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d004      	beq.n	800cf4c <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cf42:	68bb      	ldr	r3, [r7, #8]
 800cf44:	3318      	adds	r3, #24
 800cf46:	4618      	mov	r0, r3
 800cf48:	f7ff fd0c 	bl	800c964 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cf4c:	68bb      	ldr	r3, [r7, #8]
 800cf4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf50:	2201      	movs	r2, #1
 800cf52:	409a      	lsls	r2, r3
 800cf54:	4b23      	ldr	r3, [pc, #140]	; (800cfe4 <xTaskIncrementTick+0x168>)
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	4313      	orrs	r3, r2
 800cf5a:	4a22      	ldr	r2, [pc, #136]	; (800cfe4 <xTaskIncrementTick+0x168>)
 800cf5c:	6013      	str	r3, [r2, #0]
 800cf5e:	68bb      	ldr	r3, [r7, #8]
 800cf60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf62:	4613      	mov	r3, r2
 800cf64:	009b      	lsls	r3, r3, #2
 800cf66:	4413      	add	r3, r2
 800cf68:	009b      	lsls	r3, r3, #2
 800cf6a:	4a1f      	ldr	r2, [pc, #124]	; (800cfe8 <xTaskIncrementTick+0x16c>)
 800cf6c:	441a      	add	r2, r3
 800cf6e:	68bb      	ldr	r3, [r7, #8]
 800cf70:	3304      	adds	r3, #4
 800cf72:	4619      	mov	r1, r3
 800cf74:	4610      	mov	r0, r2
 800cf76:	f7ff fc98 	bl	800c8aa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cf7a:	68bb      	ldr	r3, [r7, #8]
 800cf7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf7e:	4b1b      	ldr	r3, [pc, #108]	; (800cfec <xTaskIncrementTick+0x170>)
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf84:	429a      	cmp	r2, r3
 800cf86:	d3b4      	bcc.n	800cef2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800cf88:	2301      	movs	r3, #1
 800cf8a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cf8c:	e7b1      	b.n	800cef2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cf8e:	4b17      	ldr	r3, [pc, #92]	; (800cfec <xTaskIncrementTick+0x170>)
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf94:	4914      	ldr	r1, [pc, #80]	; (800cfe8 <xTaskIncrementTick+0x16c>)
 800cf96:	4613      	mov	r3, r2
 800cf98:	009b      	lsls	r3, r3, #2
 800cf9a:	4413      	add	r3, r2
 800cf9c:	009b      	lsls	r3, r3, #2
 800cf9e:	440b      	add	r3, r1
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	2b01      	cmp	r3, #1
 800cfa4:	d907      	bls.n	800cfb6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800cfa6:	2301      	movs	r3, #1
 800cfa8:	617b      	str	r3, [r7, #20]
 800cfaa:	e004      	b.n	800cfb6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800cfac:	4b10      	ldr	r3, [pc, #64]	; (800cff0 <xTaskIncrementTick+0x174>)
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	3301      	adds	r3, #1
 800cfb2:	4a0f      	ldr	r2, [pc, #60]	; (800cff0 <xTaskIncrementTick+0x174>)
 800cfb4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800cfb6:	4b0f      	ldr	r3, [pc, #60]	; (800cff4 <xTaskIncrementTick+0x178>)
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d001      	beq.n	800cfc2 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800cfbe:	2301      	movs	r3, #1
 800cfc0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800cfc2:	697b      	ldr	r3, [r7, #20]
}
 800cfc4:	4618      	mov	r0, r3
 800cfc6:	3718      	adds	r7, #24
 800cfc8:	46bd      	mov	sp, r7
 800cfca:	bd80      	pop	{r7, pc}
 800cfcc:	2000015c 	.word	0x2000015c
 800cfd0:	20000138 	.word	0x20000138
 800cfd4:	200000ec 	.word	0x200000ec
 800cfd8:	200000f0 	.word	0x200000f0
 800cfdc:	2000014c 	.word	0x2000014c
 800cfe0:	20000154 	.word	0x20000154
 800cfe4:	2000013c 	.word	0x2000013c
 800cfe8:	20000038 	.word	0x20000038
 800cfec:	20000034 	.word	0x20000034
 800cff0:	20000144 	.word	0x20000144
 800cff4:	20000148 	.word	0x20000148

0800cff8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800cff8:	b580      	push	{r7, lr}
 800cffa:	b088      	sub	sp, #32
 800cffc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800cffe:	4b3a      	ldr	r3, [pc, #232]	; (800d0e8 <vTaskSwitchContext+0xf0>)
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	2b00      	cmp	r3, #0
 800d004:	d003      	beq.n	800d00e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d006:	4b39      	ldr	r3, [pc, #228]	; (800d0ec <vTaskSwitchContext+0xf4>)
 800d008:	2201      	movs	r2, #1
 800d00a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d00c:	e067      	b.n	800d0de <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
 800d00e:	4b37      	ldr	r3, [pc, #220]	; (800d0ec <vTaskSwitchContext+0xf4>)
 800d010:	2200      	movs	r2, #0
 800d012:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800d014:	4b36      	ldr	r3, [pc, #216]	; (800d0f0 <vTaskSwitchContext+0xf8>)
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d01a:	61fb      	str	r3, [r7, #28]
 800d01c:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800d020:	61bb      	str	r3, [r7, #24]
 800d022:	69fb      	ldr	r3, [r7, #28]
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	69ba      	ldr	r2, [r7, #24]
 800d028:	429a      	cmp	r2, r3
 800d02a:	d111      	bne.n	800d050 <vTaskSwitchContext+0x58>
 800d02c:	69fb      	ldr	r3, [r7, #28]
 800d02e:	3304      	adds	r3, #4
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	69ba      	ldr	r2, [r7, #24]
 800d034:	429a      	cmp	r2, r3
 800d036:	d10b      	bne.n	800d050 <vTaskSwitchContext+0x58>
 800d038:	69fb      	ldr	r3, [r7, #28]
 800d03a:	3308      	adds	r3, #8
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	69ba      	ldr	r2, [r7, #24]
 800d040:	429a      	cmp	r2, r3
 800d042:	d105      	bne.n	800d050 <vTaskSwitchContext+0x58>
 800d044:	69fb      	ldr	r3, [r7, #28]
 800d046:	330c      	adds	r3, #12
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	69ba      	ldr	r2, [r7, #24]
 800d04c:	429a      	cmp	r2, r3
 800d04e:	d008      	beq.n	800d062 <vTaskSwitchContext+0x6a>
 800d050:	4b27      	ldr	r3, [pc, #156]	; (800d0f0 <vTaskSwitchContext+0xf8>)
 800d052:	681a      	ldr	r2, [r3, #0]
 800d054:	4b26      	ldr	r3, [pc, #152]	; (800d0f0 <vTaskSwitchContext+0xf8>)
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	3334      	adds	r3, #52	; 0x34
 800d05a:	4619      	mov	r1, r3
 800d05c:	4610      	mov	r0, r2
 800d05e:	f7f3 fa76 	bl	800054e <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800d062:	4b24      	ldr	r3, [pc, #144]	; (800d0f4 <vTaskSwitchContext+0xfc>)
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	fab3 f383 	clz	r3, r3
 800d06e:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800d070:	7afb      	ldrb	r3, [r7, #11]
 800d072:	f1c3 031f 	rsb	r3, r3, #31
 800d076:	617b      	str	r3, [r7, #20]
 800d078:	491f      	ldr	r1, [pc, #124]	; (800d0f8 <vTaskSwitchContext+0x100>)
 800d07a:	697a      	ldr	r2, [r7, #20]
 800d07c:	4613      	mov	r3, r2
 800d07e:	009b      	lsls	r3, r3, #2
 800d080:	4413      	add	r3, r2
 800d082:	009b      	lsls	r3, r3, #2
 800d084:	440b      	add	r3, r1
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d10b      	bne.n	800d0a4 <vTaskSwitchContext+0xac>
	__asm volatile
 800d08c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d090:	b672      	cpsid	i
 800d092:	f383 8811 	msr	BASEPRI, r3
 800d096:	f3bf 8f6f 	isb	sy
 800d09a:	f3bf 8f4f 	dsb	sy
 800d09e:	b662      	cpsie	i
 800d0a0:	607b      	str	r3, [r7, #4]
 800d0a2:	e7fe      	b.n	800d0a2 <vTaskSwitchContext+0xaa>
 800d0a4:	697a      	ldr	r2, [r7, #20]
 800d0a6:	4613      	mov	r3, r2
 800d0a8:	009b      	lsls	r3, r3, #2
 800d0aa:	4413      	add	r3, r2
 800d0ac:	009b      	lsls	r3, r3, #2
 800d0ae:	4a12      	ldr	r2, [pc, #72]	; (800d0f8 <vTaskSwitchContext+0x100>)
 800d0b0:	4413      	add	r3, r2
 800d0b2:	613b      	str	r3, [r7, #16]
 800d0b4:	693b      	ldr	r3, [r7, #16]
 800d0b6:	685b      	ldr	r3, [r3, #4]
 800d0b8:	685a      	ldr	r2, [r3, #4]
 800d0ba:	693b      	ldr	r3, [r7, #16]
 800d0bc:	605a      	str	r2, [r3, #4]
 800d0be:	693b      	ldr	r3, [r7, #16]
 800d0c0:	685a      	ldr	r2, [r3, #4]
 800d0c2:	693b      	ldr	r3, [r7, #16]
 800d0c4:	3308      	adds	r3, #8
 800d0c6:	429a      	cmp	r2, r3
 800d0c8:	d104      	bne.n	800d0d4 <vTaskSwitchContext+0xdc>
 800d0ca:	693b      	ldr	r3, [r7, #16]
 800d0cc:	685b      	ldr	r3, [r3, #4]
 800d0ce:	685a      	ldr	r2, [r3, #4]
 800d0d0:	693b      	ldr	r3, [r7, #16]
 800d0d2:	605a      	str	r2, [r3, #4]
 800d0d4:	693b      	ldr	r3, [r7, #16]
 800d0d6:	685b      	ldr	r3, [r3, #4]
 800d0d8:	68db      	ldr	r3, [r3, #12]
 800d0da:	4a05      	ldr	r2, [pc, #20]	; (800d0f0 <vTaskSwitchContext+0xf8>)
 800d0dc:	6013      	str	r3, [r2, #0]
}
 800d0de:	bf00      	nop
 800d0e0:	3720      	adds	r7, #32
 800d0e2:	46bd      	mov	sp, r7
 800d0e4:	bd80      	pop	{r7, pc}
 800d0e6:	bf00      	nop
 800d0e8:	2000015c 	.word	0x2000015c
 800d0ec:	20000148 	.word	0x20000148
 800d0f0:	20000034 	.word	0x20000034
 800d0f4:	2000013c 	.word	0x2000013c
 800d0f8:	20000038 	.word	0x20000038

0800d0fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d0fc:	b580      	push	{r7, lr}
 800d0fe:	b082      	sub	sp, #8
 800d100:	af00      	add	r7, sp, #0
 800d102:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d104:	f000 f854 	bl	800d1b0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d108:	4b07      	ldr	r3, [pc, #28]	; (800d128 <prvIdleTask+0x2c>)
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	2b01      	cmp	r3, #1
 800d10e:	d907      	bls.n	800d120 <prvIdleTask+0x24>
			{
				taskYIELD();
 800d110:	4b06      	ldr	r3, [pc, #24]	; (800d12c <prvIdleTask+0x30>)
 800d112:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d116:	601a      	str	r2, [r3, #0]
 800d118:	f3bf 8f4f 	dsb	sy
 800d11c:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800d120:	f7f3 fa0e 	bl	8000540 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800d124:	e7ee      	b.n	800d104 <prvIdleTask+0x8>
 800d126:	bf00      	nop
 800d128:	20000038 	.word	0x20000038
 800d12c:	e000ed04 	.word	0xe000ed04

0800d130 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d130:	b580      	push	{r7, lr}
 800d132:	b082      	sub	sp, #8
 800d134:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d136:	2300      	movs	r3, #0
 800d138:	607b      	str	r3, [r7, #4]
 800d13a:	e00c      	b.n	800d156 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d13c:	687a      	ldr	r2, [r7, #4]
 800d13e:	4613      	mov	r3, r2
 800d140:	009b      	lsls	r3, r3, #2
 800d142:	4413      	add	r3, r2
 800d144:	009b      	lsls	r3, r3, #2
 800d146:	4a12      	ldr	r2, [pc, #72]	; (800d190 <prvInitialiseTaskLists+0x60>)
 800d148:	4413      	add	r3, r2
 800d14a:	4618      	mov	r0, r3
 800d14c:	f7ff fb80 	bl	800c850 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	3301      	adds	r3, #1
 800d154:	607b      	str	r3, [r7, #4]
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	2b06      	cmp	r3, #6
 800d15a:	d9ef      	bls.n	800d13c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d15c:	480d      	ldr	r0, [pc, #52]	; (800d194 <prvInitialiseTaskLists+0x64>)
 800d15e:	f7ff fb77 	bl	800c850 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d162:	480d      	ldr	r0, [pc, #52]	; (800d198 <prvInitialiseTaskLists+0x68>)
 800d164:	f7ff fb74 	bl	800c850 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d168:	480c      	ldr	r0, [pc, #48]	; (800d19c <prvInitialiseTaskLists+0x6c>)
 800d16a:	f7ff fb71 	bl	800c850 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d16e:	480c      	ldr	r0, [pc, #48]	; (800d1a0 <prvInitialiseTaskLists+0x70>)
 800d170:	f7ff fb6e 	bl	800c850 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d174:	480b      	ldr	r0, [pc, #44]	; (800d1a4 <prvInitialiseTaskLists+0x74>)
 800d176:	f7ff fb6b 	bl	800c850 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d17a:	4b0b      	ldr	r3, [pc, #44]	; (800d1a8 <prvInitialiseTaskLists+0x78>)
 800d17c:	4a05      	ldr	r2, [pc, #20]	; (800d194 <prvInitialiseTaskLists+0x64>)
 800d17e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d180:	4b0a      	ldr	r3, [pc, #40]	; (800d1ac <prvInitialiseTaskLists+0x7c>)
 800d182:	4a05      	ldr	r2, [pc, #20]	; (800d198 <prvInitialiseTaskLists+0x68>)
 800d184:	601a      	str	r2, [r3, #0]
}
 800d186:	bf00      	nop
 800d188:	3708      	adds	r7, #8
 800d18a:	46bd      	mov	sp, r7
 800d18c:	bd80      	pop	{r7, pc}
 800d18e:	bf00      	nop
 800d190:	20000038 	.word	0x20000038
 800d194:	200000c4 	.word	0x200000c4
 800d198:	200000d8 	.word	0x200000d8
 800d19c:	200000f4 	.word	0x200000f4
 800d1a0:	20000108 	.word	0x20000108
 800d1a4:	20000120 	.word	0x20000120
 800d1a8:	200000ec 	.word	0x200000ec
 800d1ac:	200000f0 	.word	0x200000f0

0800d1b0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d1b0:	b580      	push	{r7, lr}
 800d1b2:	b082      	sub	sp, #8
 800d1b4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d1b6:	e019      	b.n	800d1ec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d1b8:	f000 f9ce 	bl	800d558 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800d1bc:	4b0f      	ldr	r3, [pc, #60]	; (800d1fc <prvCheckTasksWaitingTermination+0x4c>)
 800d1be:	68db      	ldr	r3, [r3, #12]
 800d1c0:	68db      	ldr	r3, [r3, #12]
 800d1c2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	3304      	adds	r3, #4
 800d1c8:	4618      	mov	r0, r3
 800d1ca:	f7ff fbcb 	bl	800c964 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d1ce:	4b0c      	ldr	r3, [pc, #48]	; (800d200 <prvCheckTasksWaitingTermination+0x50>)
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	3b01      	subs	r3, #1
 800d1d4:	4a0a      	ldr	r2, [pc, #40]	; (800d200 <prvCheckTasksWaitingTermination+0x50>)
 800d1d6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d1d8:	4b0a      	ldr	r3, [pc, #40]	; (800d204 <prvCheckTasksWaitingTermination+0x54>)
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	3b01      	subs	r3, #1
 800d1de:	4a09      	ldr	r2, [pc, #36]	; (800d204 <prvCheckTasksWaitingTermination+0x54>)
 800d1e0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d1e2:	f000 f9eb 	bl	800d5bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d1e6:	6878      	ldr	r0, [r7, #4]
 800d1e8:	f000 f80e 	bl	800d208 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d1ec:	4b05      	ldr	r3, [pc, #20]	; (800d204 <prvCheckTasksWaitingTermination+0x54>)
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d1e1      	bne.n	800d1b8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d1f4:	bf00      	nop
 800d1f6:	3708      	adds	r7, #8
 800d1f8:	46bd      	mov	sp, r7
 800d1fa:	bd80      	pop	{r7, pc}
 800d1fc:	20000108 	.word	0x20000108
 800d200:	20000134 	.word	0x20000134
 800d204:	2000011c 	.word	0x2000011c

0800d208 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d208:	b580      	push	{r7, lr}
 800d20a:	b082      	sub	sp, #8
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d214:	4618      	mov	r0, r3
 800d216:	f000 fb4b 	bl	800d8b0 <vPortFree>
			vPortFree( pxTCB );
 800d21a:	6878      	ldr	r0, [r7, #4]
 800d21c:	f000 fb48 	bl	800d8b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d220:	bf00      	nop
 800d222:	3708      	adds	r7, #8
 800d224:	46bd      	mov	sp, r7
 800d226:	bd80      	pop	{r7, pc}

0800d228 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d228:	b480      	push	{r7}
 800d22a:	b083      	sub	sp, #12
 800d22c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d22e:	4b0f      	ldr	r3, [pc, #60]	; (800d26c <prvResetNextTaskUnblockTime+0x44>)
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	2b00      	cmp	r3, #0
 800d236:	d101      	bne.n	800d23c <prvResetNextTaskUnblockTime+0x14>
 800d238:	2301      	movs	r3, #1
 800d23a:	e000      	b.n	800d23e <prvResetNextTaskUnblockTime+0x16>
 800d23c:	2300      	movs	r3, #0
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d004      	beq.n	800d24c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d242:	4b0b      	ldr	r3, [pc, #44]	; (800d270 <prvResetNextTaskUnblockTime+0x48>)
 800d244:	f04f 32ff 	mov.w	r2, #4294967295
 800d248:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d24a:	e008      	b.n	800d25e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800d24c:	4b07      	ldr	r3, [pc, #28]	; (800d26c <prvResetNextTaskUnblockTime+0x44>)
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	68db      	ldr	r3, [r3, #12]
 800d252:	68db      	ldr	r3, [r3, #12]
 800d254:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	685b      	ldr	r3, [r3, #4]
 800d25a:	4a05      	ldr	r2, [pc, #20]	; (800d270 <prvResetNextTaskUnblockTime+0x48>)
 800d25c:	6013      	str	r3, [r2, #0]
}
 800d25e:	bf00      	nop
 800d260:	370c      	adds	r7, #12
 800d262:	46bd      	mov	sp, r7
 800d264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d268:	4770      	bx	lr
 800d26a:	bf00      	nop
 800d26c:	200000ec 	.word	0x200000ec
 800d270:	20000154 	.word	0x20000154

0800d274 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d274:	b580      	push	{r7, lr}
 800d276:	b084      	sub	sp, #16
 800d278:	af00      	add	r7, sp, #0
 800d27a:	6078      	str	r0, [r7, #4]
 800d27c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d27e:	4b29      	ldr	r3, [pc, #164]	; (800d324 <prvAddCurrentTaskToDelayedList+0xb0>)
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d284:	4b28      	ldr	r3, [pc, #160]	; (800d328 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	3304      	adds	r3, #4
 800d28a:	4618      	mov	r0, r3
 800d28c:	f7ff fb6a 	bl	800c964 <uxListRemove>
 800d290:	4603      	mov	r3, r0
 800d292:	2b00      	cmp	r3, #0
 800d294:	d10b      	bne.n	800d2ae <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800d296:	4b24      	ldr	r3, [pc, #144]	; (800d328 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d29c:	2201      	movs	r2, #1
 800d29e:	fa02 f303 	lsl.w	r3, r2, r3
 800d2a2:	43da      	mvns	r2, r3
 800d2a4:	4b21      	ldr	r3, [pc, #132]	; (800d32c <prvAddCurrentTaskToDelayedList+0xb8>)
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	4013      	ands	r3, r2
 800d2aa:	4a20      	ldr	r2, [pc, #128]	; (800d32c <prvAddCurrentTaskToDelayedList+0xb8>)
 800d2ac:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2b4:	d10a      	bne.n	800d2cc <prvAddCurrentTaskToDelayedList+0x58>
 800d2b6:	683b      	ldr	r3, [r7, #0]
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d007      	beq.n	800d2cc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d2bc:	4b1a      	ldr	r3, [pc, #104]	; (800d328 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	3304      	adds	r3, #4
 800d2c2:	4619      	mov	r1, r3
 800d2c4:	481a      	ldr	r0, [pc, #104]	; (800d330 <prvAddCurrentTaskToDelayedList+0xbc>)
 800d2c6:	f7ff faf0 	bl	800c8aa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d2ca:	e026      	b.n	800d31a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d2cc:	68fa      	ldr	r2, [r7, #12]
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	4413      	add	r3, r2
 800d2d2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d2d4:	4b14      	ldr	r3, [pc, #80]	; (800d328 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	68ba      	ldr	r2, [r7, #8]
 800d2da:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d2dc:	68ba      	ldr	r2, [r7, #8]
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	429a      	cmp	r2, r3
 800d2e2:	d209      	bcs.n	800d2f8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d2e4:	4b13      	ldr	r3, [pc, #76]	; (800d334 <prvAddCurrentTaskToDelayedList+0xc0>)
 800d2e6:	681a      	ldr	r2, [r3, #0]
 800d2e8:	4b0f      	ldr	r3, [pc, #60]	; (800d328 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	3304      	adds	r3, #4
 800d2ee:	4619      	mov	r1, r3
 800d2f0:	4610      	mov	r0, r2
 800d2f2:	f7ff fafe 	bl	800c8f2 <vListInsert>
}
 800d2f6:	e010      	b.n	800d31a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d2f8:	4b0f      	ldr	r3, [pc, #60]	; (800d338 <prvAddCurrentTaskToDelayedList+0xc4>)
 800d2fa:	681a      	ldr	r2, [r3, #0]
 800d2fc:	4b0a      	ldr	r3, [pc, #40]	; (800d328 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	3304      	adds	r3, #4
 800d302:	4619      	mov	r1, r3
 800d304:	4610      	mov	r0, r2
 800d306:	f7ff faf4 	bl	800c8f2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d30a:	4b0c      	ldr	r3, [pc, #48]	; (800d33c <prvAddCurrentTaskToDelayedList+0xc8>)
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	68ba      	ldr	r2, [r7, #8]
 800d310:	429a      	cmp	r2, r3
 800d312:	d202      	bcs.n	800d31a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800d314:	4a09      	ldr	r2, [pc, #36]	; (800d33c <prvAddCurrentTaskToDelayedList+0xc8>)
 800d316:	68bb      	ldr	r3, [r7, #8]
 800d318:	6013      	str	r3, [r2, #0]
}
 800d31a:	bf00      	nop
 800d31c:	3710      	adds	r7, #16
 800d31e:	46bd      	mov	sp, r7
 800d320:	bd80      	pop	{r7, pc}
 800d322:	bf00      	nop
 800d324:	20000138 	.word	0x20000138
 800d328:	20000034 	.word	0x20000034
 800d32c:	2000013c 	.word	0x2000013c
 800d330:	20000120 	.word	0x20000120
 800d334:	200000f0 	.word	0x200000f0
 800d338:	200000ec 	.word	0x200000ec
 800d33c:	20000154 	.word	0x20000154

0800d340 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d340:	b480      	push	{r7}
 800d342:	b085      	sub	sp, #20
 800d344:	af00      	add	r7, sp, #0
 800d346:	60f8      	str	r0, [r7, #12]
 800d348:	60b9      	str	r1, [r7, #8]
 800d34a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	3b04      	subs	r3, #4
 800d350:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d358:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	3b04      	subs	r3, #4
 800d35e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d360:	68bb      	ldr	r3, [r7, #8]
 800d362:	f023 0201 	bic.w	r2, r3, #1
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	3b04      	subs	r3, #4
 800d36e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d370:	4a0c      	ldr	r2, [pc, #48]	; (800d3a4 <pxPortInitialiseStack+0x64>)
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	3b14      	subs	r3, #20
 800d37a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d37c:	687a      	ldr	r2, [r7, #4]
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	3b04      	subs	r3, #4
 800d386:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	f06f 0202 	mvn.w	r2, #2
 800d38e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	3b20      	subs	r3, #32
 800d394:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d396:	68fb      	ldr	r3, [r7, #12]
}
 800d398:	4618      	mov	r0, r3
 800d39a:	3714      	adds	r7, #20
 800d39c:	46bd      	mov	sp, r7
 800d39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a2:	4770      	bx	lr
 800d3a4:	0800d3a9 	.word	0x0800d3a9

0800d3a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d3a8:	b480      	push	{r7}
 800d3aa:	b085      	sub	sp, #20
 800d3ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d3ae:	2300      	movs	r3, #0
 800d3b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d3b2:	4b13      	ldr	r3, [pc, #76]	; (800d400 <prvTaskExitError+0x58>)
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3ba:	d00b      	beq.n	800d3d4 <prvTaskExitError+0x2c>
 800d3bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3c0:	b672      	cpsid	i
 800d3c2:	f383 8811 	msr	BASEPRI, r3
 800d3c6:	f3bf 8f6f 	isb	sy
 800d3ca:	f3bf 8f4f 	dsb	sy
 800d3ce:	b662      	cpsie	i
 800d3d0:	60fb      	str	r3, [r7, #12]
 800d3d2:	e7fe      	b.n	800d3d2 <prvTaskExitError+0x2a>
 800d3d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3d8:	b672      	cpsid	i
 800d3da:	f383 8811 	msr	BASEPRI, r3
 800d3de:	f3bf 8f6f 	isb	sy
 800d3e2:	f3bf 8f4f 	dsb	sy
 800d3e6:	b662      	cpsie	i
 800d3e8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d3ea:	bf00      	nop
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d0fc      	beq.n	800d3ec <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d3f2:	bf00      	nop
 800d3f4:	3714      	adds	r7, #20
 800d3f6:	46bd      	mov	sp, r7
 800d3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3fc:	4770      	bx	lr
 800d3fe:	bf00      	nop
 800d400:	20000008 	.word	0x20000008
	...

0800d410 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d410:	4b07      	ldr	r3, [pc, #28]	; (800d430 <pxCurrentTCBConst2>)
 800d412:	6819      	ldr	r1, [r3, #0]
 800d414:	6808      	ldr	r0, [r1, #0]
 800d416:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d41a:	f380 8809 	msr	PSP, r0
 800d41e:	f3bf 8f6f 	isb	sy
 800d422:	f04f 0000 	mov.w	r0, #0
 800d426:	f380 8811 	msr	BASEPRI, r0
 800d42a:	4770      	bx	lr
 800d42c:	f3af 8000 	nop.w

0800d430 <pxCurrentTCBConst2>:
 800d430:	20000034 	.word	0x20000034
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d434:	bf00      	nop
 800d436:	bf00      	nop

0800d438 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d438:	4808      	ldr	r0, [pc, #32]	; (800d45c <prvPortStartFirstTask+0x24>)
 800d43a:	6800      	ldr	r0, [r0, #0]
 800d43c:	6800      	ldr	r0, [r0, #0]
 800d43e:	f380 8808 	msr	MSP, r0
 800d442:	f04f 0000 	mov.w	r0, #0
 800d446:	f380 8814 	msr	CONTROL, r0
 800d44a:	b662      	cpsie	i
 800d44c:	b661      	cpsie	f
 800d44e:	f3bf 8f4f 	dsb	sy
 800d452:	f3bf 8f6f 	isb	sy
 800d456:	df00      	svc	0
 800d458:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d45a:	bf00      	nop
 800d45c:	e000ed08 	.word	0xe000ed08

0800d460 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d460:	b580      	push	{r7, lr}
 800d462:	b084      	sub	sp, #16
 800d464:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d466:	4b36      	ldr	r3, [pc, #216]	; (800d540 <xPortStartScheduler+0xe0>)
 800d468:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	781b      	ldrb	r3, [r3, #0]
 800d46e:	b2db      	uxtb	r3, r3
 800d470:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	22ff      	movs	r2, #255	; 0xff
 800d476:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	781b      	ldrb	r3, [r3, #0]
 800d47c:	b2db      	uxtb	r3, r3
 800d47e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d480:	78fb      	ldrb	r3, [r7, #3]
 800d482:	b2db      	uxtb	r3, r3
 800d484:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d488:	b2da      	uxtb	r2, r3
 800d48a:	4b2e      	ldr	r3, [pc, #184]	; (800d544 <xPortStartScheduler+0xe4>)
 800d48c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d48e:	4b2e      	ldr	r3, [pc, #184]	; (800d548 <xPortStartScheduler+0xe8>)
 800d490:	2207      	movs	r2, #7
 800d492:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d494:	e009      	b.n	800d4aa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800d496:	4b2c      	ldr	r3, [pc, #176]	; (800d548 <xPortStartScheduler+0xe8>)
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	3b01      	subs	r3, #1
 800d49c:	4a2a      	ldr	r2, [pc, #168]	; (800d548 <xPortStartScheduler+0xe8>)
 800d49e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d4a0:	78fb      	ldrb	r3, [r7, #3]
 800d4a2:	b2db      	uxtb	r3, r3
 800d4a4:	005b      	lsls	r3, r3, #1
 800d4a6:	b2db      	uxtb	r3, r3
 800d4a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d4aa:	78fb      	ldrb	r3, [r7, #3]
 800d4ac:	b2db      	uxtb	r3, r3
 800d4ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d4b2:	2b80      	cmp	r3, #128	; 0x80
 800d4b4:	d0ef      	beq.n	800d496 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d4b6:	4b24      	ldr	r3, [pc, #144]	; (800d548 <xPortStartScheduler+0xe8>)
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	f1c3 0307 	rsb	r3, r3, #7
 800d4be:	2b04      	cmp	r3, #4
 800d4c0:	d00b      	beq.n	800d4da <xPortStartScheduler+0x7a>
 800d4c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4c6:	b672      	cpsid	i
 800d4c8:	f383 8811 	msr	BASEPRI, r3
 800d4cc:	f3bf 8f6f 	isb	sy
 800d4d0:	f3bf 8f4f 	dsb	sy
 800d4d4:	b662      	cpsie	i
 800d4d6:	60bb      	str	r3, [r7, #8]
 800d4d8:	e7fe      	b.n	800d4d8 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d4da:	4b1b      	ldr	r3, [pc, #108]	; (800d548 <xPortStartScheduler+0xe8>)
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	021b      	lsls	r3, r3, #8
 800d4e0:	4a19      	ldr	r2, [pc, #100]	; (800d548 <xPortStartScheduler+0xe8>)
 800d4e2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d4e4:	4b18      	ldr	r3, [pc, #96]	; (800d548 <xPortStartScheduler+0xe8>)
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d4ec:	4a16      	ldr	r2, [pc, #88]	; (800d548 <xPortStartScheduler+0xe8>)
 800d4ee:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	b2da      	uxtb	r2, r3
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d4f8:	4b14      	ldr	r3, [pc, #80]	; (800d54c <xPortStartScheduler+0xec>)
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	4a13      	ldr	r2, [pc, #76]	; (800d54c <xPortStartScheduler+0xec>)
 800d4fe:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d502:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d504:	4b11      	ldr	r3, [pc, #68]	; (800d54c <xPortStartScheduler+0xec>)
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	4a10      	ldr	r2, [pc, #64]	; (800d54c <xPortStartScheduler+0xec>)
 800d50a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d50e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d510:	f000 f8d4 	bl	800d6bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d514:	4b0e      	ldr	r3, [pc, #56]	; (800d550 <xPortStartScheduler+0xf0>)
 800d516:	2200      	movs	r2, #0
 800d518:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d51a:	f000 f8f3 	bl	800d704 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d51e:	4b0d      	ldr	r3, [pc, #52]	; (800d554 <xPortStartScheduler+0xf4>)
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	4a0c      	ldr	r2, [pc, #48]	; (800d554 <xPortStartScheduler+0xf4>)
 800d524:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d528:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d52a:	f7ff ff85 	bl	800d438 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d52e:	f7ff fd63 	bl	800cff8 <vTaskSwitchContext>
	prvTaskExitError();
 800d532:	f7ff ff39 	bl	800d3a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d536:	2300      	movs	r3, #0
}
 800d538:	4618      	mov	r0, r3
 800d53a:	3710      	adds	r7, #16
 800d53c:	46bd      	mov	sp, r7
 800d53e:	bd80      	pop	{r7, pc}
 800d540:	e000e400 	.word	0xe000e400
 800d544:	20000160 	.word	0x20000160
 800d548:	20000164 	.word	0x20000164
 800d54c:	e000ed20 	.word	0xe000ed20
 800d550:	20000008 	.word	0x20000008
 800d554:	e000ef34 	.word	0xe000ef34

0800d558 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d558:	b480      	push	{r7}
 800d55a:	b083      	sub	sp, #12
 800d55c:	af00      	add	r7, sp, #0
 800d55e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d562:	b672      	cpsid	i
 800d564:	f383 8811 	msr	BASEPRI, r3
 800d568:	f3bf 8f6f 	isb	sy
 800d56c:	f3bf 8f4f 	dsb	sy
 800d570:	b662      	cpsie	i
 800d572:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d574:	4b0f      	ldr	r3, [pc, #60]	; (800d5b4 <vPortEnterCritical+0x5c>)
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	3301      	adds	r3, #1
 800d57a:	4a0e      	ldr	r2, [pc, #56]	; (800d5b4 <vPortEnterCritical+0x5c>)
 800d57c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d57e:	4b0d      	ldr	r3, [pc, #52]	; (800d5b4 <vPortEnterCritical+0x5c>)
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	2b01      	cmp	r3, #1
 800d584:	d110      	bne.n	800d5a8 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d586:	4b0c      	ldr	r3, [pc, #48]	; (800d5b8 <vPortEnterCritical+0x60>)
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	b2db      	uxtb	r3, r3
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d00b      	beq.n	800d5a8 <vPortEnterCritical+0x50>
 800d590:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d594:	b672      	cpsid	i
 800d596:	f383 8811 	msr	BASEPRI, r3
 800d59a:	f3bf 8f6f 	isb	sy
 800d59e:	f3bf 8f4f 	dsb	sy
 800d5a2:	b662      	cpsie	i
 800d5a4:	603b      	str	r3, [r7, #0]
 800d5a6:	e7fe      	b.n	800d5a6 <vPortEnterCritical+0x4e>
	}
}
 800d5a8:	bf00      	nop
 800d5aa:	370c      	adds	r7, #12
 800d5ac:	46bd      	mov	sp, r7
 800d5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b2:	4770      	bx	lr
 800d5b4:	20000008 	.word	0x20000008
 800d5b8:	e000ed04 	.word	0xe000ed04

0800d5bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d5bc:	b480      	push	{r7}
 800d5be:	b083      	sub	sp, #12
 800d5c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d5c2:	4b12      	ldr	r3, [pc, #72]	; (800d60c <vPortExitCritical+0x50>)
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d10b      	bne.n	800d5e2 <vPortExitCritical+0x26>
 800d5ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5ce:	b672      	cpsid	i
 800d5d0:	f383 8811 	msr	BASEPRI, r3
 800d5d4:	f3bf 8f6f 	isb	sy
 800d5d8:	f3bf 8f4f 	dsb	sy
 800d5dc:	b662      	cpsie	i
 800d5de:	607b      	str	r3, [r7, #4]
 800d5e0:	e7fe      	b.n	800d5e0 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 800d5e2:	4b0a      	ldr	r3, [pc, #40]	; (800d60c <vPortExitCritical+0x50>)
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	3b01      	subs	r3, #1
 800d5e8:	4a08      	ldr	r2, [pc, #32]	; (800d60c <vPortExitCritical+0x50>)
 800d5ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d5ec:	4b07      	ldr	r3, [pc, #28]	; (800d60c <vPortExitCritical+0x50>)
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d104      	bne.n	800d5fe <vPortExitCritical+0x42>
 800d5f4:	2300      	movs	r3, #0
 800d5f6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d5f8:	683b      	ldr	r3, [r7, #0]
 800d5fa:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800d5fe:	bf00      	nop
 800d600:	370c      	adds	r7, #12
 800d602:	46bd      	mov	sp, r7
 800d604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d608:	4770      	bx	lr
 800d60a:	bf00      	nop
 800d60c:	20000008 	.word	0x20000008

0800d610 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d610:	f3ef 8009 	mrs	r0, PSP
 800d614:	f3bf 8f6f 	isb	sy
 800d618:	4b15      	ldr	r3, [pc, #84]	; (800d670 <pxCurrentTCBConst>)
 800d61a:	681a      	ldr	r2, [r3, #0]
 800d61c:	f01e 0f10 	tst.w	lr, #16
 800d620:	bf08      	it	eq
 800d622:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d626:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d62a:	6010      	str	r0, [r2, #0]
 800d62c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d630:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d634:	b672      	cpsid	i
 800d636:	f380 8811 	msr	BASEPRI, r0
 800d63a:	f3bf 8f4f 	dsb	sy
 800d63e:	f3bf 8f6f 	isb	sy
 800d642:	b662      	cpsie	i
 800d644:	f7ff fcd8 	bl	800cff8 <vTaskSwitchContext>
 800d648:	f04f 0000 	mov.w	r0, #0
 800d64c:	f380 8811 	msr	BASEPRI, r0
 800d650:	bc09      	pop	{r0, r3}
 800d652:	6819      	ldr	r1, [r3, #0]
 800d654:	6808      	ldr	r0, [r1, #0]
 800d656:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d65a:	f01e 0f10 	tst.w	lr, #16
 800d65e:	bf08      	it	eq
 800d660:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d664:	f380 8809 	msr	PSP, r0
 800d668:	f3bf 8f6f 	isb	sy
 800d66c:	4770      	bx	lr
 800d66e:	bf00      	nop

0800d670 <pxCurrentTCBConst>:
 800d670:	20000034 	.word	0x20000034
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d674:	bf00      	nop
 800d676:	bf00      	nop

0800d678 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d678:	b580      	push	{r7, lr}
 800d67a:	b082      	sub	sp, #8
 800d67c:	af00      	add	r7, sp, #0
	__asm volatile
 800d67e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d682:	b672      	cpsid	i
 800d684:	f383 8811 	msr	BASEPRI, r3
 800d688:	f3bf 8f6f 	isb	sy
 800d68c:	f3bf 8f4f 	dsb	sy
 800d690:	b662      	cpsie	i
 800d692:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d694:	f7ff fbf2 	bl	800ce7c <xTaskIncrementTick>
 800d698:	4603      	mov	r3, r0
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d003      	beq.n	800d6a6 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d69e:	4b06      	ldr	r3, [pc, #24]	; (800d6b8 <SysTick_Handler+0x40>)
 800d6a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d6a4:	601a      	str	r2, [r3, #0]
 800d6a6:	2300      	movs	r3, #0
 800d6a8:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d6aa:	683b      	ldr	r3, [r7, #0]
 800d6ac:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800d6b0:	bf00      	nop
 800d6b2:	3708      	adds	r7, #8
 800d6b4:	46bd      	mov	sp, r7
 800d6b6:	bd80      	pop	{r7, pc}
 800d6b8:	e000ed04 	.word	0xe000ed04

0800d6bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d6bc:	b480      	push	{r7}
 800d6be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d6c0:	4b0b      	ldr	r3, [pc, #44]	; (800d6f0 <vPortSetupTimerInterrupt+0x34>)
 800d6c2:	2200      	movs	r2, #0
 800d6c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d6c6:	4b0b      	ldr	r3, [pc, #44]	; (800d6f4 <vPortSetupTimerInterrupt+0x38>)
 800d6c8:	2200      	movs	r2, #0
 800d6ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d6cc:	4b0a      	ldr	r3, [pc, #40]	; (800d6f8 <vPortSetupTimerInterrupt+0x3c>)
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	4a0a      	ldr	r2, [pc, #40]	; (800d6fc <vPortSetupTimerInterrupt+0x40>)
 800d6d2:	fba2 2303 	umull	r2, r3, r2, r3
 800d6d6:	099b      	lsrs	r3, r3, #6
 800d6d8:	4a09      	ldr	r2, [pc, #36]	; (800d700 <vPortSetupTimerInterrupt+0x44>)
 800d6da:	3b01      	subs	r3, #1
 800d6dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d6de:	4b04      	ldr	r3, [pc, #16]	; (800d6f0 <vPortSetupTimerInterrupt+0x34>)
 800d6e0:	2207      	movs	r2, #7
 800d6e2:	601a      	str	r2, [r3, #0]
}
 800d6e4:	bf00      	nop
 800d6e6:	46bd      	mov	sp, r7
 800d6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ec:	4770      	bx	lr
 800d6ee:	bf00      	nop
 800d6f0:	e000e010 	.word	0xe000e010
 800d6f4:	e000e018 	.word	0xe000e018
 800d6f8:	20000000 	.word	0x20000000
 800d6fc:	10624dd3 	.word	0x10624dd3
 800d700:	e000e014 	.word	0xe000e014

0800d704 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d704:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d714 <vPortEnableVFP+0x10>
 800d708:	6801      	ldr	r1, [r0, #0]
 800d70a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d70e:	6001      	str	r1, [r0, #0]
 800d710:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d712:	bf00      	nop
 800d714:	e000ed88 	.word	0xe000ed88

0800d718 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d718:	b580      	push	{r7, lr}
 800d71a:	b08a      	sub	sp, #40	; 0x28
 800d71c:	af00      	add	r7, sp, #0
 800d71e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d720:	2300      	movs	r3, #0
 800d722:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d724:	f7ff fafe 	bl	800cd24 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d728:	4b5c      	ldr	r3, [pc, #368]	; (800d89c <pvPortMalloc+0x184>)
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d101      	bne.n	800d734 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d730:	f000 f91a 	bl	800d968 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d734:	4b5a      	ldr	r3, [pc, #360]	; (800d8a0 <pvPortMalloc+0x188>)
 800d736:	681a      	ldr	r2, [r3, #0]
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	4013      	ands	r3, r2
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	f040 8090 	bne.w	800d862 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	2b00      	cmp	r3, #0
 800d746:	d01e      	beq.n	800d786 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800d748:	2208      	movs	r2, #8
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	4413      	add	r3, r2
 800d74e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	f003 0307 	and.w	r3, r3, #7
 800d756:	2b00      	cmp	r3, #0
 800d758:	d015      	beq.n	800d786 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	f023 0307 	bic.w	r3, r3, #7
 800d760:	3308      	adds	r3, #8
 800d762:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	f003 0307 	and.w	r3, r3, #7
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d00b      	beq.n	800d786 <pvPortMalloc+0x6e>
	__asm volatile
 800d76e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d772:	b672      	cpsid	i
 800d774:	f383 8811 	msr	BASEPRI, r3
 800d778:	f3bf 8f6f 	isb	sy
 800d77c:	f3bf 8f4f 	dsb	sy
 800d780:	b662      	cpsie	i
 800d782:	617b      	str	r3, [r7, #20]
 800d784:	e7fe      	b.n	800d784 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d06a      	beq.n	800d862 <pvPortMalloc+0x14a>
 800d78c:	4b45      	ldr	r3, [pc, #276]	; (800d8a4 <pvPortMalloc+0x18c>)
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	687a      	ldr	r2, [r7, #4]
 800d792:	429a      	cmp	r2, r3
 800d794:	d865      	bhi.n	800d862 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d796:	4b44      	ldr	r3, [pc, #272]	; (800d8a8 <pvPortMalloc+0x190>)
 800d798:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d79a:	4b43      	ldr	r3, [pc, #268]	; (800d8a8 <pvPortMalloc+0x190>)
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d7a0:	e004      	b.n	800d7ac <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800d7a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7a4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d7a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d7ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7ae:	685b      	ldr	r3, [r3, #4]
 800d7b0:	687a      	ldr	r2, [r7, #4]
 800d7b2:	429a      	cmp	r2, r3
 800d7b4:	d903      	bls.n	800d7be <pvPortMalloc+0xa6>
 800d7b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d1f1      	bne.n	800d7a2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d7be:	4b37      	ldr	r3, [pc, #220]	; (800d89c <pvPortMalloc+0x184>)
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d7c4:	429a      	cmp	r2, r3
 800d7c6:	d04c      	beq.n	800d862 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d7c8:	6a3b      	ldr	r3, [r7, #32]
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	2208      	movs	r2, #8
 800d7ce:	4413      	add	r3, r2
 800d7d0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d7d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7d4:	681a      	ldr	r2, [r3, #0]
 800d7d6:	6a3b      	ldr	r3, [r7, #32]
 800d7d8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d7da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7dc:	685a      	ldr	r2, [r3, #4]
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	1ad2      	subs	r2, r2, r3
 800d7e2:	2308      	movs	r3, #8
 800d7e4:	005b      	lsls	r3, r3, #1
 800d7e6:	429a      	cmp	r2, r3
 800d7e8:	d920      	bls.n	800d82c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d7ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	4413      	add	r3, r2
 800d7f0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d7f2:	69bb      	ldr	r3, [r7, #24]
 800d7f4:	f003 0307 	and.w	r3, r3, #7
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d00b      	beq.n	800d814 <pvPortMalloc+0xfc>
 800d7fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d800:	b672      	cpsid	i
 800d802:	f383 8811 	msr	BASEPRI, r3
 800d806:	f3bf 8f6f 	isb	sy
 800d80a:	f3bf 8f4f 	dsb	sy
 800d80e:	b662      	cpsie	i
 800d810:	613b      	str	r3, [r7, #16]
 800d812:	e7fe      	b.n	800d812 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d816:	685a      	ldr	r2, [r3, #4]
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	1ad2      	subs	r2, r2, r3
 800d81c:	69bb      	ldr	r3, [r7, #24]
 800d81e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d822:	687a      	ldr	r2, [r7, #4]
 800d824:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d826:	69b8      	ldr	r0, [r7, #24]
 800d828:	f000 f900 	bl	800da2c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d82c:	4b1d      	ldr	r3, [pc, #116]	; (800d8a4 <pvPortMalloc+0x18c>)
 800d82e:	681a      	ldr	r2, [r3, #0]
 800d830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d832:	685b      	ldr	r3, [r3, #4]
 800d834:	1ad3      	subs	r3, r2, r3
 800d836:	4a1b      	ldr	r2, [pc, #108]	; (800d8a4 <pvPortMalloc+0x18c>)
 800d838:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d83a:	4b1a      	ldr	r3, [pc, #104]	; (800d8a4 <pvPortMalloc+0x18c>)
 800d83c:	681a      	ldr	r2, [r3, #0]
 800d83e:	4b1b      	ldr	r3, [pc, #108]	; (800d8ac <pvPortMalloc+0x194>)
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	429a      	cmp	r2, r3
 800d844:	d203      	bcs.n	800d84e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d846:	4b17      	ldr	r3, [pc, #92]	; (800d8a4 <pvPortMalloc+0x18c>)
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	4a18      	ldr	r2, [pc, #96]	; (800d8ac <pvPortMalloc+0x194>)
 800d84c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d84e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d850:	685a      	ldr	r2, [r3, #4]
 800d852:	4b13      	ldr	r3, [pc, #76]	; (800d8a0 <pvPortMalloc+0x188>)
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	431a      	orrs	r2, r3
 800d858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d85a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d85c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d85e:	2200      	movs	r2, #0
 800d860:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d862:	f7ff fa6d 	bl	800cd40 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800d866:	69fb      	ldr	r3, [r7, #28]
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d101      	bne.n	800d870 <pvPortMalloc+0x158>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800d86c:	f7f2 fe7a 	bl	8000564 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d870:	69fb      	ldr	r3, [r7, #28]
 800d872:	f003 0307 	and.w	r3, r3, #7
 800d876:	2b00      	cmp	r3, #0
 800d878:	d00b      	beq.n	800d892 <pvPortMalloc+0x17a>
 800d87a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d87e:	b672      	cpsid	i
 800d880:	f383 8811 	msr	BASEPRI, r3
 800d884:	f3bf 8f6f 	isb	sy
 800d888:	f3bf 8f4f 	dsb	sy
 800d88c:	b662      	cpsie	i
 800d88e:	60fb      	str	r3, [r7, #12]
 800d890:	e7fe      	b.n	800d890 <pvPortMalloc+0x178>
	return pvReturn;
 800d892:	69fb      	ldr	r3, [r7, #28]
}
 800d894:	4618      	mov	r0, r3
 800d896:	3728      	adds	r7, #40	; 0x28
 800d898:	46bd      	mov	sp, r7
 800d89a:	bd80      	pop	{r7, pc}
 800d89c:	20008170 	.word	0x20008170
 800d8a0:	2000817c 	.word	0x2000817c
 800d8a4:	20008174 	.word	0x20008174
 800d8a8:	20008168 	.word	0x20008168
 800d8ac:	20008178 	.word	0x20008178

0800d8b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d8b0:	b580      	push	{r7, lr}
 800d8b2:	b086      	sub	sp, #24
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d04a      	beq.n	800d958 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d8c2:	2308      	movs	r3, #8
 800d8c4:	425b      	negs	r3, r3
 800d8c6:	697a      	ldr	r2, [r7, #20]
 800d8c8:	4413      	add	r3, r2
 800d8ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d8cc:	697b      	ldr	r3, [r7, #20]
 800d8ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d8d0:	693b      	ldr	r3, [r7, #16]
 800d8d2:	685a      	ldr	r2, [r3, #4]
 800d8d4:	4b22      	ldr	r3, [pc, #136]	; (800d960 <vPortFree+0xb0>)
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	4013      	ands	r3, r2
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d10b      	bne.n	800d8f6 <vPortFree+0x46>
 800d8de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8e2:	b672      	cpsid	i
 800d8e4:	f383 8811 	msr	BASEPRI, r3
 800d8e8:	f3bf 8f6f 	isb	sy
 800d8ec:	f3bf 8f4f 	dsb	sy
 800d8f0:	b662      	cpsie	i
 800d8f2:	60fb      	str	r3, [r7, #12]
 800d8f4:	e7fe      	b.n	800d8f4 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d8f6:	693b      	ldr	r3, [r7, #16]
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d00b      	beq.n	800d916 <vPortFree+0x66>
 800d8fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d902:	b672      	cpsid	i
 800d904:	f383 8811 	msr	BASEPRI, r3
 800d908:	f3bf 8f6f 	isb	sy
 800d90c:	f3bf 8f4f 	dsb	sy
 800d910:	b662      	cpsie	i
 800d912:	60bb      	str	r3, [r7, #8]
 800d914:	e7fe      	b.n	800d914 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d916:	693b      	ldr	r3, [r7, #16]
 800d918:	685a      	ldr	r2, [r3, #4]
 800d91a:	4b11      	ldr	r3, [pc, #68]	; (800d960 <vPortFree+0xb0>)
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	4013      	ands	r3, r2
 800d920:	2b00      	cmp	r3, #0
 800d922:	d019      	beq.n	800d958 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d924:	693b      	ldr	r3, [r7, #16]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d115      	bne.n	800d958 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d92c:	693b      	ldr	r3, [r7, #16]
 800d92e:	685a      	ldr	r2, [r3, #4]
 800d930:	4b0b      	ldr	r3, [pc, #44]	; (800d960 <vPortFree+0xb0>)
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	43db      	mvns	r3, r3
 800d936:	401a      	ands	r2, r3
 800d938:	693b      	ldr	r3, [r7, #16]
 800d93a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d93c:	f7ff f9f2 	bl	800cd24 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d940:	693b      	ldr	r3, [r7, #16]
 800d942:	685a      	ldr	r2, [r3, #4]
 800d944:	4b07      	ldr	r3, [pc, #28]	; (800d964 <vPortFree+0xb4>)
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	4413      	add	r3, r2
 800d94a:	4a06      	ldr	r2, [pc, #24]	; (800d964 <vPortFree+0xb4>)
 800d94c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d94e:	6938      	ldr	r0, [r7, #16]
 800d950:	f000 f86c 	bl	800da2c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800d954:	f7ff f9f4 	bl	800cd40 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d958:	bf00      	nop
 800d95a:	3718      	adds	r7, #24
 800d95c:	46bd      	mov	sp, r7
 800d95e:	bd80      	pop	{r7, pc}
 800d960:	2000817c 	.word	0x2000817c
 800d964:	20008174 	.word	0x20008174

0800d968 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d968:	b480      	push	{r7}
 800d96a:	b085      	sub	sp, #20
 800d96c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d96e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d972:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d974:	4b27      	ldr	r3, [pc, #156]	; (800da14 <prvHeapInit+0xac>)
 800d976:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	f003 0307 	and.w	r3, r3, #7
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d00c      	beq.n	800d99c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	3307      	adds	r3, #7
 800d986:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	f023 0307 	bic.w	r3, r3, #7
 800d98e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d990:	68ba      	ldr	r2, [r7, #8]
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	1ad3      	subs	r3, r2, r3
 800d996:	4a1f      	ldr	r2, [pc, #124]	; (800da14 <prvHeapInit+0xac>)
 800d998:	4413      	add	r3, r2
 800d99a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d9a0:	4a1d      	ldr	r2, [pc, #116]	; (800da18 <prvHeapInit+0xb0>)
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d9a6:	4b1c      	ldr	r3, [pc, #112]	; (800da18 <prvHeapInit+0xb0>)
 800d9a8:	2200      	movs	r2, #0
 800d9aa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	68ba      	ldr	r2, [r7, #8]
 800d9b0:	4413      	add	r3, r2
 800d9b2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d9b4:	2208      	movs	r2, #8
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	1a9b      	subs	r3, r3, r2
 800d9ba:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	f023 0307 	bic.w	r3, r3, #7
 800d9c2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	4a15      	ldr	r2, [pc, #84]	; (800da1c <prvHeapInit+0xb4>)
 800d9c8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d9ca:	4b14      	ldr	r3, [pc, #80]	; (800da1c <prvHeapInit+0xb4>)
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	2200      	movs	r2, #0
 800d9d0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d9d2:	4b12      	ldr	r3, [pc, #72]	; (800da1c <prvHeapInit+0xb4>)
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	2200      	movs	r2, #0
 800d9d8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d9de:	683b      	ldr	r3, [r7, #0]
 800d9e0:	68fa      	ldr	r2, [r7, #12]
 800d9e2:	1ad2      	subs	r2, r2, r3
 800d9e4:	683b      	ldr	r3, [r7, #0]
 800d9e6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d9e8:	4b0c      	ldr	r3, [pc, #48]	; (800da1c <prvHeapInit+0xb4>)
 800d9ea:	681a      	ldr	r2, [r3, #0]
 800d9ec:	683b      	ldr	r3, [r7, #0]
 800d9ee:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d9f0:	683b      	ldr	r3, [r7, #0]
 800d9f2:	685b      	ldr	r3, [r3, #4]
 800d9f4:	4a0a      	ldr	r2, [pc, #40]	; (800da20 <prvHeapInit+0xb8>)
 800d9f6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d9f8:	683b      	ldr	r3, [r7, #0]
 800d9fa:	685b      	ldr	r3, [r3, #4]
 800d9fc:	4a09      	ldr	r2, [pc, #36]	; (800da24 <prvHeapInit+0xbc>)
 800d9fe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800da00:	4b09      	ldr	r3, [pc, #36]	; (800da28 <prvHeapInit+0xc0>)
 800da02:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800da06:	601a      	str	r2, [r3, #0]
}
 800da08:	bf00      	nop
 800da0a:	3714      	adds	r7, #20
 800da0c:	46bd      	mov	sp, r7
 800da0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da12:	4770      	bx	lr
 800da14:	20000168 	.word	0x20000168
 800da18:	20008168 	.word	0x20008168
 800da1c:	20008170 	.word	0x20008170
 800da20:	20008178 	.word	0x20008178
 800da24:	20008174 	.word	0x20008174
 800da28:	2000817c 	.word	0x2000817c

0800da2c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800da2c:	b480      	push	{r7}
 800da2e:	b085      	sub	sp, #20
 800da30:	af00      	add	r7, sp, #0
 800da32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800da34:	4b28      	ldr	r3, [pc, #160]	; (800dad8 <prvInsertBlockIntoFreeList+0xac>)
 800da36:	60fb      	str	r3, [r7, #12]
 800da38:	e002      	b.n	800da40 <prvInsertBlockIntoFreeList+0x14>
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	60fb      	str	r3, [r7, #12]
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	687a      	ldr	r2, [r7, #4]
 800da46:	429a      	cmp	r2, r3
 800da48:	d8f7      	bhi.n	800da3a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	685b      	ldr	r3, [r3, #4]
 800da52:	68ba      	ldr	r2, [r7, #8]
 800da54:	4413      	add	r3, r2
 800da56:	687a      	ldr	r2, [r7, #4]
 800da58:	429a      	cmp	r2, r3
 800da5a:	d108      	bne.n	800da6e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	685a      	ldr	r2, [r3, #4]
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	685b      	ldr	r3, [r3, #4]
 800da64:	441a      	add	r2, r3
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	685b      	ldr	r3, [r3, #4]
 800da76:	68ba      	ldr	r2, [r7, #8]
 800da78:	441a      	add	r2, r3
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	429a      	cmp	r2, r3
 800da80:	d118      	bne.n	800dab4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	681a      	ldr	r2, [r3, #0]
 800da86:	4b15      	ldr	r3, [pc, #84]	; (800dadc <prvInsertBlockIntoFreeList+0xb0>)
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	429a      	cmp	r2, r3
 800da8c:	d00d      	beq.n	800daaa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	685a      	ldr	r2, [r3, #4]
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	685b      	ldr	r3, [r3, #4]
 800da98:	441a      	add	r2, r3
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	681a      	ldr	r2, [r3, #0]
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	601a      	str	r2, [r3, #0]
 800daa8:	e008      	b.n	800dabc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800daaa:	4b0c      	ldr	r3, [pc, #48]	; (800dadc <prvInsertBlockIntoFreeList+0xb0>)
 800daac:	681a      	ldr	r2, [r3, #0]
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	601a      	str	r2, [r3, #0]
 800dab2:	e003      	b.n	800dabc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	681a      	ldr	r2, [r3, #0]
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800dabc:	68fa      	ldr	r2, [r7, #12]
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	429a      	cmp	r2, r3
 800dac2:	d002      	beq.n	800daca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	687a      	ldr	r2, [r7, #4]
 800dac8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800daca:	bf00      	nop
 800dacc:	3714      	adds	r7, #20
 800dace:	46bd      	mov	sp, r7
 800dad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad4:	4770      	bx	lr
 800dad6:	bf00      	nop
 800dad8:	20008168 	.word	0x20008168
 800dadc:	20008170 	.word	0x20008170

0800dae0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800dae0:	f8df d034 	ldr.w	sp, [pc, #52]	; 800db18 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800dae4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800dae6:	e003      	b.n	800daf0 <LoopCopyDataInit>

0800dae8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800dae8:	4b0c      	ldr	r3, [pc, #48]	; (800db1c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800daea:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800daec:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800daee:	3104      	adds	r1, #4

0800daf0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800daf0:	480b      	ldr	r0, [pc, #44]	; (800db20 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800daf2:	4b0c      	ldr	r3, [pc, #48]	; (800db24 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800daf4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800daf6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800daf8:	d3f6      	bcc.n	800dae8 <CopyDataInit>
  ldr  r2, =_sbss
 800dafa:	4a0b      	ldr	r2, [pc, #44]	; (800db28 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800dafc:	e002      	b.n	800db04 <LoopFillZerobss>

0800dafe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800dafe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800db00:	f842 3b04 	str.w	r3, [r2], #4

0800db04 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800db04:	4b09      	ldr	r3, [pc, #36]	; (800db2c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800db06:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800db08:	d3f9      	bcc.n	800dafe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800db0a:	f7f5 fa11 	bl	8002f30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800db0e:	f000 f811 	bl	800db34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800db12:	f7f2 fd2f 	bl	8000574 <main>
  bx  lr    
 800db16:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800db18:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 800db1c:	0800dbf4 	.word	0x0800dbf4
  ldr  r0, =_sdata
 800db20:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800db24:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 800db28:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 800db2c:	20008f10 	.word	0x20008f10

0800db30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800db30:	e7fe      	b.n	800db30 <ADC_IRQHandler>
	...

0800db34 <__libc_init_array>:
 800db34:	b570      	push	{r4, r5, r6, lr}
 800db36:	4e0d      	ldr	r6, [pc, #52]	; (800db6c <__libc_init_array+0x38>)
 800db38:	4c0d      	ldr	r4, [pc, #52]	; (800db70 <__libc_init_array+0x3c>)
 800db3a:	1ba4      	subs	r4, r4, r6
 800db3c:	10a4      	asrs	r4, r4, #2
 800db3e:	2500      	movs	r5, #0
 800db40:	42a5      	cmp	r5, r4
 800db42:	d109      	bne.n	800db58 <__libc_init_array+0x24>
 800db44:	4e0b      	ldr	r6, [pc, #44]	; (800db74 <__libc_init_array+0x40>)
 800db46:	4c0c      	ldr	r4, [pc, #48]	; (800db78 <__libc_init_array+0x44>)
 800db48:	f000 f820 	bl	800db8c <_init>
 800db4c:	1ba4      	subs	r4, r4, r6
 800db4e:	10a4      	asrs	r4, r4, #2
 800db50:	2500      	movs	r5, #0
 800db52:	42a5      	cmp	r5, r4
 800db54:	d105      	bne.n	800db62 <__libc_init_array+0x2e>
 800db56:	bd70      	pop	{r4, r5, r6, pc}
 800db58:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800db5c:	4798      	blx	r3
 800db5e:	3501      	adds	r5, #1
 800db60:	e7ee      	b.n	800db40 <__libc_init_array+0xc>
 800db62:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800db66:	4798      	blx	r3
 800db68:	3501      	adds	r5, #1
 800db6a:	e7f2      	b.n	800db52 <__libc_init_array+0x1e>
 800db6c:	0800dbec 	.word	0x0800dbec
 800db70:	0800dbec 	.word	0x0800dbec
 800db74:	0800dbec 	.word	0x0800dbec
 800db78:	0800dbf0 	.word	0x0800dbf0

0800db7c <memset>:
 800db7c:	4402      	add	r2, r0
 800db7e:	4603      	mov	r3, r0
 800db80:	4293      	cmp	r3, r2
 800db82:	d100      	bne.n	800db86 <memset+0xa>
 800db84:	4770      	bx	lr
 800db86:	f803 1b01 	strb.w	r1, [r3], #1
 800db8a:	e7f9      	b.n	800db80 <memset+0x4>

0800db8c <_init>:
 800db8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db8e:	bf00      	nop
 800db90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db92:	bc08      	pop	{r3}
 800db94:	469e      	mov	lr, r3
 800db96:	4770      	bx	lr

0800db98 <_fini>:
 800db98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db9a:	bf00      	nop
 800db9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db9e:	bc08      	pop	{r3}
 800dba0:	469e      	mov	lr, r3
 800dba2:	4770      	bx	lr
